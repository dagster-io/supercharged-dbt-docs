1:HL["/supercharged-dbt-docs/supercharged/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css",{"as":"style"}]
0:["3_N3LAWgtmWGg2et9V1N1",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.prep_subscription","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.prep_subscription\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/supercharged-dbt-docs/supercharged/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_5f725a","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.prep_subscription","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.prep_subscription\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.prep_subscription","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ReferenceListClient","async":false}
35:I{"id":4431,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:T1d7a,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
      ('map_merged_crm_account', 'map_merged_crm_account'),
      ('date_details', 'date_details'),
      ('zuora_account_source', 'zuora_account_source'),
      ('prep_billing_account_user', 'prep_billing_account_user'),
      ('sfdc_customer_subscription_source', 'sfdc_customer_subscription_source')

])}}

, zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@michellecooper",
    created_date="2021-01-07",
    updated_date="2023-04-12"
) }}11:T1f00,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), date_details AS (

    SELECT * 
    FROM "PROD".legacy.date_details

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

), sfdc_customer_subscription_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_customer_subscription_source

)

, zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-07'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined13:T111c,{{ config({
    "tags": ["mnpi_exception"],
    "alias": "dim_subscription"
}) }}

WITH prep_amendment AS (

  SELECT *
  FROM {{ ref('prep_amendment') }}

), subscription AS (

    SELECT *
    FROM {{ ref('prep_subscription') }}

), subscription_opportunity_mapping AS (

    SELECT *
    FROM {{ ref('map_subscription_opportunity') }}

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM {{ ref('map_subscription_lineage') }}

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    {{ get_keyed_nulls('prep_amendment.dim_amendment_id') }}                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@michellecooper",
    created_date="2020-12-16",
    updated_date="2023-04-12"
) }}14:T11db,

WITH prep_amendment AS (

  SELECT *
  FROM "PROD".common_prep.prep_amendment

), subscription AS (

    SELECT *
    FROM "PROD".common_prep.prep_subscription

), subscription_opportunity_mapping AS (

    SELECT *
    FROM "PROD".common_mapping.map_subscription_opportunity

), subscription_lineage AS (

    SELECT DISTINCT
      subscription_name_slugify,
      subscription_lineage,
      oldest_subscription_in_cohort,
      subscription_cohort_month,
      subscription_cohort_quarter,
      subscription_cohort_year
    FROM "PROD".common_mapping.map_subscription_lineage

), final AS (

  SELECT
    --Surrogate Key
    subscription.dim_subscription_id,

    --Natural Key
    subscription.subscription_name,
    subscription.subscription_version,

    --Common Dimension Keys
    subscription.dim_crm_account_id,
    subscription.dim_billing_account_id,
    subscription.dim_billing_account_id_invoice_owner_account,
    subscription.dim_billing_account_id_creator_account,
    CASE
       WHEN subscription.subscription_created_date < '2019-02-01'
         THEN NULL
       ELSE subscription_opportunity_mapping.dim_crm_opportunity_id
    END                                                                             AS dim_crm_opportunity_id,
    subscription.dim_crm_opportunity_id_current_open_renewal,
    subscription.dim_crm_opportunity_id_closed_lost_renewal,
    

  COALESCE(prep_amendment.dim_amendment_id, MD5(-1)) 

                        AS dim_amendment_id_subscription,

    --Subscription Information
    subscription.created_by_id,
    subscription.updated_by_id,
    subscription.dim_subscription_id_original,
    subscription.dim_subscription_id_previous,
    subscription.subscription_name_slugify,
    subscription.subscription_status,
    subscription.namespace_id,
    subscription.namespace_name,
    subscription.zuora_renewal_subscription_name,
    subscription.zuora_renewal_subscription_name_slugify,
    subscription.current_term,
    subscription.renewal_term,
    subscription.renewal_term_period_type,
    subscription.eoa_starter_bronze_offer_accepted,
    subscription.subscription_sales_type,
    subscription.auto_renew_native_hist,
    subscription.auto_renew_customerdot_hist,
    subscription.turn_on_cloud_licensing,
    subscription.turn_on_operational_metrics,
    subscription.contract_operational_metrics,
    subscription.contract_auto_renewal,
    subscription.turn_on_auto_renewal,
    subscription.contract_seat_reconciliation,
    subscription.turn_on_seat_reconciliation,
    subscription_opportunity_mapping.is_questionable_opportunity_mapping,
    subscription.invoice_owner_account,
    subscription.creator_account,
    subscription.was_purchased_through_reseller,
    subscription.multi_year_deal_subscription_linkage,

    --Date Information
    subscription.subscription_start_date,
    subscription.subscription_end_date,
    subscription.subscription_start_month,
    subscription.subscription_end_month,
    subscription.subscription_end_fiscal_year,
    subscription.subscription_created_date,
    subscription.subscription_updated_date,
    subscription.term_start_date,
    subscription.term_end_date,
    subscription.term_start_month,
    subscription.term_end_month,
    subscription.term_start_fiscal_year,
    subscription.term_end_fiscal_year,
    subscription.is_single_fiscal_year_term_subscription,
    subscription.second_active_renewal_month,
    subscription.cancelled_date,

    --Lineage and Cohort Information
    subscription_lineage.subscription_lineage,
    subscription_lineage.oldest_subscription_in_cohort,
    subscription_lineage.subscription_cohort_month,
    subscription_lineage.subscription_cohort_quarter,
    subscription_lineage.subscription_cohort_year

  FROM subscription
  LEFT JOIN subscription_lineage
    ON subscription_lineage.subscription_name_slugify = subscription.subscription_name_slugify
  LEFT JOIN prep_amendment
    ON subscription.dim_amendment_id_subscription = prep_amendment.dim_amendment_id
  LEFT JOIN subscription_opportunity_mapping
    ON subscription.dim_subscription_id = subscription_opportunity_mapping.dim_subscription_id

)

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-12-16'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final15:Td49,{{ config(
    tags=["mnpi_exception"]
) }}

WITH seat_links AS (

    SELECT
      order_id,
      zuora_subscription_id                                                 AS order_subscription_id,
      TRIM(zuora_subscription_id)                                           AS dim_subscription_id,
      report_date,
      active_user_count,
      license_user_count,
      max_historical_user_count,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY order_subscription_id
            ORDER BY report_date DESC) = 1,
          TRUE, FALSE)                                                      AS is_last_seat_link_report_per_subscription,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY order_id
            ORDER BY report_date DESC) = 1,
          TRUE, FALSE)                                                      AS is_last_seat_link_report_per_order
    FROM {{ ref('customers_db_license_seat_links_source') }}

), customers_orders AS (

    SELECT *
    FROM {{ ref('customers_db_orders_source') }}

), subscriptions AS (

    SELECT *
    FROM {{ ref('prep_subscription') }}
    
), product_details AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id
    FROM {{ ref('dim_product_detail') }}
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')

), joined AS (

    SELECT
      customers_orders.order_id                                             AS customers_db_order_id,
      seat_links.order_subscription_id,
      {{ get_keyed_nulls('subscriptions.dim_subscription_id') }}            AS dim_subscription_id,
      {{ get_keyed_nulls('subscriptions.dim_subscription_id_original') }}   AS dim_subscription_id_original,
      {{ get_keyed_nulls('subscriptions.dim_subscription_id_previous') }}   AS dim_subscription_id_previous,
      {{ get_keyed_nulls('subscriptions.dim_crm_account_id') }}             AS dim_crm_account_id,
      {{ get_keyed_nulls('subscriptions.dim_billing_account_id') }}         AS dim_billing_account_id,
      {{ get_keyed_nulls('product_details.dim_product_tier_id') }}          AS dim_product_tier_id,
      seat_links.active_user_count                                          AS active_user_count,
      seat_links.license_user_count,
      seat_links.max_historical_user_count                                  AS max_historical_user_count,
      seat_links.report_date,
      seat_links.is_last_seat_link_report_per_subscription,
      seat_links.is_last_seat_link_report_per_order,
      IFF(IFNULL(seat_links.order_subscription_id, '') = subscriptions.dim_subscription_id,
          TRUE, FALSE)                                                      AS is_subscription_in_zuora,
      IFF(product_details.dim_product_tier_id IS NOT NULL, TRUE, FALSE)     AS is_rate_plan_in_zuora,
      IFF(seat_links.active_user_count IS NOT NULL, TRUE, FALSE)            AS is_active_user_count_available
    FROM seat_links 
    INNER JOIN customers_orders
      ON seat_links.order_id = customers_orders.order_id
    LEFT OUTER JOIN subscriptions
      ON seat_links.dim_subscription_id = subscriptions.dim_subscription_id
    LEFT OUTER JOIN product_details
      ON customers_orders.product_rate_plan_id = product_details.product_rate_plan_id
      
)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-02-02",
    updated_date="2023-06-22"
) }}16:Te24,

WITH seat_links AS (

    SELECT
      order_id,
      zuora_subscription_id                                                 AS order_subscription_id,
      TRIM(zuora_subscription_id)                                           AS dim_subscription_id,
      report_date,
      active_user_count,
      license_user_count,
      max_historical_user_count,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY order_subscription_id
            ORDER BY report_date DESC) = 1,
          TRUE, FALSE)                                                      AS is_last_seat_link_report_per_subscription,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY order_id
            ORDER BY report_date DESC) = 1,
          TRUE, FALSE)                                                      AS is_last_seat_link_report_per_order
    FROM "PREP".customers.customers_db_license_seat_links_source

), customers_orders AS (

    SELECT *
    FROM "PREP".customers.customers_db_orders_source

), subscriptions AS (

    SELECT *
    FROM "PROD".common_prep.prep_subscription
    
), product_details AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id
    FROM "PROD".common.dim_product_detail
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')

), joined AS (

    SELECT
      customers_orders.order_id                                             AS customers_db_order_id,
      seat_links.order_subscription_id,
      

  COALESCE(subscriptions.dim_subscription_id, MD5(-1)) 

            AS dim_subscription_id,
      

  COALESCE(subscriptions.dim_subscription_id_original, MD5(-1)) 

   AS dim_subscription_id_original,
      

  COALESCE(subscriptions.dim_subscription_id_previous, MD5(-1)) 

   AS dim_subscription_id_previous,
      

  COALESCE(subscriptions.dim_crm_account_id, MD5(-1)) 

             AS dim_crm_account_id,
      

  COALESCE(subscriptions.dim_billing_account_id, MD5(-1)) 

         AS dim_billing_account_id,
      

  COALESCE(product_details.dim_product_tier_id, MD5(-1)) 

          AS dim_product_tier_id,
      seat_links.active_user_count                                          AS active_user_count,
      seat_links.license_user_count,
      seat_links.max_historical_user_count                                  AS max_historical_user_count,
      seat_links.report_date,
      seat_links.is_last_seat_link_report_per_subscription,
      seat_links.is_last_seat_link_report_per_order,
      IFF(IFNULL(seat_links.order_subscription_id, '') = subscriptions.dim_subscription_id,
          TRUE, FALSE)                                                      AS is_subscription_in_zuora,
      IFF(product_details.dim_product_tier_id IS NOT NULL, TRUE, FALSE)     AS is_rate_plan_in_zuora,
      IFF(seat_links.active_user_count IS NOT NULL, TRUE, FALSE)            AS is_active_user_count_available
    FROM seat_links 
    INNER JOIN customers_orders
      ON seat_links.order_id = customers_orders.order_id
    LEFT OUTER JOIN subscriptions
      ON seat_links.dim_subscription_id = subscriptions.dim_subscription_id
    LEFT OUTER JOIN product_details
      ON customers_orders.product_rate_plan_id = product_details.product_rate_plan_id
      
)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-02-02'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined17:T3c00,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "incremental",
    unique_key = "ping_instance_id"
) }}

{{ simple_cte([
    ('prep_license', 'prep_license'),
    ('prep_subscription', 'prep_subscription'),
    ('dim_date', 'dim_date'),
    ('map_ip_to_country', 'map_ip_to_country'),
    ('locations', 'prep_location_country'),
    ('dim_product_tier', 'dim_product_tier'),
    ('prep_ping_instance', 'prep_ping_instance'),
    ('dim_crm_account','dim_crm_account'),
    ('prep_app_release_major_minor', 'prep_app_release_major_minor'),
    ('dim_installation', 'dim_installation') 
    ])

}}

, map_ip_location AS (

    SELECT
      map_ip_to_country.ip_address_hash                 AS ip_address_hash,
      map_ip_to_country.dim_location_country_id         AS dim_location_country_id
    FROM map_ip_to_country
    INNER JOIN locations
      WHERE map_ip_to_country.dim_location_country_id = locations.dim_location_country_id

), source AS (

    SELECT
      prep_ping_instance.*,
      prep_ping_instance.raw_usage_data_payload:license_billable_users::NUMBER                            AS license_billable_users, 
      TO_DATE(prep_ping_instance.raw_usage_data_payload:license_trial_ends_on::TEXT)                      AS license_trial_ends_on,
      (prep_ping_instance.raw_usage_data_payload:license_subscription_id::TEXT)                           AS license_subscription_id,
      prep_ping_instance.raw_usage_data_payload:usage_activity_by_stage_monthly.manage.events::NUMBER     AS umau_value
    FROM prep_ping_instance
      {% if is_incremental() %}
                  WHERE uploaded_at >= (SELECT MAX(uploaded_at) FROM {{this}})
      {% endif %}

), add_country_info_to_usage_ping AS (

    SELECT
      source.*,
      REGEXP_REPLACE(NULLIF(source.version, ''), '[^0-9.]+')                                              AS cleaned_version,
      SPLIT_PART(cleaned_version, '.', 1)::NUMBER                                                         AS major_version,
      SPLIT_PART(cleaned_version, '.', 2)::NUMBER                                                         AS minor_version,
      major_version || '.' || minor_version                                                               AS major_minor_version,
      map_ip_location.dim_location_country_id                                                             AS dim_location_country_id

    FROM source
    LEFT JOIN map_ip_location
      ON source.ip_address_hash = map_ip_location.ip_address_hash

), prep_usage_ping_cte AS (

    SELECT
      add_country_info_to_usage_ping.dim_ping_instance_id                                AS dim_ping_instance_id,
      add_country_info_to_usage_ping.dim_host_id                                         AS dim_host_id,
      add_country_info_to_usage_ping.dim_instance_id                                     AS dim_instance_id,
      add_country_info_to_usage_ping.dim_installation_id                                 AS dim_installation_id,
      dim_product_tier.dim_product_tier_id                                               AS dim_product_tier_id,
      prep_app_release_major_minor.dim_app_release_major_minor_sk                        AS dim_app_release_major_minor_sk,
      latest_version.dim_app_release_major_minor_sk                                      AS dim_latest_available_app_release_major_minor_sk,
      add_country_info_to_usage_ping.ping_created_at                                     AS ping_created_at,
      add_country_info_to_usage_ping.uploaded_at                                         AS uploaded_at,
      add_country_info_to_usage_ping.hostname                                            AS hostname,
      add_country_info_to_usage_ping.license_sha256                                      AS license_sha256,
      add_country_info_to_usage_ping.license_md5                                         AS license_md5,
      add_country_info_to_usage_ping.dim_location_country_id                             AS dim_location_country_id,
      add_country_info_to_usage_ping.license_trial_ends_on                               AS license_trial_ends_on,
      add_country_info_to_usage_ping.license_subscription_id                             AS license_subscription_id,
      add_country_info_to_usage_ping.license_billable_users                              AS license_billable_users,
      add_country_info_to_usage_ping.Instance_user_count                                 AS instance_user_count,
      add_country_info_to_usage_ping.historical_max_users                                AS historical_max_users,
      add_country_info_to_usage_ping.license_user_count                                  AS license_user_count,
      add_country_info_to_usage_ping.umau_value                                          AS umau_value,
      add_country_info_to_usage_ping.product_tier                                        AS product_tier,
      add_country_info_to_usage_ping.main_edition                                        AS main_edition,
      add_country_info_to_usage_ping.ping_type                                           AS ping_type
    FROM add_country_info_to_usage_ping
    LEFT JOIN dim_product_tier
      ON TRIM(LOWER(add_country_info_to_usage_ping.product_tier)) = TRIM(LOWER(dim_product_tier.product_tier_historical_short))
      AND add_country_info_to_usage_ping.ping_deployment_type = dim_product_tier.product_deployment_type
    LEFT JOIN prep_app_release_major_minor
      ON prep_app_release_major_minor.major_minor_version = add_country_info_to_usage_ping.major_minor_version
      AND prep_app_release_major_minor.application = 'GitLab'
    LEFT JOIN prep_app_release_major_minor AS latest_version -- Join the latest version released at the time of the ping.
      ON add_country_info_to_usage_ping.ping_created_at BETWEEN latest_version.release_date AND {{ coalesce_to_infinity('latest_version.next_version_release_date') }}
      AND latest_version.application = 'GitLab'
    QUALIFY RANK() OVER(PARTITION BY add_country_info_to_usage_ping.dim_ping_instance_id ORDER BY latest_version.release_date DESC) = 1
    -- Adding the QUALIFY statement because of the latest_version CTE. There is rare case when the ping_created_at is right between the last day of a release and when the new one comes out.
    -- This causes two records to be matched and then we have two records per one ping.
    -- The rank statements gets rid of this. Using rank instead row_number since rank will preserve other might be duplicates in the data, while rank only addresses
    -- the duplicates that are entered in the data consequence of the latest_version CTE join condition. 
      
), prep_usage_ping_and_license AS (

    SELECT
      {{ dbt_utils.surrogate_key(['prep_usage_ping_cte.dim_ping_instance_id']) }}                         AS ping_instance_id,
      prep_usage_ping_cte.dim_ping_instance_id                                                            AS dim_ping_instance_id,
      prep_usage_ping_cte.ping_created_at                                                                 AS ping_created_at,
      prep_usage_ping_cte.uploaded_at                                                                     AS uploaded_at,
      prep_usage_ping_cte.dim_product_tier_id                                                             AS dim_product_tier_id,
      COALESCE(sha256.dim_subscription_id, md5.dim_subscription_id)                                       AS dim_subscription_id,
      prep_usage_ping_cte.license_subscription_id                                                         AS license_subscription_id,
      prep_usage_ping_cte.dim_location_country_id                                                         AS dim_location_country_id,
      dim_date.date_id                                                                                    AS dim_ping_date_id,
      prep_usage_ping_cte.dim_instance_id                                                                 AS dim_instance_id,
      prep_usage_ping_cte.dim_host_id                                                                     AS dim_host_id,
      prep_usage_ping_cte.dim_installation_id                                                             AS dim_installation_id,
      COALESCE(sha256.dim_license_id, md5.dim_license_id)                                                 AS dim_license_id,
      prep_usage_ping_cte.dim_app_release_major_minor_sk                                                  AS dim_app_release_major_minor_sk, 
      prep_usage_ping_cte.dim_latest_available_app_release_major_minor_sk                                 AS dim_latest_available_app_release_major_minor_sk,
      prep_usage_ping_cte.license_sha256                                                                  AS license_sha256,
      prep_usage_ping_cte.license_md5                                                                     AS license_md5,
      prep_usage_ping_cte.license_billable_users                                                          AS license_billable_users,
      prep_usage_ping_cte.Instance_user_count                                                             AS instance_user_count,
      prep_usage_ping_cte.historical_max_users                                                            AS historical_max_user_count,
      prep_usage_ping_cte.license_user_count                                                              AS license_user_count,
      prep_usage_ping_cte.hostname                                                                        AS hostname,
      prep_usage_ping_cte.umau_value                                                                      AS umau_value,
      prep_usage_ping_cte.license_subscription_id                                                         AS dim_subscription_license_id,
      IFF(prep_usage_ping_cte.ping_created_at < prep_usage_ping_cte.license_trial_ends_on, TRUE, FALSE)   AS is_trial,
      prep_usage_ping_cte.product_tier                                                                    AS product_tier,
      prep_usage_ping_cte.main_edition                                                                    AS main_edition_product_tier,
      'VERSION_DB'                                                                                        AS data_source,
      ping_type                                                                                           AS ping_type
    FROM prep_usage_ping_cte
    LEFT JOIN prep_license AS md5
      ON prep_usage_ping_cte.license_md5 = md5.license_md5
    LEFT JOIN prep_license AS sha256
      ON prep_usage_ping_cte.license_sha256 = sha256.license_sha256
    LEFT JOIN dim_date
      ON TO_DATE(prep_usage_ping_cte.ping_created_at) = dim_date.date_day

), joined_payload AS (

    SELECT
      prep_usage_ping_and_license.ping_instance_id                                                           AS ping_instance_id,
      prep_usage_ping_and_license.dim_ping_instance_id                                                       AS dim_ping_instance_id,
      prep_usage_ping_and_license.ping_created_at                                                            AS ping_created_at,
      prep_usage_ping_and_license.uploaded_at                                                                AS uploaded_at,
      prep_usage_ping_and_license.dim_product_tier_id                                                        AS dim_product_tier_id,
      COALESCE(prep_usage_ping_and_license.license_subscription_id, prep_subscription.dim_subscription_id)   AS dim_subscription_id,
      prep_subscription.dim_crm_account_id                                                                   AS dim_crm_account_id,
      dim_crm_account.dim_parent_crm_account_id                                                              AS dim_parent_crm_account_id,
      prep_usage_ping_and_license.dim_location_country_id                                                    AS dim_location_country_id,
      prep_usage_ping_and_license.dim_ping_date_id                                                           AS dim_ping_date_id,
      prep_usage_ping_and_license.dim_instance_id                                                            AS dim_instance_id,
      prep_usage_ping_and_license.dim_host_id                                                                AS dim_host_id,
      prep_usage_ping_and_license.dim_installation_id                                                        AS dim_installation_id,
      prep_usage_ping_and_license.dim_license_id                                                             AS dim_license_id,
      prep_usage_ping_and_license.dim_app_release_major_minor_sk                                             AS dim_app_release_major_minor_sk,
      prep_usage_ping_and_license.dim_latest_available_app_release_major_minor_sk                            AS dim_latest_available_app_release_major_minor_sk,
      prep_usage_ping_and_license.license_sha256                                                             AS license_sha256,
      prep_usage_ping_and_license.license_md5                                                                AS license_md5,
      prep_usage_ping_and_license.license_billable_users                                                     AS license_billable_users,
      prep_usage_ping_and_license.instance_user_count                                                        AS instance_user_count,
      dim_installation.installation_creation_date                                                            AS installation_creation_date,
      prep_usage_ping_and_license.historical_max_user_count                                                  AS historical_max_user_count,
      prep_usage_ping_and_license.license_user_count                                                         AS license_user_count,
      prep_usage_ping_and_license.hostname                                                                   AS hostname,
      prep_usage_ping_and_license.umau_value                                                                 AS umau_value,
      prep_usage_ping_and_license.dim_subscription_license_id                                                AS dim_subscription_license_id,
      prep_usage_ping_and_license.is_trial                                                                   AS is_trial,
      prep_usage_ping_and_license.product_tier                                                               AS product_tier,
      prep_usage_ping_and_license.main_edition_product_tier                                                  AS main_edition_product_tier,
      'VERSION_DB'                                                                                           AS data_source
    FROM prep_usage_ping_and_license
    LEFT JOIN prep_subscription
      ON prep_usage_ping_and_license.dim_subscription_id = prep_subscription.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON prep_subscription.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_installation
      ON dim_installation.dim_installation_id = prep_usage_ping_and_license.dim_installation_id

)

{{ dbt_audit(
    cte_ref="joined_payload",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-03-08",
    updated_date="2023-06-12"
) }}18:Td19, **Description:** Atomic level instance Service Ping data by ping, including basic identifiers for easy joins out to dimension tables. Metrics are not included in this model
- Atomic (lowest grain) data with a single record per ping
- Includes installation, instance, date, product, billing, and subscription identifiers

**Data Grain:**
- dim_ping_instance_id

**Filters Applied to Model:**
- `Inherited` - `uuid IS NOT NULL` (uuid is synonymous with dim_instance_id)
- `Inherited` - `version NOT LIKE '%VERSION%`

**Business Logic in this Model:**
- `is_trial` = `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`
- `dim_subscription_id` = `COALESCE(ping_payload.license_subscription_id, prep_subscription.dim_subscription_id)`
- `umau_value` = metric value from `usage_activity_by_stage_monthly.manage.events`

**Other Comments:**
- The `fct_ping_instance` table is built directly from the [prep_ping_instance table](https://gitlab-data.gitlab.io/analytics/#!/model/model.gitlab_snowflake.prep_ping_instance) which brings in Instance Service Ping data one record per Service Ping.  Along with the Instance information a 'Payload' column with an array of Metrics is captured in the Service Ping.
- Sums, Counts and Percents of Usage (called metrics) is captured along with the Implementation Information at the Instance Level and sent to GitLab. The Instance Owner determines whether Service Ping data will be sent or not.
- GitLab implementations can be Customer Hosted (Self-Managed), GitLab Hosted (referred to as SaaS or Dotcom data) or GitLab Dedicated Hosted (where each Installation is Hosted by GitLab but on Separate Servers).  
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_instance_id` is synonymous with `uuid` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- Multiple Instances can be hosted on each Implementation. Multiple Installations can be included within each Instance which is determined by Host_id. (Instance_id || Host_id = Installation_id)
- Service Ping data is captured at a particular point in time with `all-time, 7_day and 28_day` metrics.  The metrics are only pertinent to the Ping Date and Time and can not be aggregated across Ping Dates. Service Pings are normally compared WoW, MoM, YoY,  etc.  
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 19:T3e18,



WITH prep_license AS (

    SELECT * 
    FROM "PROD".common_prep.prep_license

), prep_subscription AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), map_ip_to_country AS (

    SELECT * 
    FROM "PROD".common_mapping.map_ip_to_country

), locations AS (

    SELECT * 
    FROM "PROD".common_prep.prep_location_country

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

), prep_ping_instance AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ping_instance

), dim_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.dim_crm_account

), prep_app_release_major_minor AS (

    SELECT * 
    FROM "PROD".common_prep.prep_app_release_major_minor

), dim_installation AS (

    SELECT * 
    FROM "PROD".common.dim_installation

)

, map_ip_location AS (

    SELECT
      map_ip_to_country.ip_address_hash                 AS ip_address_hash,
      map_ip_to_country.dim_location_country_id         AS dim_location_country_id
    FROM map_ip_to_country
    INNER JOIN locations
      WHERE map_ip_to_country.dim_location_country_id = locations.dim_location_country_id

), source AS (

    SELECT
      prep_ping_instance.*,
      prep_ping_instance.raw_usage_data_payload:license_billable_users::NUMBER                            AS license_billable_users, 
      TO_DATE(prep_ping_instance.raw_usage_data_payload:license_trial_ends_on::TEXT)                      AS license_trial_ends_on,
      (prep_ping_instance.raw_usage_data_payload:license_subscription_id::TEXT)                           AS license_subscription_id,
      prep_ping_instance.raw_usage_data_payload:usage_activity_by_stage_monthly.manage.events::NUMBER     AS umau_value
    FROM prep_ping_instance
      
                  WHERE uploaded_at >= (SELECT MAX(uploaded_at) FROM "PROD".common.fct_ping_instance)
      

), add_country_info_to_usage_ping AS (

    SELECT
      source.*,
      REGEXP_REPLACE(NULLIF(source.version, ''), '[^0-9.]+')                                              AS cleaned_version,
      SPLIT_PART(cleaned_version, '.', 1)::NUMBER                                                         AS major_version,
      SPLIT_PART(cleaned_version, '.', 2)::NUMBER                                                         AS minor_version,
      major_version || '.' || minor_version                                                               AS major_minor_version,
      map_ip_location.dim_location_country_id                                                             AS dim_location_country_id

    FROM source
    LEFT JOIN map_ip_location
      ON source.ip_address_hash = map_ip_location.ip_address_hash

), prep_usage_ping_cte AS (

    SELECT
      add_country_info_to_usage_ping.dim_ping_instance_id                                AS dim_ping_instance_id,
      add_country_info_to_usage_ping.dim_host_id                                         AS dim_host_id,
      add_country_info_to_usage_ping.dim_instance_id                                     AS dim_instance_id,
      add_country_info_to_usage_ping.dim_installation_id                                 AS dim_installation_id,
      dim_product_tier.dim_product_tier_id                                               AS dim_product_tier_id,
      prep_app_release_major_minor.dim_app_release_major_minor_sk                        AS dim_app_release_major_minor_sk,
      latest_version.dim_app_release_major_minor_sk                                      AS dim_latest_available_app_release_major_minor_sk,
      add_country_info_to_usage_ping.ping_created_at                                     AS ping_created_at,
      add_country_info_to_usage_ping.uploaded_at                                         AS uploaded_at,
      add_country_info_to_usage_ping.hostname                                            AS hostname,
      add_country_info_to_usage_ping.license_sha256                                      AS license_sha256,
      add_country_info_to_usage_ping.license_md5                                         AS license_md5,
      add_country_info_to_usage_ping.dim_location_country_id                             AS dim_location_country_id,
      add_country_info_to_usage_ping.license_trial_ends_on                               AS license_trial_ends_on,
      add_country_info_to_usage_ping.license_subscription_id                             AS license_subscription_id,
      add_country_info_to_usage_ping.license_billable_users                              AS license_billable_users,
      add_country_info_to_usage_ping.Instance_user_count                                 AS instance_user_count,
      add_country_info_to_usage_ping.historical_max_users                                AS historical_max_users,
      add_country_info_to_usage_ping.license_user_count                                  AS license_user_count,
      add_country_info_to_usage_ping.umau_value                                          AS umau_value,
      add_country_info_to_usage_ping.product_tier                                        AS product_tier,
      add_country_info_to_usage_ping.main_edition                                        AS main_edition,
      add_country_info_to_usage_ping.ping_type                                           AS ping_type
    FROM add_country_info_to_usage_ping
    LEFT JOIN dim_product_tier
      ON TRIM(LOWER(add_country_info_to_usage_ping.product_tier)) = TRIM(LOWER(dim_product_tier.product_tier_historical_short))
      AND add_country_info_to_usage_ping.ping_deployment_type = dim_product_tier.product_deployment_type
    LEFT JOIN prep_app_release_major_minor
      ON prep_app_release_major_minor.major_minor_version = add_country_info_to_usage_ping.major_minor_version
      AND prep_app_release_major_minor.application = 'GitLab'
    LEFT JOIN prep_app_release_major_minor AS latest_version -- Join the latest version released at the time of the ping.
      ON add_country_info_to_usage_ping.ping_created_at BETWEEN latest_version.release_date AND COALESCE( latest_version.next_version_release_date, '9999-12-31'::TIMESTAMP)
      AND latest_version.application = 'GitLab'
    QUALIFY RANK() OVER(PARTITION BY add_country_info_to_usage_ping.dim_ping_instance_id ORDER BY latest_version.release_date DESC) = 1
    -- Adding the QUALIFY statement because of the latest_version CTE. There is rare case when the ping_created_at is right between the last day of a release and when the new one comes out.
    -- This causes two records to be matched and then we have two records per one ping.
    -- The rank statements gets rid of this. Using rank instead row_number since rank will preserve other might be duplicates in the data, while rank only addresses
    -- the duplicates that are entered in the data consequence of the latest_version CTE join condition. 
      
), prep_usage_ping_and_license AS (

    SELECT
      md5(cast(coalesce(cast(prep_usage_ping_cte.dim_ping_instance_id as 
    varchar
), '') as 
    varchar
))                         AS ping_instance_id,
      prep_usage_ping_cte.dim_ping_instance_id                                                            AS dim_ping_instance_id,
      prep_usage_ping_cte.ping_created_at                                                                 AS ping_created_at,
      prep_usage_ping_cte.uploaded_at                                                                     AS uploaded_at,
      prep_usage_ping_cte.dim_product_tier_id                                                             AS dim_product_tier_id,
      COALESCE(sha256.dim_subscription_id, md5.dim_subscription_id)                                       AS dim_subscription_id,
      prep_usage_ping_cte.license_subscription_id                                                         AS license_subscription_id,
      prep_usage_ping_cte.dim_location_country_id                                                         AS dim_location_country_id,
      dim_date.date_id                                                                                    AS dim_ping_date_id,
      prep_usage_ping_cte.dim_instance_id                                                                 AS dim_instance_id,
      prep_usage_ping_cte.dim_host_id                                                                     AS dim_host_id,
      prep_usage_ping_cte.dim_installation_id                                                             AS dim_installation_id,
      COALESCE(sha256.dim_license_id, md5.dim_license_id)                                                 AS dim_license_id,
      prep_usage_ping_cte.dim_app_release_major_minor_sk                                                  AS dim_app_release_major_minor_sk, 
      prep_usage_ping_cte.dim_latest_available_app_release_major_minor_sk                                 AS dim_latest_available_app_release_major_minor_sk,
      prep_usage_ping_cte.license_sha256                                                                  AS license_sha256,
      prep_usage_ping_cte.license_md5                                                                     AS license_md5,
      prep_usage_ping_cte.license_billable_users                                                          AS license_billable_users,
      prep_usage_ping_cte.Instance_user_count                                                             AS instance_user_count,
      prep_usage_ping_cte.historical_max_users                                                            AS historical_max_user_count,
      prep_usage_ping_cte.license_user_count                                                              AS license_user_count,
      prep_usage_ping_cte.hostname                                                                        AS hostname,
      prep_usage_ping_cte.umau_value                                                                      AS umau_value,
      prep_usage_ping_cte.license_subscription_id                                                         AS dim_subscription_license_id,
      IFF(prep_usage_ping_cte.ping_created_at < prep_usage_ping_cte.license_trial_ends_on, TRUE, FALSE)   AS is_trial,
      prep_usage_ping_cte.product_tier                                                                    AS product_tier,
      prep_usage_ping_cte.main_edition                                                                    AS main_edition_product_tier,
      'VERSION_DB'                                                                                        AS data_source,
      ping_type                                                                                           AS ping_type
    FROM prep_usage_ping_cte
    LEFT JOIN prep_license AS md5
      ON prep_usage_ping_cte.license_md5 = md5.license_md5
    LEFT JOIN prep_license AS sha256
      ON prep_usage_ping_cte.license_sha256 = sha256.license_sha256
    LEFT JOIN dim_date
      ON TO_DATE(prep_usage_ping_cte.ping_created_at) = dim_date.date_day

), joined_payload AS (

    SELECT
      prep_usage_ping_and_license.ping_instance_id                                                           AS ping_instance_id,
      prep_usage_ping_and_license.dim_ping_instance_id                                                       AS dim_ping_instance_id,
      prep_usage_ping_and_license.ping_created_at                                                            AS ping_created_at,
      prep_usage_ping_and_license.uploaded_at                                                                AS uploaded_at,
      prep_usage_ping_and_license.dim_product_tier_id                                                        AS dim_product_tier_id,
      COALESCE(prep_usage_ping_and_license.license_subscription_id, prep_subscription.dim_subscription_id)   AS dim_subscription_id,
      prep_subscription.dim_crm_account_id                                                                   AS dim_crm_account_id,
      dim_crm_account.dim_parent_crm_account_id                                                              AS dim_parent_crm_account_id,
      prep_usage_ping_and_license.dim_location_country_id                                                    AS dim_location_country_id,
      prep_usage_ping_and_license.dim_ping_date_id                                                           AS dim_ping_date_id,
      prep_usage_ping_and_license.dim_instance_id                                                            AS dim_instance_id,
      prep_usage_ping_and_license.dim_host_id                                                                AS dim_host_id,
      prep_usage_ping_and_license.dim_installation_id                                                        AS dim_installation_id,
      prep_usage_ping_and_license.dim_license_id                                                             AS dim_license_id,
      prep_usage_ping_and_license.dim_app_release_major_minor_sk                                             AS dim_app_release_major_minor_sk,
      prep_usage_ping_and_license.dim_latest_available_app_release_major_minor_sk                            AS dim_latest_available_app_release_major_minor_sk,
      prep_usage_ping_and_license.license_sha256                                                             AS license_sha256,
      prep_usage_ping_and_license.license_md5                                                                AS license_md5,
      prep_usage_ping_and_license.license_billable_users                                                     AS license_billable_users,
      prep_usage_ping_and_license.instance_user_count                                                        AS instance_user_count,
      dim_installation.installation_creation_date                                                            AS installation_creation_date,
      prep_usage_ping_and_license.historical_max_user_count                                                  AS historical_max_user_count,
      prep_usage_ping_and_license.license_user_count                                                         AS license_user_count,
      prep_usage_ping_and_license.hostname                                                                   AS hostname,
      prep_usage_ping_and_license.umau_value                                                                 AS umau_value,
      prep_usage_ping_and_license.dim_subscription_license_id                                                AS dim_subscription_license_id,
      prep_usage_ping_and_license.is_trial                                                                   AS is_trial,
      prep_usage_ping_and_license.product_tier                                                               AS product_tier,
      prep_usage_ping_and_license.main_edition_product_tier                                                  AS main_edition_product_tier,
      'VERSION_DB'                                                                                           AS data_source
    FROM prep_usage_ping_and_license
    LEFT JOIN prep_subscription
      ON prep_usage_ping_and_license.dim_subscription_id = prep_subscription.dim_subscription_id
    LEFT JOIN dim_crm_account
      ON prep_subscription.dim_crm_account_id = dim_crm_account.dim_crm_account_id
    LEFT JOIN dim_installation
      ON dim_installation.dim_installation_id = prep_usage_ping_and_license.dim_installation_id

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-08'::DATE        AS model_created_date,
      '2023-06-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined_payload1a:T1b5f,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('subscriptions', 'prep_subscription'),
    ('orders', 'customers_db_orders_source'),
    ('product_tiers', 'prep_product_tier'),
    ('product_details', 'dim_product_detail'),
    ('fct_mrr_with_zero_dollar_charges', 'fct_mrr_with_zero_dollar_charges'),
    ('subscription_delivery_types', 'bdg_subscription_product_rate_plan')
]) }}

, trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'Self-Managed - Trial: Ultimate'

), product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')

), sm_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id,
      product_details.product_rate_plan_id,
      product_details.dim_product_tier_id
    FROM fct_mrr_with_zero_dollar_charges
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
      AND product_details.product_deployment_type IN ('Self-Managed', 'Dedicated')
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = {{ get_date_id("DATE_TRUNC('month', CURRENT_DATE)") }}
      AND subscription_status IN ('Active', 'Cancelled')

), subscription_list AS (

    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      COUNT(*) OVER(PARTITION BY subscriptions.dim_subscription_id)     AS count_of_tiers_per_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN sm_subscriptions
      ON subscriptions.dim_subscription_id = sm_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON sm_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON sm_subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), order_list AS (

    SELECT
      orders.order_id,
      orders.customer_id,
      IFNULL(trial_tiers.dim_product_tier_id,
              product_rate_plans.dim_product_tier_id)                   AS dim_product_tier_id_with_trial,
      IFNULL(trial_tiers.product_tier_name,
              product_rate_plans.product_tier_name)                     AS product_tier_name_with_trial, 
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order, 
      orders.subscription_id                                            AS subscription_id_order, 
      orders.subscription_name                                          AS subscription_name_order,
      orders.subscription_name_slugify                                  AS subscription_name_slugify_order,
      orders.order_start_date, 
      orders.order_end_date,
      orders.order_is_trial,
      IFF(IFNULL(orders.order_end_date, CURRENT_DATE) >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders
    INNER JOIN product_rate_plans
      ON orders.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders.order_is_trial = TRUE
    WHERE orders.order_start_date IS NOT NULL 
        
), final AS (

    SELECT
      subscription_list.dim_subscription_id, 
      order_list.order_id, 
      order_list.subscription_id_order,
      order_list.customer_id, 
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order, 
      order_list.is_order_active,
      order_list.order_start_date, 
      order_list.order_end_date, 
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial, 
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      CASE
        WHEN order_list.product_tier_name_with_trial = 'Self-Managed - Trial: Ultimate'
          THEN 'Trial Order' 
        WHEN order_list.order_id IS NOT NULL
          AND order_list.subscription_id_order IS NULL
          THEN 'Order Subscription Not Found'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NOT NULL
          THEN 'Paid All Matching'
      END                                                               AS order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription
              
)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-02-02",
    updated_date="2022-06-22"
) }}1b:T4a3,The purpose of this table to connect Order IDs from Customer DB to Subscription for Self-Managed and SaaS Dedicated purchases. This table expands the functionality of the subscriptions by improving the join to orders. Subscriptions listed in this table are all Self-Managed (determined by the `product_rate_plan_id` from `zuora_rate_plan_source`) and the `is_active_subscription` column can be used to filter to subscription that are currently active (status is Active or Cancelled with a recurring charge in the current month). Orders in this table are all Self-Managed (determined by the `product_rate_plan_id` from `customers_db_orders_source`) and the `is_active_order` column can be used to filter to orders that are currently active (`order_end_date` is NULL or greater than the date that this table was refreshed).

The tier(s) connected to the subscription are determined using the underlying Zuora recurring charges. This view uses a `FULL OUTER JOIN` to show all three parts of the Venn diagram (orders, subscriptions, and the overlap between the two).In doing so exceptions are noted within `order_subscription_match_status` to identify rows that do not match between systems.1c:T1d06,



WITH subscriptions AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), orders AS (

    SELECT * 
    FROM "PREP".customers.customers_db_orders_source

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), product_details AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), fct_mrr_with_zero_dollar_charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr_all

), subscription_delivery_types AS (

    SELECT * 
    FROM "PROD".common.bdg_subscription_product_rate_plan

)

, trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'Self-Managed - Trial: Ultimate'

), product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')

), sm_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type IN ('Self-Managed', 'Dedicated')

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id,
      product_details.product_rate_plan_id,
      product_details.dim_product_tier_id
    FROM fct_mrr_with_zero_dollar_charges
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
      AND product_details.product_deployment_type IN ('Self-Managed', 'Dedicated')
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = 

  TO_NUMBER(TO_CHAR(DATE_TRUNC('month', CURRENT_DATE)::DATE,'YYYYMMDD'),'99999999')


      AND subscription_status IN ('Active', 'Cancelled')

), subscription_list AS (

    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      COUNT(*) OVER(PARTITION BY subscriptions.dim_subscription_id)     AS count_of_tiers_per_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN sm_subscriptions
      ON subscriptions.dim_subscription_id = sm_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON sm_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON sm_subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), order_list AS (

    SELECT
      orders.order_id,
      orders.customer_id,
      IFNULL(trial_tiers.dim_product_tier_id,
              product_rate_plans.dim_product_tier_id)                   AS dim_product_tier_id_with_trial,
      IFNULL(trial_tiers.product_tier_name,
              product_rate_plans.product_tier_name)                     AS product_tier_name_with_trial, 
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order, 
      orders.subscription_id                                            AS subscription_id_order, 
      orders.subscription_name                                          AS subscription_name_order,
      orders.subscription_name_slugify                                  AS subscription_name_slugify_order,
      orders.order_start_date, 
      orders.order_end_date,
      orders.order_is_trial,
      IFF(IFNULL(orders.order_end_date, CURRENT_DATE) >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders
    INNER JOIN product_rate_plans
      ON orders.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders.order_is_trial = TRUE
    WHERE orders.order_start_date IS NOT NULL 
        
), final AS (

    SELECT
      subscription_list.dim_subscription_id, 
      order_list.order_id, 
      order_list.subscription_id_order,
      order_list.customer_id, 
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order, 
      order_list.is_order_active,
      order_list.order_start_date, 
      order_list.order_end_date, 
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial, 
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      CASE
        WHEN order_list.product_tier_name_with_trial = 'Self-Managed - Trial: Ultimate'
          THEN 'Trial Order' 
        WHEN order_list.order_id IS NOT NULL
          AND order_list.subscription_id_order IS NULL
          THEN 'Order Subscription Not Found'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NOT NULL
          THEN 'Paid All Matching'
      END                                                               AS order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription
              
)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-02-02'::DATE        AS model_created_date,
      '2022-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1d:Ta199,WITH zuora_account_source AS (
  
    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = 'FALSE'
      AND batch != 'Batch20'
  
), sfdc_opportunity_source AS (
  
    SELECT *
    FROM {{ ref('sfdc_opportunity_source') }}
    WHERE is_deleted = 'FALSE'
      AND stage_name != '10-Duplicate'
  
 ), zuora_subscription_source AS (

    SELECT 
      prep_subscription.*
    FROM {{ ref('prep_subscription') }}
    INNER JOIN zuora_account_source
      ON prep_subscription.dim_billing_account_id = zuora_account_source.account_id
  
), subscription_opps AS (

    SELECT DISTINCT
      dim_subscription_id       AS subscription_id, 
      dim_crm_opportunity_id    AS opportunity_id
    FROM zuora_subscription_source
    WHERE opportunity_id IS NOT NULL
      AND (subscription_created_date >= '2021-04-12'
        OR subscription_sales_type = 'Self-Service')
       
), zuora_rate_plan_source AS (
  
    SELECT *
    FROM  {{ ref('zuora_rate_plan_source') }}
    WHERE is_deleted = 'FALSE'
  
), zuora_rate_plan_charge_source AS (
  
    SELECT 
      zuora_rate_plan_charge_source.*,
      zuora_rate_plan_source.subscription_id
    FROM  {{ ref('zuora_rate_plan_charge_source') }}
    LEFT JOIN zuora_rate_plan_source
      ON zuora_rate_plan_charge_source.rate_plan_id = zuora_rate_plan_source.rate_plan_id
    WHERE zuora_rate_plan_charge_source.is_deleted = 'FALSE'
  
), prep_crm_account AS (
  
    SELECT *
    FROM {{ ref('prep_crm_account') }}
    WHERE is_deleted = 'FALSE'

), zuora_invoice_item_source AS (

    SELECT *
    FROM {{ ref('zuora_invoice_item_source') }}
    WHERE is_deleted = 'FALSE'

), zuora_invoice_source AS (
  
    SELECT *
    FROM {{ ref('zuora_invoice_source') }}
    WHERE is_deleted = 'FALSE'
  
), sfdc_zqu_quote_source AS (

    SELECT *
    FROM {{ ref('sfdc_zqu_quote_source') }}
    WHERE is_deleted = 'FALSE'
      AND sfdc_zqu_quote_source.zqu__primary = 'TRUE'
  
), quote_opps AS (

    SELECT DISTINCT
      sfdc_zqu_quote_source.zqu__zuora_subscription_id  AS subscription_id, 
      sfdc_zqu_quote_source.zqu__opportunity            AS opportunity_id,
      sfdc_opportunity_source.account_id                AS quote_opp_account_id,
      sfdc_opportunity_source.created_date              AS quote_opp_created_date,
      sfdc_opportunity_source.amount                    AS quote_opp_total_contract_value
    FROM sfdc_zqu_quote_source
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id
    WHERE sfdc_zqu_quote_source.zqu__opportunity IS NOT NULL
      AND sfdc_zqu_quote_source.zqu__zuora_subscription_id IS NOT NULL

), invoice_opps AS (

    SELECT DISTINCT
      zuora_invoice_item_source.subscription_id,
      zuora_invoice_source.invoice_number,
      SUM(zuora_invoice_item_source.charge_amount)           AS invoice_item_charge_amount,
      SUM(zuora_invoice_item_source.quantity)                AS invoice_item_quantity,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id                     AS invoice_opp_account_id,
      sfdc_opportunity_source.created_date                   AS invoice_opp_created_date,
      sfdc_opportunity_source.amount                         AS invoice_opp_total_contract_value
    FROM zuora_invoice_item_source
    LEFT JOIN zuora_invoice_source
      ON zuora_invoice_item_source.invoice_id = zuora_invoice_source.invoice_id
    INNER JOIN sfdc_opportunity_source
      ON zuora_invoice_source.invoice_number = sfdc_opportunity_source.invoice_number
    WHERE zuora_invoice_source.status = 'Posted'
      AND zuora_invoice_source.invoice_number IS NOT NULL
      AND sfdc_opportunity_source.opportunity_id IS NOT NULL
    GROUP BY 1,2,5,6,7,8

), subscription_quote_number_opps AS (

    SELECT 
      zuora.subscription_id,
      zuora.sfdc_opportunity_id,
      zuora.crm_opportunity_name,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id            AS subscription_quote_number_opp_account_id,
      sfdc_opportunity_source.created_date          AS subscription_quote_number_opp_created_date,
      sfdc_opportunity_source.amount                AS subscription_quote_number_opp_total_contract_value
    FROM {{ ref('zuora_subscription_source') }} zuora
    LEFT JOIN sfdc_zqu_quote_source
      ON zuora.quote_number = sfdc_zqu_quote_source.zqu__number
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id

), final AS (

    SELECT DISTINCT
      zuora_subscription_source.dim_subscription_id                                                                                                                                                                                                                                                                                                                                     AS dim_subscription_id,
      zuora_subscription_source.dim_billing_account_id                                                                                                                                                                                                                                                                                                                                  AS dim_billing_account_id,
      zuora_subscription_source.subscription_name                                                                                                                                                                                                                                                                                                                                       AS subscription_name,
      zuora_subscription_source.subscription_sales_type                                                                                                                                                                                                                                                                                                                          AS subscription_sales_type,
      zuora_subscription_source.dim_crm_account_id                                                                                                                                                                                                                                                                                                                                      AS subscription_account_id,
      prep_crm_account.dim_parent_crm_account_id                                                                                                                                                                                                                                                                                                                                        AS subscription_parent_account_id,
      COALESCE(invoice_opps.invoice_opp_account_id, LAG(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                 AS invoice_opp_account_id_forward,
      COALESCE(invoice_opps.invoice_opp_account_id, LEAD(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                AS invoice_opp_account_id_backward,
      COALESCE(quote_opps.quote_opp_account_id, LAG(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                         AS quote_opp_account_id_forward,
      COALESCE(quote_opps.quote_opp_account_id, LEAD(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                        AS quote_opp_account_id_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LAG(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                         AS subscription_opp_name_opp_account_id_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                        AS subscription_opp_name_opp_account_id_backward,
      zuora_subscription_source.subscription_version                                                                                                                                                                                                                                                                                                                                    AS subscription_version,
      zuora_subscription_source.term_start_date                                                                                                                                                                                                                                                                                                                                         AS term_start_date,
      zuora_subscription_source.term_end_date                                                                                                                                                                                                                                                                                                                                           AS term_end_date,
      zuora_subscription_source.subscription_start_date                                                                                                                                                                                                                                                                                                                                 AS subscription_start_date,
      zuora_subscription_source.subscription_end_date                                                                                                                                                                                                                                                                                                                                   AS subscription_end_date,
      zuora_subscription_source.subscription_status                                                                                                                                                                                                                                                                                                                                     AS subscription_status,
      zuora_subscription_source.subscription_created_date                                                                                                                                                                                                                                                                                                                               AS subscription_created_date, 
      zuora_subscription_source.dim_crm_opportunity_id                                                                                                                                                                                                                                                                                                                                  AS subscription_source_opp_id,
      subscription_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                  AS subscription_opp_id,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                 AS invoice_opp_id_forward,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                AS invoice_opp_id_backward,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                  AS invoice_opp_id_forward_term_based,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                 AS invoice_opp_id_backward_term_based,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                      AS invoice_opp_id_forward_sub_name,
      invoice_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                       AS unfilled_invoice_opp_id,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                     AS quote_opp_id_forward,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                    AS quote_opp_id_backward,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                      AS quote_opp_id_forward_term_based,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_id_backward_term_based,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                          AS quote_opp_id_forward_sub_name,
      quote_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                         AS unfilled_quote_opp_id,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS subscription_quote_number_opp_id_forward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS subscription_quote_number_opp_id_backward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                              AS subscription_quote_number_opp_id_forward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                             AS subscription_quote_number_opp_id_backward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                  AS subscription_quote_number_opp_id_forward_sub_name,
      subscription_quote_number_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                     AS unfilled_subscription_quote_number_opp_id,
      CASE
        WHEN zuora_subscription_source.subscription_sales_type = 'Sales-Assisted' 
          THEN COALESCE(subscription_opp_id, 
                        subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward,  
                        invoice_opp_id_forward, invoice_opp_id_backward,
                        quote_opp_id_forward, quote_opp_id_backward,
                        subscription_quote_number_opp_id_backward_term_based,
                        invoice_opp_id_backward_term_based,invoice_opp_id_forward_term_based,
                        quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                        subscription_quote_number_opp_id_forward_sub_name, invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                       ) -- prefer quote number on subscription if sales-assisted
        ELSE COALESCE(subscription_opp_id, 
                      invoice_opp_id_forward, invoice_opp_id_backward, 
                      quote_opp_id_forward, quote_opp_id_backward, 
                      invoice_opp_id_backward_term_based, invoice_opp_id_forward_term_based,
                      quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                      invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                     ) -- don't take quote_number on subscription for self-service
      END                                                                                                                                                                                                                                                                                                                                                                               AS combined_opportunity_id,
      COALESCE(invoice_opps.invoice_opp_created_date, LEAD(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                            AS invoice_opp_created_date_forward,
      COALESCE(invoice_opps.invoice_opp_created_date, LAG(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                             AS invoice_opp_created_date_backward,
      COALESCE(quote_opps.quote_opp_created_date, LEAD(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                    AS quote_opp_created_date_forward,
      COALESCE(quote_opps.quote_opp_created_date, LAG(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                     AS quote_opp_created_date_backward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LEAD(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS invoice_opp_total_contract_value_forward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LAG(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS invoice_opp_total_contract_value_backward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LEAD(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                    AS quote_opp_total_contract_value_forward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LAG(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_total_contract_value_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))    AS subscription_quote_number_opp_total_contract_value_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LAG(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))     AS subscription_quote_number_opp_total_contract_value_backward,
      invoice_opps.invoice_number                                                                                                                                                                                                                                                                                                                                                       AS invoice_number,
      invoice_opps.invoice_item_charge_amount                                                                                                                                                                                                                                                                                                                                           AS invoice_item_charge_amount,
      invoice_opps.invoice_item_quantity                                                                                                                                                                                                                                                                                                                                                AS invoice_item_quantity
    FROM zuora_subscription_source
    LEFT JOIN subscription_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_opps.subscription_id
    LEFT JOIN invoice_opps
      ON zuora_subscription_source.dim_subscription_id = invoice_opps.subscription_id
    LEFT JOIN quote_opps
      ON zuora_subscription_source.dim_subscription_id = quote_opps.subscription_id
    LEFT JOIN subscription_quote_number_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_quote_number_opps.subscription_id
    LEFT JOIN prep_crm_account
      ON zuora_subscription_source.dim_crm_account_id = prep_crm_account.dim_crm_account_id

), final_subs_opps AS (

    SELECT
      final.*
    FROM final
    INNER JOIN zuora_account_source
      ON final.dim_billing_account_id = zuora_account_source.account_id
    WHERE subscription_created_date >= '2019-02-01'
  
), complete_subs AS (
  
    SELECT
      subscription_name,
      COUNT_IF(combined_opportunity_id IS NOT NULL)                         AS other_count_test,
      SUM(CASE WHEN combined_opportunity_id IS NOT NULL THEN 1 ELSE 0 END)  AS count_test,
      COUNT(dim_subscription_id)                                            AS sub_count
    FROM final_subs_opps
    GROUP BY 1
  
), non_duplicates AS ( -- All subscription_ids that do not have multiple opportunities associated with them
  
    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id NOT IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 
    
), dupes AS ( -- GET ALL SUBSCRIPTION_IDS WITH MULTIPLE OPPORTUNITY_IDS, DUPLICATES (6,620) (4,600 -- with stage_name != '10-duplicate')

    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 

),invoice_item_amount AS (
  
    SELECT 
      dim_invoice_id, 
      invoice_number, 
      dim_subscription_id, 
      SUM(invoice_item_charge_amount) AS invoice_item_charge_amount, 
      AVG(quantity) AS quantity
    FROM {{ ref('fct_invoice_item') }}
    {{ dbt_utils.group_by(n=3) }}

), multiple_opps_on_one_invoice AS (

    SELECT DISTINCT
      ii.dim_subscription_id,
      dupes.subscription_name,
      dupes.subscription_version,
      ii.dim_invoice_id, 
      ii.invoice_number,
      ii.quantity,
      to_varchar(quantity, '999,999,999,999')   AS formatted_quantity,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            opp.opportunity_name
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS opp_name_slugify,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            formatted_quantity
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS formatted_quantity_slugify,
      opp.dim_crm_opportunity_id,
      opp.opportunity_name, 
      fct_opp.amount                                                                                                    AS opportunity_amount, 
      ii.invoice_item_charge_amount, 
      IFF(ROUND(opportunity_amount,2) = ROUND(ii.invoice_item_charge_amount,2),5,0)                                     AS opp_invoice_amount_match, 
      IFF(CONTAINS(opp_name_slugify, formatted_quantity_slugify),5,0)                                                   AS slugify_quantity_name_match,
      IFF(CONTAINS(opportunity_name, formatted_quantity),1,0)                                                           AS formatted_quantity_name_match,  
      opp_invoice_amount_match + slugify_quantity_name_match + formatted_quantity_name_match AS total
    FROM dupes
    INNER JOIN invoice_item_amount ii
      ON dupes.dim_subscription_id = ii.dim_subscription_id
        AND dupes.invoice_number = ii.invoice_number
    INNER JOIN {{ ref('dim_crm_opportunity') }} AS opp
      ON ii.invoice_number = opp.invoice_number
    INNER JOIN {{ ref('fct_crm_opportunity') }} AS fct_opp
      ON opp.dim_crm_opportunity_id = fct_opp.dim_crm_opportunity_id
    WHERE opp.stage_name <> '10-Duplicate'

), multiple_opps_on_one_invoice_matches AS (
  
    SELECT *
    FROM multiple_opps_on_one_invoice
    QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_subscription_id ORDER BY total DESC) = 1

), dupes_with_amount_matches AS (

    SELECT dupes.*
    FROM dupes
    INNER JOIN multiple_opps_on_one_invoice_matches 
      ON dupes.dim_subscription_id = multiple_opps_on_one_invoice_matches.dim_subscription_id
        AND dupes.unfilled_invoice_opp_id = multiple_opps_on_one_invoice_matches.dim_crm_opportunity_id
    WHERE total > 0

), dupes_without_amount_matches AS (

    SELECT *
    FROM dupes 
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM dupes_with_amount_matches) -- 460 non-distinct, 200 distinct
  
), multi_invoice_subs_with_opp_amounts AS (

    SELECT
       dim_subscription_id,
       ROUND(AVG(invoice_item_charge_amount),4)                                                  AS invoice_amount, 
       ROUND(SUM(invoice_opp_total_contract_value_forward),4)                                    AS invoice_opp_amount_forward, 
       ROUND(SUM(invoice_opp_total_contract_value_backward),4)                                   AS invoice_opp_amount_backward,
       ROUND(AVG(quote_opp_total_contract_value_forward),4)                                      AS quote_opp_amount_forward,
       ROUND(AVG(quote_opp_total_contract_value_backward),4)                                     AS quote_opp_amount_backward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_forward),4)                  AS subscription_quote_number_opp_amount_forward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_backward),4)                 AS subscription_quote_number_opp_amount_backward
    FROM dupes_without_amount_matches
    GROUP BY 1
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total AS (
   
    SELECT *
    FROM multi_invoice_subs_with_opp_amounts
    WHERE invoice_amount = invoice_opp_amount_forward
      OR invoice_amount = invoice_opp_amount_backward
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp AS (
  
    SELECT *
    FROM dupes
    WHERE dim_subscription_id IN (SELECT DISTINCT dim_subscription_id FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total)
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_created_date_forward) = 1
  
), final_matches_part_1 AS (
  
    SELECT *, 'non-duplicates' AS source
    FROM non_duplicates
    
    UNION 
  
    -- for invoices that have multiple subscriptions on the invoice, take the subscription-opportunity mapping where the invoice amount = opportunity amount 
    SELECT *, 'invoice amount matches opp amount' AS source
    FROM dupes_with_amount_matches
  
    UNION
    
    -- for subscriptions spread across multiple invoices where the opp totals match the total across the invoices, take the first opportunity based on the opportunity created date
    SELECT *, 'multi-invoice single sub' AS source
    FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp

), dupes_part_2 AS ( -- the fixes applied to these duplicates are not as strong, so we are peeling them out and applying different solutions

    SELECT *
    FROM dupes
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM final_matches_part_1)
  
), self_service_dupes_with_subscription_opp AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Self-Service'
      AND subscription_opp_id IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1

), sales_assisted_dupes_with_quote_num_on_sub AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Sales-Assisted'
      AND COALESCE(subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward, subscription_quote_number_opp_id_backward_term_based) IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1
  
), dupes_all_raw_sub_options_match AS (
  
    SELECT *
    FROM dupes_part_2
    WHERE unfilled_invoice_opp_id = unfilled_quote_opp_id
      AND unfilled_quote_opp_id = unfilled_subscription_quote_number_opp_id
      AND dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM self_service_dupes_with_subscription_opp
                                     UNION
                                     SELECT DISTINCT dim_subscription_id FROM sales_assisted_dupes_with_quote_num_on_sub)

 ), final_matches AS (
   
    SELECT *
    FROM final_matches_part_1
    UNION
  
    -- for self-service dupes, take the most reliable connection (opportunity id on subscription)
    SELECT *, 'self-service' AS source
    FROM self_service_dupes_with_subscription_opp
  
    UNION
   
    -- for sales_assisted dupes, take the most reliable connection (quote number on subscription)
    SELECT *, 'sales-assisted' AS source
    FROM sales_assisted_dupes_with_quote_num_on_sub  
  
    UNION
  
    -- for all dupes, take the subscription-opportunity options where the raw fields (opp on subscription, opp on invoice, and opp on quote number from subscription) match
    SELECT *, 'all matching opps' AS source
    FROM dupes_all_raw_sub_options_match

), final_matches_with_bad_data_flag AS (

    SELECT 
      final_matches.*,
      IFF(len(SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))=0, NULL, SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))    AS opp_id_remove_salesforce_url,
      {{zuora_slugify("combined_opportunity_id") }}                                                                                                                             AS opp_id_slugify,
      opp_name.opportunity_id                                                                                                                                                   AS opp_id_name,
      COALESCE(opp_id_remove_salesforce_url, opp_id_name, IFF(combined_opportunity_id NOT LIKE '0%', opp_id_slugify, combined_opportunity_id))                                  AS combined_oportunity_id_coalesced,
      CASE 
        WHEN subscription_opp_id IS NULL
          AND invoice_opp_id_forward IS NULL
            AND invoice_opp_id_backward IS NULL
              AND invoice_opp_id_forward_term_based IS NULL
                AND invoice_opp_id_backward_term_based IS NULL
                  AND unfilled_invoice_opp_id IS NULL
                    AND quote_opp_id_forward IS NULL
                      AND quote_opp_id_backward IS NULL
                        AND quote_opp_id_forward_term_based IS NULL
                          AND quote_opp_id_backward_term_based IS NULL
                            AND unfilled_quote_opp_id IS NULL
                              AND subscription_quote_number_opp_id_forward IS NULL
                                AND subscription_quote_number_opp_id_backward IS NULL
                                  AND subscription_quote_number_opp_id_forward_term_based IS NULL
                                    AND subscription_quote_number_opp_id_backward_term_based IS NULL
                                      AND subscription_quote_number_opp_id_forward_sub_name IS NULL
                                        AND unfilled_subscription_quote_number_opp_id IS NULL
                                          AND ( invoice_opp_id_forward_sub_name IS NOT NULL
                                                OR subscription_quote_number_opp_id_forward_sub_name IS NOT NULL
                                                OR quote_opp_id_forward_sub_name IS NOT NULL
                                              )
          THEN 1
        ELSE 0
      END                                                                                                           AS is_questionable_opportunity_mapping
    FROM final_matches
    LEFT JOIN {{ ref('sfdc_opportunity_source') }} opp_name
      ON {{ zuora_slugify("final_matches.combined_opportunity_id") }}  = {{ zuora_slugify("opp_name.opportunity_name") }}

), short_oppty_id AS (

SELECT
  opportunity_id              AS long_oppty_id,
  LEFT(opportunity_id,15)     AS short_oppty_id
FROM  {{ ref('sfdc_opportunity_source') }}

), final_matches_with_long_oppty_id AS (

SELECT 
  final_matches_with_bad_data_flag.*,
  short_oppty_id.long_oppty_id        AS dim_crm_opportunity_id
FROM final_matches_with_bad_data_flag
LEFT JOIN short_oppty_id
  ON LEFT(final_matches_with_bad_data_flag.combined_oportunity_id_coalesced,15) = short_oppty_id.short_oppty_id
  
)

{{ dbt_audit(
    cte_ref="final_matches_with_long_oppty_id",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2021-11-10",
    updated_date="2022-01-19"
) }}1e:Tcad,Prep table for the mapping table for subscriptions to opportunities. This incorporates logic from previous processes which includes taking opportunity-subscription connections from quotes, invoices, and the subscription object itself. Based on the created date, term dates, or subscription name, we fill in missing opportunity ids.

 The process is described in this [flow diagram](https://lucid.app/lucidchart/e7661694-61ed-4317-b648-d054be9aff0e/edit?viewport_loc=-76%2C296%2C3590%2C1856%2C0_0&invitationId=inv_f50ea2e1-1ea8-47ca-b950-75b723273b00)

 The final result yields the distinct combination of subscriptions and opportunities with the best match based on the rules defined in the flow diagram.

 For self-service subscriptions:
 - Take the opportunity_id from the subscription object
 - Using the quote_number from the subscription's invoice, get the opportunity_id from the opportunity which has that quote_number on it.
 - Out of all quotes, take any opportunity_id where the quote has the subscription_id on it.
 - Fill forward/backwards when the subscription created dates are the same.
 - Fill forward/backwards when the subscription term dates are the same.
 - Fill forward when the subscription name is the same.

 For sales-assisted subscriptions:
 - Take the opportunity_id from the subscription object if it was created after 2021-04-11. This is when automation was set up to reliably relate subscriptions and opportunities.
 - Using the quote_number from the subscription object, get the opportunity_id from the opportunity which has that quote_number on it.
 - Using the quote_number from the subscription's invoice, get the opportunity_id from the opportunity which has that quote_number on it.
 - Out of all quotes, take any opportunity_id where the quote has the subscription_id on it.
 - Fill forward/backwards when the subscription created dates are the same.
 - Fill forward/backwards when the subscription term dates are the same.
 - Fill forward when the subscription name is the same.

 In both cases there where multiple opportunities are assigned to a single subscription. This can be caused by a variety of reasons, and we apply the following logic to all subscriptions to determine which opportunity is the best match:
 - Select the opportunity whith the amount that matches the amount on the subscription's invoice. This is the best solution for when a subscription is one of many on an invoice, and we need to match up each subscription with the appropriate opportunity.
 - Select the opportunity created first if all of the possible opportunities' amounts sums to the amount on the subscription's invoices. This is the best solution for when a subscription is billed on multiple invoices and new opportunity is created for each invoice. Ex. Ramp deals
 - If the subscription is self-service and has an opportunity_id on the subscription object, take the opportunity_id from the subscription object.
 - If the subscription is sales_assisted and there is a quote_number on the subscription, take the opportunity_id from the opportunity associated with this quote_number.
 - If all of the methods for finding an opportunity-subscription mapping match for one record, select this subscription-opportunity pair.1f:Ta5ca,WITH zuora_account_source AS (
  
    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = 'FALSE'
      AND batch != 'Batch20'
  
), sfdc_opportunity_source AS (
  
    SELECT *
    FROM "PREP".sfdc.sfdc_opportunity_source
    WHERE is_deleted = 'FALSE'
      AND stage_name != '10-Duplicate'
  
 ), zuora_subscription_source AS (

    SELECT 
      prep_subscription.*
    FROM "PROD".common_prep.prep_subscription
    INNER JOIN zuora_account_source
      ON prep_subscription.dim_billing_account_id = zuora_account_source.account_id
  
), subscription_opps AS (

    SELECT DISTINCT
      dim_subscription_id       AS subscription_id, 
      dim_crm_opportunity_id    AS opportunity_id
    FROM zuora_subscription_source
    WHERE opportunity_id IS NOT NULL
      AND (subscription_created_date >= '2021-04-12'
        OR subscription_sales_type = 'Self-Service')
       
), zuora_rate_plan_source AS (
  
    SELECT *
    FROM  "PREP".zuora.zuora_rate_plan_source
    WHERE is_deleted = 'FALSE'
  
), zuora_rate_plan_charge_source AS (
  
    SELECT 
      zuora_rate_plan_charge_source.*,
      zuora_rate_plan_source.subscription_id
    FROM  "PREP".zuora.zuora_rate_plan_charge_source
    LEFT JOIN zuora_rate_plan_source
      ON zuora_rate_plan_charge_source.rate_plan_id = zuora_rate_plan_source.rate_plan_id
    WHERE zuora_rate_plan_charge_source.is_deleted = 'FALSE'
  
), prep_crm_account AS (
  
    SELECT *
    FROM "PROD".restricted_safe_common_prep.prep_crm_account
    WHERE is_deleted = 'FALSE'

), zuora_invoice_item_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_invoice_item_source
    WHERE is_deleted = 'FALSE'

), zuora_invoice_source AS (
  
    SELECT *
    FROM "PREP".zuora.zuora_invoice_source
    WHERE is_deleted = 'FALSE'
  
), sfdc_zqu_quote_source AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_zqu_quote_source
    WHERE is_deleted = 'FALSE'
      AND sfdc_zqu_quote_source.zqu__primary = 'TRUE'
  
), quote_opps AS (

    SELECT DISTINCT
      sfdc_zqu_quote_source.zqu__zuora_subscription_id  AS subscription_id, 
      sfdc_zqu_quote_source.zqu__opportunity            AS opportunity_id,
      sfdc_opportunity_source.account_id                AS quote_opp_account_id,
      sfdc_opportunity_source.created_date              AS quote_opp_created_date,
      sfdc_opportunity_source.amount                    AS quote_opp_total_contract_value
    FROM sfdc_zqu_quote_source
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id
    WHERE sfdc_zqu_quote_source.zqu__opportunity IS NOT NULL
      AND sfdc_zqu_quote_source.zqu__zuora_subscription_id IS NOT NULL

), invoice_opps AS (

    SELECT DISTINCT
      zuora_invoice_item_source.subscription_id,
      zuora_invoice_source.invoice_number,
      SUM(zuora_invoice_item_source.charge_amount)           AS invoice_item_charge_amount,
      SUM(zuora_invoice_item_source.quantity)                AS invoice_item_quantity,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id                     AS invoice_opp_account_id,
      sfdc_opportunity_source.created_date                   AS invoice_opp_created_date,
      sfdc_opportunity_source.amount                         AS invoice_opp_total_contract_value
    FROM zuora_invoice_item_source
    LEFT JOIN zuora_invoice_source
      ON zuora_invoice_item_source.invoice_id = zuora_invoice_source.invoice_id
    INNER JOIN sfdc_opportunity_source
      ON zuora_invoice_source.invoice_number = sfdc_opportunity_source.invoice_number
    WHERE zuora_invoice_source.status = 'Posted'
      AND zuora_invoice_source.invoice_number IS NOT NULL
      AND sfdc_opportunity_source.opportunity_id IS NOT NULL
    GROUP BY 1,2,5,6,7,8

), subscription_quote_number_opps AS (

    SELECT 
      zuora.subscription_id,
      zuora.sfdc_opportunity_id,
      zuora.crm_opportunity_name,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id            AS subscription_quote_number_opp_account_id,
      sfdc_opportunity_source.created_date          AS subscription_quote_number_opp_created_date,
      sfdc_opportunity_source.amount                AS subscription_quote_number_opp_total_contract_value
    FROM "PREP".zuora.zuora_subscription_source zuora
    LEFT JOIN sfdc_zqu_quote_source
      ON zuora.quote_number = sfdc_zqu_quote_source.zqu__number
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id

), final AS (

    SELECT DISTINCT
      zuora_subscription_source.dim_subscription_id                                                                                                                                                                                                                                                                                                                                     AS dim_subscription_id,
      zuora_subscription_source.dim_billing_account_id                                                                                                                                                                                                                                                                                                                                  AS dim_billing_account_id,
      zuora_subscription_source.subscription_name                                                                                                                                                                                                                                                                                                                                       AS subscription_name,
      zuora_subscription_source.subscription_sales_type                                                                                                                                                                                                                                                                                                                          AS subscription_sales_type,
      zuora_subscription_source.dim_crm_account_id                                                                                                                                                                                                                                                                                                                                      AS subscription_account_id,
      prep_crm_account.dim_parent_crm_account_id                                                                                                                                                                                                                                                                                                                                        AS subscription_parent_account_id,
      COALESCE(invoice_opps.invoice_opp_account_id, LAG(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                 AS invoice_opp_account_id_forward,
      COALESCE(invoice_opps.invoice_opp_account_id, LEAD(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                AS invoice_opp_account_id_backward,
      COALESCE(quote_opps.quote_opp_account_id, LAG(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                         AS quote_opp_account_id_forward,
      COALESCE(quote_opps.quote_opp_account_id, LEAD(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                        AS quote_opp_account_id_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LAG(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                         AS subscription_opp_name_opp_account_id_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                        AS subscription_opp_name_opp_account_id_backward,
      zuora_subscription_source.subscription_version                                                                                                                                                                                                                                                                                                                                    AS subscription_version,
      zuora_subscription_source.term_start_date                                                                                                                                                                                                                                                                                                                                         AS term_start_date,
      zuora_subscription_source.term_end_date                                                                                                                                                                                                                                                                                                                                           AS term_end_date,
      zuora_subscription_source.subscription_start_date                                                                                                                                                                                                                                                                                                                                 AS subscription_start_date,
      zuora_subscription_source.subscription_end_date                                                                                                                                                                                                                                                                                                                                   AS subscription_end_date,
      zuora_subscription_source.subscription_status                                                                                                                                                                                                                                                                                                                                     AS subscription_status,
      zuora_subscription_source.subscription_created_date                                                                                                                                                                                                                                                                                                                               AS subscription_created_date, 
      zuora_subscription_source.dim_crm_opportunity_id                                                                                                                                                                                                                                                                                                                                  AS subscription_source_opp_id,
      subscription_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                  AS subscription_opp_id,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                 AS invoice_opp_id_forward,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                AS invoice_opp_id_backward,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                  AS invoice_opp_id_forward_term_based,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                 AS invoice_opp_id_backward_term_based,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                      AS invoice_opp_id_forward_sub_name,
      invoice_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                       AS unfilled_invoice_opp_id,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                     AS quote_opp_id_forward,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                    AS quote_opp_id_backward,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                      AS quote_opp_id_forward_term_based,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_id_backward_term_based,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                          AS quote_opp_id_forward_sub_name,
      quote_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                         AS unfilled_quote_opp_id,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS subscription_quote_number_opp_id_forward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS subscription_quote_number_opp_id_backward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                              AS subscription_quote_number_opp_id_forward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                             AS subscription_quote_number_opp_id_backward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                  AS subscription_quote_number_opp_id_forward_sub_name,
      subscription_quote_number_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                     AS unfilled_subscription_quote_number_opp_id,
      CASE
        WHEN zuora_subscription_source.subscription_sales_type = 'Sales-Assisted' 
          THEN COALESCE(subscription_opp_id, 
                        subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward,  
                        invoice_opp_id_forward, invoice_opp_id_backward,
                        quote_opp_id_forward, quote_opp_id_backward,
                        subscription_quote_number_opp_id_backward_term_based,
                        invoice_opp_id_backward_term_based,invoice_opp_id_forward_term_based,
                        quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                        subscription_quote_number_opp_id_forward_sub_name, invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                       ) -- prefer quote number on subscription if sales-assisted
        ELSE COALESCE(subscription_opp_id, 
                      invoice_opp_id_forward, invoice_opp_id_backward, 
                      quote_opp_id_forward, quote_opp_id_backward, 
                      invoice_opp_id_backward_term_based, invoice_opp_id_forward_term_based,
                      quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                      invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                     ) -- don't take quote_number on subscription for self-service
      END                                                                                                                                                                                                                                                                                                                                                                               AS combined_opportunity_id,
      COALESCE(invoice_opps.invoice_opp_created_date, LEAD(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                            AS invoice_opp_created_date_forward,
      COALESCE(invoice_opps.invoice_opp_created_date, LAG(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                             AS invoice_opp_created_date_backward,
      COALESCE(quote_opps.quote_opp_created_date, LEAD(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                    AS quote_opp_created_date_forward,
      COALESCE(quote_opps.quote_opp_created_date, LAG(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                     AS quote_opp_created_date_backward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LEAD(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS invoice_opp_total_contract_value_forward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LAG(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS invoice_opp_total_contract_value_backward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LEAD(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                    AS quote_opp_total_contract_value_forward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LAG(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_total_contract_value_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))    AS subscription_quote_number_opp_total_contract_value_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LAG(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))     AS subscription_quote_number_opp_total_contract_value_backward,
      invoice_opps.invoice_number                                                                                                                                                                                                                                                                                                                                                       AS invoice_number,
      invoice_opps.invoice_item_charge_amount                                                                                                                                                                                                                                                                                                                                           AS invoice_item_charge_amount,
      invoice_opps.invoice_item_quantity                                                                                                                                                                                                                                                                                                                                                AS invoice_item_quantity
    FROM zuora_subscription_source
    LEFT JOIN subscription_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_opps.subscription_id
    LEFT JOIN invoice_opps
      ON zuora_subscription_source.dim_subscription_id = invoice_opps.subscription_id
    LEFT JOIN quote_opps
      ON zuora_subscription_source.dim_subscription_id = quote_opps.subscription_id
    LEFT JOIN subscription_quote_number_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_quote_number_opps.subscription_id
    LEFT JOIN prep_crm_account
      ON zuora_subscription_source.dim_crm_account_id = prep_crm_account.dim_crm_account_id

), final_subs_opps AS (

    SELECT
      final.*
    FROM final
    INNER JOIN zuora_account_source
      ON final.dim_billing_account_id = zuora_account_source.account_id
    WHERE subscription_created_date >= '2019-02-01'
  
), complete_subs AS (
  
    SELECT
      subscription_name,
      COUNT_IF(combined_opportunity_id IS NOT NULL)                         AS other_count_test,
      SUM(CASE WHEN combined_opportunity_id IS NOT NULL THEN 1 ELSE 0 END)  AS count_test,
      COUNT(dim_subscription_id)                                            AS sub_count
    FROM final_subs_opps
    GROUP BY 1
  
), non_duplicates AS ( -- All subscription_ids that do not have multiple opportunities associated with them
  
    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id NOT IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 
    
), dupes AS ( -- GET ALL SUBSCRIPTION_IDS WITH MULTIPLE OPPORTUNITY_IDS, DUPLICATES (6,620) (4,600 -- with stage_name != '10-duplicate')

    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 

),invoice_item_amount AS (
  
    SELECT 
      dim_invoice_id, 
      invoice_number, 
      dim_subscription_id, 
      SUM(invoice_item_charge_amount) AS invoice_item_charge_amount, 
      AVG(quantity) AS quantity
    FROM "PROD".restricted_safe_common.fct_invoice_item
    group by 1,2,3

), multiple_opps_on_one_invoice AS (

    SELECT DISTINCT
      ii.dim_subscription_id,
      dupes.subscription_name,
      dupes.subscription_version,
      ii.dim_invoice_id, 
      ii.invoice_number,
      ii.quantity,
      to_varchar(quantity, '999,999,999,999')   AS formatted_quantity,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            opp.opportunity_name
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS opp_name_slugify,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            formatted_quantity
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS formatted_quantity_slugify,
      opp.dim_crm_opportunity_id,
      opp.opportunity_name, 
      fct_opp.amount                                                                                                    AS opportunity_amount, 
      ii.invoice_item_charge_amount, 
      IFF(ROUND(opportunity_amount,2) = ROUND(ii.invoice_item_charge_amount,2),5,0)                                     AS opp_invoice_amount_match, 
      IFF(CONTAINS(opp_name_slugify, formatted_quantity_slugify),5,0)                                                   AS slugify_quantity_name_match,
      IFF(CONTAINS(opportunity_name, formatted_quantity),1,0)                                                           AS formatted_quantity_name_match,  
      opp_invoice_amount_match + slugify_quantity_name_match + formatted_quantity_name_match AS total
    FROM dupes
    INNER JOIN invoice_item_amount ii
      ON dupes.dim_subscription_id = ii.dim_subscription_id
        AND dupes.invoice_number = ii.invoice_number
    INNER JOIN "PROD".restricted_safe_common.dim_crm_opportunity AS opp
      ON ii.invoice_number = opp.invoice_number
    INNER JOIN "PROD".restricted_safe_common.fct_crm_opportunity AS fct_opp
      ON opp.dim_crm_opportunity_id = fct_opp.dim_crm_opportunity_id
    WHERE opp.stage_name <> '10-Duplicate'

), multiple_opps_on_one_invoice_matches AS (
  
    SELECT *
    FROM multiple_opps_on_one_invoice
    QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_subscription_id ORDER BY total DESC) = 1

), dupes_with_amount_matches AS (

    SELECT dupes.*
    FROM dupes
    INNER JOIN multiple_opps_on_one_invoice_matches 
      ON dupes.dim_subscription_id = multiple_opps_on_one_invoice_matches.dim_subscription_id
        AND dupes.unfilled_invoice_opp_id = multiple_opps_on_one_invoice_matches.dim_crm_opportunity_id
    WHERE total > 0

), dupes_without_amount_matches AS (

    SELECT *
    FROM dupes 
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM dupes_with_amount_matches) -- 460 non-distinct, 200 distinct
  
), multi_invoice_subs_with_opp_amounts AS (

    SELECT
       dim_subscription_id,
       ROUND(AVG(invoice_item_charge_amount),4)                                                  AS invoice_amount, 
       ROUND(SUM(invoice_opp_total_contract_value_forward),4)                                    AS invoice_opp_amount_forward, 
       ROUND(SUM(invoice_opp_total_contract_value_backward),4)                                   AS invoice_opp_amount_backward,
       ROUND(AVG(quote_opp_total_contract_value_forward),4)                                      AS quote_opp_amount_forward,
       ROUND(AVG(quote_opp_total_contract_value_backward),4)                                     AS quote_opp_amount_backward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_forward),4)                  AS subscription_quote_number_opp_amount_forward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_backward),4)                 AS subscription_quote_number_opp_amount_backward
    FROM dupes_without_amount_matches
    GROUP BY 1
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total AS (
   
    SELECT *
    FROM multi_invoice_subs_with_opp_amounts
    WHERE invoice_amount = invoice_opp_amount_forward
      OR invoice_amount = invoice_opp_amount_backward
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp AS (
  
    SELECT *
    FROM dupes
    WHERE dim_subscription_id IN (SELECT DISTINCT dim_subscription_id FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total)
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_created_date_forward) = 1
  
), final_matches_part_1 AS (
  
    SELECT *, 'non-duplicates' AS source
    FROM non_duplicates
    
    UNION 
  
    -- for invoices that have multiple subscriptions on the invoice, take the subscription-opportunity mapping where the invoice amount = opportunity amount 
    SELECT *, 'invoice amount matches opp amount' AS source
    FROM dupes_with_amount_matches
  
    UNION
    
    -- for subscriptions spread across multiple invoices where the opp totals match the total across the invoices, take the first opportunity based on the opportunity created date
    SELECT *, 'multi-invoice single sub' AS source
    FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp

), dupes_part_2 AS ( -- the fixes applied to these duplicates are not as strong, so we are peeling them out and applying different solutions

    SELECT *
    FROM dupes
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM final_matches_part_1)
  
), self_service_dupes_with_subscription_opp AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Self-Service'
      AND subscription_opp_id IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1

), sales_assisted_dupes_with_quote_num_on_sub AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Sales-Assisted'
      AND COALESCE(subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward, subscription_quote_number_opp_id_backward_term_based) IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1
  
), dupes_all_raw_sub_options_match AS (
  
    SELECT *
    FROM dupes_part_2
    WHERE unfilled_invoice_opp_id = unfilled_quote_opp_id
      AND unfilled_quote_opp_id = unfilled_subscription_quote_number_opp_id
      AND dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM self_service_dupes_with_subscription_opp
                                     UNION
                                     SELECT DISTINCT dim_subscription_id FROM sales_assisted_dupes_with_quote_num_on_sub)

 ), final_matches AS (
   
    SELECT *
    FROM final_matches_part_1
    UNION
  
    -- for self-service dupes, take the most reliable connection (opportunity id on subscription)
    SELECT *, 'self-service' AS source
    FROM self_service_dupes_with_subscription_opp
  
    UNION
   
    -- for sales_assisted dupes, take the most reliable connection (quote number on subscription)
    SELECT *, 'sales-assisted' AS source
    FROM sales_assisted_dupes_with_quote_num_on_sub  
  
    UNION
  
    -- for all dupes, take the subscription-opportunity options where the raw fields (opp on subscription, opp on invoice, and opp on quote number from subscription) match
    SELECT *, 'all matching opps' AS source
    FROM dupes_all_raw_sub_options_match

), final_matches_with_bad_data_flag AS (

    SELECT 
      final_matches.*,
      IFF(len(SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))=0, NULL, SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))    AS opp_id_remove_salesforce_url,
      trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        combined_opportunity_id
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )                                                                                                                             AS opp_id_slugify,
      opp_name.opportunity_id                                                                                                                                                   AS opp_id_name,
      COALESCE(opp_id_remove_salesforce_url, opp_id_name, IFF(combined_opportunity_id NOT LIKE '0%', opp_id_slugify, combined_opportunity_id))                                  AS combined_oportunity_id_coalesced,
      CASE 
        WHEN subscription_opp_id IS NULL
          AND invoice_opp_id_forward IS NULL
            AND invoice_opp_id_backward IS NULL
              AND invoice_opp_id_forward_term_based IS NULL
                AND invoice_opp_id_backward_term_based IS NULL
                  AND unfilled_invoice_opp_id IS NULL
                    AND quote_opp_id_forward IS NULL
                      AND quote_opp_id_backward IS NULL
                        AND quote_opp_id_forward_term_based IS NULL
                          AND quote_opp_id_backward_term_based IS NULL
                            AND unfilled_quote_opp_id IS NULL
                              AND subscription_quote_number_opp_id_forward IS NULL
                                AND subscription_quote_number_opp_id_backward IS NULL
                                  AND subscription_quote_number_opp_id_forward_term_based IS NULL
                                    AND subscription_quote_number_opp_id_backward_term_based IS NULL
                                      AND subscription_quote_number_opp_id_forward_sub_name IS NULL
                                        AND unfilled_subscription_quote_number_opp_id IS NULL
                                          AND ( invoice_opp_id_forward_sub_name IS NOT NULL
                                                OR subscription_quote_number_opp_id_forward_sub_name IS NOT NULL
                                                OR quote_opp_id_forward_sub_name IS NOT NULL
                                              )
          THEN 1
        ELSE 0
      END                                                                                                           AS is_questionable_opportunity_mapping
    FROM final_matches
    LEFT JOIN "PREP".sfdc.sfdc_opportunity_source opp_name
      ON trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        final_matches.combined_opportunity_id
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )  = trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        opp_name.opportunity_name
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )

), short_oppty_id AS (

SELECT
  opportunity_id              AS long_oppty_id,
  LEFT(opportunity_id,15)     AS short_oppty_id
FROM  "PREP".sfdc.sfdc_opportunity_source

), final_matches_with_long_oppty_id AS (

SELECT 
  final_matches_with_bad_data_flag.*,
  short_oppty_id.long_oppty_id        AS dim_crm_opportunity_id
FROM final_matches_with_bad_data_flag
LEFT JOIN short_oppty_id
  ON LEFT(final_matches_with_bad_data_flag.combined_oportunity_id_coalesced,15) = short_oppty_id.short_oppty_id
  
)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-11-10'::DATE        AS model_created_date,
      '2022-01-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final_matches_with_long_oppty_id20:T28ce,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('namespaces', 'prep_namespace'),
    ('subscriptions', 'prep_subscription'),
    ('orders', 'customers_db_orders_source'),
    ('product_tiers', 'prep_product_tier'),
    ('product_details', 'dim_product_detail'),
    ('fct_mrr_with_zero_dollar_charges', 'fct_mrr_with_zero_dollar_charges'),
    ('trial_histories', 'customers_db_trial_histories_source'),
    ('subscription_delivery_types', 'bdg_subscription_product_rate_plan')
]) }}

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id,
      product_details.product_rate_plan_id,
      product_details.dim_product_tier_id
    FROM fct_mrr_with_zero_dollar_charges 
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
      AND product_details.product_deployment_type = 'GitLab.com'
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = {{ get_date_id("DATE_TRUNC('month', CURRENT_DATE)") }}
      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      product_tiers.dim_product_tier_id                                 AS dim_product_tier_id_namespace,
      product_tiers.product_tier_name                                   AS product_tier_name_namespace,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND product_tier_name_namespace = 'SaaS - Trial: Ultimate'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    LEFT JOIN product_tiers
      ON namespaces.dim_product_tier_id = product_tiers.dim_product_tier_id
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      COUNT(*) OVER(PARTITION BY subscriptions.dim_subscription_id)     AS count_of_tiers_per_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON saas_subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), order_list AS (

    SELECT
      orders.order_id,
      orders.customer_id,
      COALESCE(trial_tiers.dim_product_tier_id,
               product_rate_plans.dim_product_tier_id)                  AS dim_product_tier_id_with_trial,
      COALESCE(trial_tiers.product_tier_name,
               product_rate_plans.product_tier_name)                    AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders.subscription_id                                            AS subscription_id_order,
      orders.subscription_name                                          AS subscription_name_order,
      orders.subscription_name_slugify                                  AS subscription_name_slugify_order,
      orders.order_start_date,
      orders.order_end_date,
      orders.gitlab_namespace_id                                        AS namespace_id_order,
      orders.order_is_trial,
      IFF(IFNULL(orders.order_end_date, CURRENT_DATE) >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders
    LEFT JOIN product_rate_plans
      ON orders.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders.order_is_trial = TRUE
    WHERE orders.order_start_date IS NOT NULL
      AND (product_rate_plans.product_rate_plan_id IS NOT NULL
          OR orders.product_rate_plan_id IN ('premium-saas-trial-plan-id', 'ultimate-saas-trial-plan-id', 'free-plan-id')
          )

), final AS (

    SELECT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.order_id,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.dim_product_tier_id_namespace,
      namespace_list.product_tier_name_namespace,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.count_of_tiers_per_subscription,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription 
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-01-14",
    updated_date="2023-06-22"
) }}21:T580,The purpose of this table is two-fold:
1. Connect **Ultimate Parent** Namespace ID to Subscription (and hence Zuora billing account and CRM Account)
2. Connect Customer DB Customer ID to Subscription for self managed purchases. This helps with marketing efforts.

This table expands the functionality of the orders by improving the join to ultimate parent namespaces and subscriptions. Namespaces are listed in this table with prior trials and currently paid plans. Subscriptions listed in this table are all SaaS (determined by the `product_rate_plan_id` from `zuora_rate_plan_source`) and the `is_active_subscription` column can be used to filter to subscription that are currently active (status is Active or Cancelled with a recurring charge in the current month). Orders in this table are all SaaS (determined by the `product_rate_plan_id` from `customers_db_orders_source`) and the `is_active_order` column can be used to filter to orders that are currently active (`order_end_date` is NULL or greater than the date that this table was refreshed).

The tier(s) connected to the subscription are determined using the underlying Zuora recurring charges. This view uses a `FULL OUTER JOIN` to show all three sides of the Venn diagram. (namespace, orders, subscriptions)
In doing so exceptions are noted within `namespace_order_subscription_match_status` to identify rows that do not match between systems.22:T2ac3,



WITH namespaces AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), subscriptions AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), orders AS (

    SELECT * 
    FROM "PREP".customers.customers_db_orders_source

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), product_details AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), fct_mrr_with_zero_dollar_charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr_all

), trial_histories AS (

    SELECT * 
    FROM "PREP".customers.customers_db_trial_histories_source

), subscription_delivery_types AS (

    SELECT * 
    FROM "PROD".common.bdg_subscription_product_rate_plan

)

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id,
      product_details.product_rate_plan_id,
      product_details.dim_product_tier_id
    FROM fct_mrr_with_zero_dollar_charges 
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
      AND product_details.product_deployment_type = 'GitLab.com'
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = 

  TO_NUMBER(TO_CHAR(DATE_TRUNC('month', CURRENT_DATE)::DATE,'YYYYMMDD'),'99999999')


      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      product_tiers.dim_product_tier_id                                 AS dim_product_tier_id_namespace,
      product_tiers.product_tier_name                                   AS product_tier_name_namespace,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND product_tier_name_namespace = 'SaaS - Trial: Ultimate'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    LEFT JOIN product_tiers
      ON namespaces.dim_product_tier_id = product_tiers.dim_product_tier_id
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      COUNT(*) OVER(PARTITION BY subscriptions.dim_subscription_id)     AS count_of_tiers_per_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON saas_subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), order_list AS (

    SELECT
      orders.order_id,
      orders.customer_id,
      COALESCE(trial_tiers.dim_product_tier_id,
               product_rate_plans.dim_product_tier_id)                  AS dim_product_tier_id_with_trial,
      COALESCE(trial_tiers.product_tier_name,
               product_rate_plans.product_tier_name)                    AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders.subscription_id                                            AS subscription_id_order,
      orders.subscription_name                                          AS subscription_name_order,
      orders.subscription_name_slugify                                  AS subscription_name_slugify_order,
      orders.order_start_date,
      orders.order_end_date,
      orders.gitlab_namespace_id                                        AS namespace_id_order,
      orders.order_is_trial,
      IFF(IFNULL(orders.order_end_date, CURRENT_DATE) >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders
    LEFT JOIN product_rate_plans
      ON orders.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders.order_is_trial = TRUE
    WHERE orders.order_start_date IS NOT NULL
      AND (product_rate_plans.product_rate_plan_id IS NOT NULL
          OR orders.product_rate_plan_id IN ('premium-saas-trial-plan-id', 'ultimate-saas-trial-plan-id', 'free-plan-id')
          )

), final AS (

    SELECT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.order_id,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.dim_product_tier_id_namespace,
      namespace_list.product_tier_name_namespace,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.count_of_tiers_per_subscription,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription 
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-14'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final23:T2401,{{ config(
    tags=["product", "mnpi_exception"],
    materialized = "incremental",
    unique_key = "ping_instance_metric_id"
) }}

{{ simple_cte([
    ('prep_subscription', 'prep_subscription'),
    ('dim_date', 'dim_date'),
    ('map_ip_to_country', 'map_ip_to_country'),
    ('locations', 'prep_location_country'),
    ('prep_ping_instance', 'prep_ping_instance_flattened'),
    ('dim_product_tier', 'dim_product_tier')
    ])

}}
, prep_subscription_md5 AS (

    SELECT dim_subscription_id
    FROM {{ ref('prep_subscription') }}

), prep_subscription_sha256 AS (

    SELECT dim_subscription_id
    FROM {{ ref('prep_subscription') }}

), prep_license AS (

    SELECT
      license_md5,
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM {{ ref('prep_license') }}

), prep_license_md5 AS (

    SELECT
      license_md5,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_md5 IS NOT NULL

), prep_license_sha256 AS (

    SELECT
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_sha256 IS NOT NULL

), map_ip_location AS (

    SELECT
      map_ip_to_country.ip_address_hash                 AS ip_address_hash,
      map_ip_to_country.dim_location_country_id         AS dim_location_country_id
    FROM map_ip_to_country
    INNER JOIN locations
      WHERE map_ip_to_country.dim_location_country_id = locations.dim_location_country_id

), source AS (

    SELECT
      prep_ping_instance.*
    FROM prep_ping_instance
      {% if is_incremental() %}
                  WHERE uploaded_at >= (SELECT MAX(uploaded_at) FROM {{this}})
      {% endif %}

), add_country_info_to_usage_ping AS (

    SELECT
      source.*,
      map_ip_location.dim_location_country_id     AS dim_location_country_id
    FROM source
    LEFT JOIN map_ip_location
      ON source.ip_address_hash = map_ip_location.ip_address_hash

), prep_usage_ping_cte AS (

    SELECT
      dim_ping_instance_id                                AS dim_ping_instance_id,
      dim_host_id                                         AS dim_host_id,
      dim_instance_id                                     AS dim_instance_id,
      dim_installation_id                                 AS dim_installation_id,
      dim_product_tier.dim_product_tier_id                AS dim_product_tier_id,
      ping_created_at                                     AS ping_created_at,
      uploaded_at                                         AS uploaded_at,
      license_md5                                         AS license_md5,
      license_sha256                                      AS license_sha256,
      dim_location_country_id                             AS dim_location_country_id,
      license_trial_ends_on                               AS license_trial_ends_on,
      license_subscription_id                             AS license_subscription_id,
      umau_value                                          AS umau_value,
      product_tier                                        AS product_tier,
      main_edition                                        AS main_edition,
      metrics_path                                        AS metrics_path,
      metric_value                                        AS metric_value,
      has_timed_out                                       AS has_timed_out,
      ping_type                                           AS ping_type
    FROM add_country_info_to_usage_ping
    LEFT JOIN dim_product_tier
    ON TRIM(LOWER(add_country_info_to_usage_ping.product_tier)) = TRIM(LOWER(dim_product_tier.product_tier_historical_short))
    AND add_country_info_to_usage_ping.ping_deployment_type = dim_product_tier.product_deployment_type

), joined_payload AS (

    SELECT
      prep_usage_ping_cte.*,
      COALESCE(prep_license_md5.dim_license_id, prep_license_sha256.dim_license_id)                                                AS dim_license_id,
      dim_date.date_id                                                                                                             AS dim_ping_date_id,
      COALESCE(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id), license_subscription_id) AS dim_subscription_id,
      IFF(prep_usage_ping_cte.ping_created_at < license_trial_ends_on, TRUE, FALSE)                                                AS is_trial,
      IFF(COALESCE(prep_license_md5.dim_subscription_id,prep_license_sha256.dim_subscription_id) IS NOT NULL, TRUE, FALSE)         AS is_license_mapped_to_subscription, -- does the license table have a value in both license_id and subscription_id
      IFF(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id) IS NULL, FALSE, TRUE)          AS is_license_subscription_id_valid   -- is the subscription_id in the license table valid (does it exist in the subscription table?)
    FROM prep_usage_ping_cte
    LEFT JOIN prep_license_md5
      ON prep_usage_ping_cte.license_md5    = prep_license_md5.license_md5
    LEFT JOIN prep_license_sha256
      ON prep_usage_ping_cte.license_sha256 = prep_license_sha256.license_sha256
    LEFT JOIN prep_subscription_md5
      ON prep_license_md5.dim_subscription_id = prep_subscription_md5.dim_subscription_id
    LEFT JOIN prep_subscription_sha256
      ON prep_license_sha256.dim_subscription_id = prep_subscription_sha256.dim_subscription_id
    LEFT JOIN dim_date
      ON TO_DATE(prep_usage_ping_cte.ping_created_at) = dim_date.date_day

), flattened_high_level as (
    SELECT
      {{ dbt_utils.surrogate_key(['dim_ping_instance_id', 'joined_payload.metrics_path']) }}                      AS ping_instance_metric_id,
      dim_ping_instance_id                                                                                        AS dim_ping_instance_id,
      joined_payload.metrics_path                                                                                 AS metrics_path,
      metric_value                                                                                                AS metric_value,
      has_timed_out                                                                                               AS has_timed_out,
      dim_product_tier_id                                                                                         AS dim_product_tier_id,
      dim_subscription_id                                                                                         AS dim_subscription_id,
      dim_location_country_id                                                                                     AS dim_location_country_id,
      dim_ping_date_id                                                                                            AS dim_ping_date_id,
      dim_instance_id                                                                                             AS dim_instance_id,
      dim_host_id                                                                                                 AS dim_host_id,
      dim_installation_id                                                                                         AS dim_installation_id,
      dim_license_id                                                                                              AS dim_license_id,
      license_md5                                                                                                 AS license_md5,
      license_sha256                                                                                              AS license_sha256,
      ping_created_at                                                                                             AS ping_created_at,
      uploaded_at                                                                                                 AS uploaded_at,
      ping_created_at::DATE                                                                                       AS ping_created_date,
      umau_value                                                                                                  AS umau_value,
      license_subscription_id                                                                                     AS dim_subscription_license_id,
      is_license_mapped_to_subscription                                                                           AS is_license_mapped_to_subscription,
      is_license_subscription_id_valid                                                                            AS is_license_subscription_id_valid,
      IFF(dim_license_id IS NULL, FALSE, TRUE)                                                                    AS is_service_ping_license_in_customerDot,
      'VERSION_DB'                                                                                                AS data_source,
      ping_type                                                                                                   AS ping_type
  FROM joined_payload

)

{{ dbt_audit(
    cte_ref="flattened_high_level",
    created_by="@icooper-acp",
    updated_by="@jpeguero",
    created_date="2022-03-08",
    updated_date="2023-06-12"
) }}24:Tdd0, **Description:** Atomic level instance Service Ping data by ping and metric for all metrics, including basic identifiers for easy joins out to dimension tables
- The data includes a single row per ping and metric
- Includes installation, instance, date, product, billing, and subscription identifiers

**Data Grain:**
- dim_ping_instance_id
- metrics_path

**Filters Applied to Model:**
- `Inherited` - `uuid IS NOT NULL` (uuid is synonymous with dim_instance_id)
- `Inherited` - `version NOT LIKE '%VERSION%`

**Business Logic in this Model:**
- Includes all metrics, regardless of time frame or whether they can be located in `dim_ping_metric`
- `Inherited` - `has_timed_out` = `IFF(value = -1, TRUE, FALSE)`
- `Inherited` - Metrics that timed out (return -1) are set to a value of 0
- `Inherited` - `umau_value` = metric value from `usage_activity_by_stage_monthly.manage.events`
- `dim_subscription_id` = `COALESCE(prep_subscription.dim_subscription_id, ping_payload.license_subscription_id)`

**Other Comments:**
- The `fct_ping_instance_metric` table is built directly from the [prep_ping_instance table](https://gitlab-data.gitlab.io/analytics/#!/model/model.gitlab_snowflake.prep_ping_instance) which brings in Instance Service Ping data one record per Service Ping.  Along with the Instance information a 'Payload' column with an array of Metrics is captured in the Service Ping.
- Sums, Counts and Percents of Usage (called metrics) is captured along with the Implementation Information at the Instance Level and sent to GitLab. The Instance Owner determines whether Service Ping data will be sent or not.
- GitLab implementations can be Customer Hosted (Self-Managed), GitLab Hosted (referred to as SaaS or Dotcom data) or GitLab Dedicated Hosted (where each Installation is Hosted by GitLab but on Separate Servers).  
- `dim_ping_instance_id` is the unique identifier for the service ping and is synonymous with `id` in the source data
- `dim_instance_id` is synonymous with `uuid` in the source data
- `dim_installation_id` is the unique identifier for the actual installation. It is a combination of `dim_instance_id` and `dim_host_id`. `dim_host_id` is required because there can be multiple installations that share the same `dim_instance_id` (ex: gitlab.com has several installations sharing the same dim_instance_id: gitlab.com, staging.gitlab.com, etc)
- Multiple Instances can be hosted on each Implementation. Multiple Installations can be included within each Instance which is determined by Host_id. (Instance_id || Host_id = Installation_id)
- Service Ping data is captured at a particular point in time with `all-time, 7_day and 28_day` metrics.  The metrics are only pertinent to the Ping Date and Time and can not be aggregated across Ping Dates. Service Pings are normally compared WoW, MoM, YoY,  etc.  
- The different types of Service Pings are shown here with the [Self-Managed Service Ping](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#self-managed-service-ping), [GitLab Hosted Implementation](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-service-ping-automation/#saas-service-ping).
- [GitLab Dedicated Implementation](https://docs.gitlab.com/ee/subscriptions/gitlab_dedicated/#gitlab-dedicated) service pings will function similar to Self-Managed Implementations.
- [Service Ping Guide](https://docs.gitlab.com/ee/development/service_ping/) shows a technical overview of the Service Ping data flow. 25:T25ab,



WITH prep_subscription AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), map_ip_to_country AS (

    SELECT * 
    FROM "PROD".common_mapping.map_ip_to_country

), locations AS (

    SELECT * 
    FROM "PROD".common_prep.prep_location_country

), prep_ping_instance AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ping_instance_flattened

), dim_product_tier AS (

    SELECT * 
    FROM "PROD".common.dim_product_tier

)
, prep_subscription_md5 AS (

    SELECT dim_subscription_id
    FROM "PROD".common_prep.prep_subscription

), prep_subscription_sha256 AS (

    SELECT dim_subscription_id
    FROM "PROD".common_prep.prep_subscription

), prep_license AS (

    SELECT
      license_md5,
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM "PROD".common_prep.prep_license

), prep_license_md5 AS (

    SELECT
      license_md5,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_md5 IS NOT NULL

), prep_license_sha256 AS (

    SELECT
      license_sha256,
      dim_license_id,
      dim_subscription_id
    FROM prep_license
    WHERE license_sha256 IS NOT NULL

), map_ip_location AS (

    SELECT
      map_ip_to_country.ip_address_hash                 AS ip_address_hash,
      map_ip_to_country.dim_location_country_id         AS dim_location_country_id
    FROM map_ip_to_country
    INNER JOIN locations
      WHERE map_ip_to_country.dim_location_country_id = locations.dim_location_country_id

), source AS (

    SELECT
      prep_ping_instance.*
    FROM prep_ping_instance
      
                  WHERE uploaded_at >= (SELECT MAX(uploaded_at) FROM "PROD".common.fct_ping_instance_metric)
      

), add_country_info_to_usage_ping AS (

    SELECT
      source.*,
      map_ip_location.dim_location_country_id     AS dim_location_country_id
    FROM source
    LEFT JOIN map_ip_location
      ON source.ip_address_hash = map_ip_location.ip_address_hash

), prep_usage_ping_cte AS (

    SELECT
      dim_ping_instance_id                                AS dim_ping_instance_id,
      dim_host_id                                         AS dim_host_id,
      dim_instance_id                                     AS dim_instance_id,
      dim_installation_id                                 AS dim_installation_id,
      dim_product_tier.dim_product_tier_id                AS dim_product_tier_id,
      ping_created_at                                     AS ping_created_at,
      uploaded_at                                         AS uploaded_at,
      license_md5                                         AS license_md5,
      license_sha256                                      AS license_sha256,
      dim_location_country_id                             AS dim_location_country_id,
      license_trial_ends_on                               AS license_trial_ends_on,
      license_subscription_id                             AS license_subscription_id,
      umau_value                                          AS umau_value,
      product_tier                                        AS product_tier,
      main_edition                                        AS main_edition,
      metrics_path                                        AS metrics_path,
      metric_value                                        AS metric_value,
      has_timed_out                                       AS has_timed_out,
      ping_type                                           AS ping_type
    FROM add_country_info_to_usage_ping
    LEFT JOIN dim_product_tier
    ON TRIM(LOWER(add_country_info_to_usage_ping.product_tier)) = TRIM(LOWER(dim_product_tier.product_tier_historical_short))
    AND add_country_info_to_usage_ping.ping_deployment_type = dim_product_tier.product_deployment_type

), joined_payload AS (

    SELECT
      prep_usage_ping_cte.*,
      COALESCE(prep_license_md5.dim_license_id, prep_license_sha256.dim_license_id)                                                AS dim_license_id,
      dim_date.date_id                                                                                                             AS dim_ping_date_id,
      COALESCE(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id), license_subscription_id) AS dim_subscription_id,
      IFF(prep_usage_ping_cte.ping_created_at < license_trial_ends_on, TRUE, FALSE)                                                AS is_trial,
      IFF(COALESCE(prep_license_md5.dim_subscription_id,prep_license_sha256.dim_subscription_id) IS NOT NULL, TRUE, FALSE)         AS is_license_mapped_to_subscription, -- does the license table have a value in both license_id and subscription_id
      IFF(COALESCE(prep_subscription_md5.dim_subscription_id,prep_subscription_sha256.dim_subscription_id) IS NULL, FALSE, TRUE)          AS is_license_subscription_id_valid   -- is the subscription_id in the license table valid (does it exist in the subscription table?)
    FROM prep_usage_ping_cte
    LEFT JOIN prep_license_md5
      ON prep_usage_ping_cte.license_md5    = prep_license_md5.license_md5
    LEFT JOIN prep_license_sha256
      ON prep_usage_ping_cte.license_sha256 = prep_license_sha256.license_sha256
    LEFT JOIN prep_subscription_md5
      ON prep_license_md5.dim_subscription_id = prep_subscription_md5.dim_subscription_id
    LEFT JOIN prep_subscription_sha256
      ON prep_license_sha256.dim_subscription_id = prep_subscription_sha256.dim_subscription_id
    LEFT JOIN dim_date
      ON TO_DATE(prep_usage_ping_cte.ping_created_at) = dim_date.date_day

), flattened_high_level as (
    SELECT
      md5(cast(coalesce(cast(dim_ping_instance_id as 
    varchar
), '') || '-' || coalesce(cast(joined_payload.metrics_path as 
    varchar
), '') as 
    varchar
))                      AS ping_instance_metric_id,
      dim_ping_instance_id                                                                                        AS dim_ping_instance_id,
      joined_payload.metrics_path                                                                                 AS metrics_path,
      metric_value                                                                                                AS metric_value,
      has_timed_out                                                                                               AS has_timed_out,
      dim_product_tier_id                                                                                         AS dim_product_tier_id,
      dim_subscription_id                                                                                         AS dim_subscription_id,
      dim_location_country_id                                                                                     AS dim_location_country_id,
      dim_ping_date_id                                                                                            AS dim_ping_date_id,
      dim_instance_id                                                                                             AS dim_instance_id,
      dim_host_id                                                                                                 AS dim_host_id,
      dim_installation_id                                                                                         AS dim_installation_id,
      dim_license_id                                                                                              AS dim_license_id,
      license_md5                                                                                                 AS license_md5,
      license_sha256                                                                                              AS license_sha256,
      ping_created_at                                                                                             AS ping_created_at,
      uploaded_at                                                                                                 AS uploaded_at,
      ping_created_at::DATE                                                                                       AS ping_created_date,
      umau_value                                                                                                  AS umau_value,
      license_subscription_id                                                                                     AS dim_subscription_license_id,
      is_license_mapped_to_subscription                                                                           AS is_license_mapped_to_subscription,
      is_license_subscription_id_valid                                                                            AS is_license_subscription_id_valid,
      IFF(dim_license_id IS NULL, FALSE, TRUE)                                                                    AS is_service_ping_license_in_customerDot,
      'VERSION_DB'                                                                                                AS data_source,
      ping_type                                                                                                   AS ping_type
  FROM joined_payload

)

SELECT
      *,
      '@icooper-acp'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2022-03-08'::DATE        AS model_created_date,
      '2023-06-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM flattened_high_level26:Tea4,{{ config(
    tags=["mnpi_exception"]
) }}

{{ config({
        "materialized": "view",
    })
}}

WITH license AS (

    SELECT
      dim_license_id,
      license_md5,
      license_sha256,
      dim_subscription_id
    FROM {{ ref('dim_license') }}

), subscription AS (

    SELECT
      dim_subscription_id,
      dim_crm_account_id
    FROM {{ ref('prep_subscription') }}

), crm_account AS (

    SELECT
      dim_crm_account_id,
      dim_parent_crm_account_id
    FROM {{ ref('dim_crm_account') }}

), license_mapped_to_subscription AS (

    SELECT
      license.dim_license_id,
      license.license_md5,
      license.license_sha256,
      subscription.dim_subscription_id,
      subscription.dim_crm_account_id,
      IFF(license.dim_subscription_id IS NOT NULL, TRUE, FALSE)          AS is_license_mapped_to_subscription, -- does the license table have a value in both license_id and subscription_id
      IFF(subscription.dim_subscription_id IS NULL, FALSE, TRUE)     AS is_license_subscription_id_valid   -- is the subscription_id in the license table valid (does it exist in the dim_subscription table?)
    FROM license
    LEFT JOIN subscription
      ON license.dim_subscription_id = subscription.dim_subscription_id

), subscription_mapped_to_crm_account AS (

    SELECT
      subscription.dim_subscription_id,
      subscription.dim_crm_account_id,
      crm_account.dim_parent_crm_account_id
    FROM subscription
    INNER JOIN crm_account
      ON subscription.dim_crm_account_id = crm_account.dim_crm_account_id

), joined AS (

    SELECT
      license_mapped_to_subscription.dim_license_id,
      license_mapped_to_subscription.license_md5,
      license_mapped_to_subscription.license_sha256,
      license_mapped_to_subscription.is_license_mapped_to_subscription,
      license_mapped_to_subscription.is_license_subscription_id_valid,
      license_mapped_to_subscription.dim_subscription_id,
      license_mapped_to_subscription.dim_crm_account_id,
      subscription_mapped_to_crm_account.dim_parent_crm_account_id
    FROM license_mapped_to_subscription
    INNER JOIN subscription_mapped_to_crm_account
        ON license_mapped_to_subscription.dim_subscription_id = subscription_mapped_to_crm_account.dim_subscription_id

), license_statistics AS (

    SELECT
      dim_license_id,
      COUNT(DISTINCT license_md5)                   AS total_number_md5_per_license,
      COUNT(DISTINCT license_sha256)                AS total_number_sha256_per_license,
      COUNT(DISTINCT dim_subscription_id)           AS total_number_subscription_per_license,
      COUNT(DISTINCT dim_crm_account_id)            AS total_number_crm_account_per_license,
      COUNT(DISTINCT dim_parent_crm_account_id)    AS total_number_ultimate_parent_account_per_license
    FROM joined
    GROUP BY 1

), final AS (

    SELECT
        joined.dim_license_id,
        joined.license_md5,
        joined.license_sha256,
        joined.is_license_mapped_to_subscription,
        joined.is_license_subscription_id_valid,
        joined.dim_subscription_id,
        joined.dim_crm_account_id,
        joined.dim_parent_crm_account_id,
        license_statistics.total_number_md5_per_license,
        license_statistics.total_number_sha256_per_license,
        license_statistics.total_number_subscription_per_license,
        license_statistics.total_number_crm_account_per_license,
        license_statistics.total_number_ultimate_parent_account_per_license
    FROM joined
    INNER JOIN license_statistics
      ON joined.dim_license_id = license_statistics.dim_license_id

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@kathleentam",
    updated_by="@rbacovic",
    created_date="2021-01-10",
    updated_date="2022-12-01"
) }}27:Tf4d,



WITH license AS (

    SELECT
      dim_license_id,
      license_md5,
      license_sha256,
      dim_subscription_id
    FROM "PROD".common.dim_license

), subscription AS (

    SELECT
      dim_subscription_id,
      dim_crm_account_id
    FROM "PROD".common_prep.prep_subscription

), crm_account AS (

    SELECT
      dim_crm_account_id,
      dim_parent_crm_account_id
    FROM "PROD".restricted_safe_common.dim_crm_account

), license_mapped_to_subscription AS (

    SELECT
      license.dim_license_id,
      license.license_md5,
      license.license_sha256,
      subscription.dim_subscription_id,
      subscription.dim_crm_account_id,
      IFF(license.dim_subscription_id IS NOT NULL, TRUE, FALSE)          AS is_license_mapped_to_subscription, -- does the license table have a value in both license_id and subscription_id
      IFF(subscription.dim_subscription_id IS NULL, FALSE, TRUE)     AS is_license_subscription_id_valid   -- is the subscription_id in the license table valid (does it exist in the dim_subscription table?)
    FROM license
    LEFT JOIN subscription
      ON license.dim_subscription_id = subscription.dim_subscription_id

), subscription_mapped_to_crm_account AS (

    SELECT
      subscription.dim_subscription_id,
      subscription.dim_crm_account_id,
      crm_account.dim_parent_crm_account_id
    FROM subscription
    INNER JOIN crm_account
      ON subscription.dim_crm_account_id = crm_account.dim_crm_account_id

), joined AS (

    SELECT
      license_mapped_to_subscription.dim_license_id,
      license_mapped_to_subscription.license_md5,
      license_mapped_to_subscription.license_sha256,
      license_mapped_to_subscription.is_license_mapped_to_subscription,
      license_mapped_to_subscription.is_license_subscription_id_valid,
      license_mapped_to_subscription.dim_subscription_id,
      license_mapped_to_subscription.dim_crm_account_id,
      subscription_mapped_to_crm_account.dim_parent_crm_account_id
    FROM license_mapped_to_subscription
    INNER JOIN subscription_mapped_to_crm_account
        ON license_mapped_to_subscription.dim_subscription_id = subscription_mapped_to_crm_account.dim_subscription_id

), license_statistics AS (

    SELECT
      dim_license_id,
      COUNT(DISTINCT license_md5)                   AS total_number_md5_per_license,
      COUNT(DISTINCT license_sha256)                AS total_number_sha256_per_license,
      COUNT(DISTINCT dim_subscription_id)           AS total_number_subscription_per_license,
      COUNT(DISTINCT dim_crm_account_id)            AS total_number_crm_account_per_license,
      COUNT(DISTINCT dim_parent_crm_account_id)    AS total_number_ultimate_parent_account_per_license
    FROM joined
    GROUP BY 1

), final AS (

    SELECT
        joined.dim_license_id,
        joined.license_md5,
        joined.license_sha256,
        joined.is_license_mapped_to_subscription,
        joined.is_license_subscription_id_valid,
        joined.dim_subscription_id,
        joined.dim_crm_account_id,
        joined.dim_parent_crm_account_id,
        license_statistics.total_number_md5_per_license,
        license_statistics.total_number_sha256_per_license,
        license_statistics.total_number_subscription_per_license,
        license_statistics.total_number_crm_account_per_license,
        license_statistics.total_number_ultimate_parent_account_per_license
    FROM joined
    INNER JOIN license_statistics
      ON joined.dim_license_id = license_statistics.dim_license_id

)

SELECT
      *,
      '@kathleentam'::VARCHAR       AS created_by,
      '@rbacovic'::VARCHAR       AS updated_by,
      '2021-01-10'::DATE        AS model_created_date,
      '2022-12-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined28:T330b,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('namespaces', 'prep_namespace'),
    ('subscriptions', 'prep_subscription'),
    ('orders_historical', 'dim_order_hist'),
    ('dates', 'dim_date'),
    ('product_tiers', 'prep_product_tier'),
    ('product_details', 'dim_product_detail'),
    ('fct_mrr_with_zero_dollar_charges', 'fct_mrr_with_zero_dollar_charges'),
    ('trial_histories', 'customers_db_trial_histories_source'),
    ('subscription_delivery_types', 'bdg_subscription_product_rate_plan')
]) }}

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id
    FROM fct_mrr_with_zero_dollar_charges
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = {{ get_date_id("DATE_TRUNC('month', CURRENT_DATE)") }}
      AND product_details.product_deployment_type = 'GitLab.com'
      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      dates.first_day_of_month                                          AS namespace_snapshot_month,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND namespaces.gitlab_plan_title = 'Ultimate Trial'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    INNER JOIN dates
      ON dates.date_actual BETWEEN namespaces.created_at AND CURRENT_DATE
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      subscriptions.subscription_version,
      dates.first_day_of_month                                          AS subscription_snapshot_month,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN dates
      ON dates.date_actual BETWEEN subscriptions.subscription_start_date
                            AND IFNULL(subscriptions.subscription_end_date, CURRENT_DATE)
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), orders AS (
    /*
    This CTE transforms orders from the historical orders table in two significant ways:
      1. It corrects for erroneous order start/end dates by substituting in the valid_from/valid_to columns
          when changes are made to the order (generally remapping to renewed subscriptions, new namespaces)
        a. See term_start_date and term_end_date (identifiers borrowed from the Zuora subscription model)
      2. It smooths over same day updates to the namespace linked to a given order,
          which would otherwise result in multiple rows for an order in a given month
        a. See QUALIFY statement below. This gets the last update to an order on a given day
        b. NOTE: This does remove some order-namespace links that existed in the historical orders table
            at one point in time, but a judgement call was made to assume that if the namespace needed
            to be updated within 24 hours it is likely that the previous namespace was incorrect
    */
    SELECT
      orders_historical.dim_order_id,
      orders_historical.customer_id,
      IFNULL(trial_tiers.dim_product_tier_id,
              product_rate_plans.dim_product_tier_id)                   AS dim_product_tier_id_with_trial,
      IFNULL(trial_tiers.product_tier_name,
              product_rate_plans.product_tier_name)                     AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders_historical.dim_subscription_id                             AS subscription_id_order,
      orders_historical.dim_namespace_id                                AS namespace_id_order,
      MIN(orders_historical.order_start_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_start_date,
      MAX(orders_historical.order_end_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_end_date,
      MIN(orders_historical.valid_from) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_start_date,
      MAX(IFNULL(orders_historical.valid_to, CURRENT_DATE)) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_end_date,
      orders_historical.order_is_trial,
      IFF(order_end_date >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders_historical
    INNER JOIN product_rate_plans
      ON orders_historical.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders_historical.order_is_trial = TRUE
    WHERE order_start_date IS NOT NULL 
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        orders_historical.dim_order_id,
        orders_historical.valid_from::DATE
      ORDER BY orders_historical.valid_from DESC
    ) = 1

), order_list AS (
  
    SELECT
      orders.*,
      dates.first_day_of_month                                          AS order_snapshot_month
    FROM orders
    INNER JOIN dates
      ON dates.date_actual BETWEEN IFF(orders.term_start_date < orders.order_start_date,
                                       orders.order_start_date, orders.term_start_date)
                            AND IFF(orders.term_end_date > orders.order_end_date,
                                    orders.order_end_date, orders.term_end_date)
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY 
        orders.dim_order_id,
        dates.first_day_of_month
      ORDER BY orders.term_end_date DESC
    ) = 1

), final AS (

    SELECT DISTINCT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.dim_order_id,
      COALESCE(order_list.order_snapshot_month,
               subscription_list.subscription_snapshot_month,
               namespace_list.namespace_snapshot_month
              )                                                         AS snapshot_month,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.subscription_version,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.dim_order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription
      AND order_list.order_snapshot_month = subscription_list.subscription_snapshot_month
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id
      AND order_list.order_snapshot_month = namespace_list.namespace_snapshot_month

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-06-02",
    updated_date="2022-06-22"
) }}29:T5c1,The purpose of this table is three-fold:
1. Connect **Ultimate Parent** Namespace ID to Subscription (and hence Zuora billing account and CRM Account)
2. Connect Customer DB Customer ID to Subscription for self managed purchases. This helps with marketing efforts.
3. Provide a historical record the above connections by month.

This table expands the functionality of the orders by improving the join to ultimate parent namespaces and subscriptions. Namespaces are listed in this table with prior trials and currently paid plans. Subscriptions listed in this table are all SaaS (determined by the `product_rate_plan_id` from `zuora_rate_plan_source`) and the `is_active_subscription` column can be used to filter to subscription that are currently active (status is Active or Cancelled with a recurring charge in the current month). Orders in this table are all SaaS (determined by the `product_rate_plan_id` from `customers_db_orders_source`) and the `is_active_order` column can be used to filter to orders that are currently active (`order_end_date` is NULL or greater than the date that this table was refreshed).

The tier(s) connected to the subscription are determined using the underlying Zuora recurring charges. This view uses a `FULL OUTER JOIN` to show all three sides of the Venn diagram. (namespace, orders, subscriptions)
In doing so exceptions are noted within `namespace_order_subscription_match_status` to identify rows that do not match between systems.2a:T3520,



WITH namespaces AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), subscriptions AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), orders_historical AS (

    SELECT * 
    FROM "PROD".common.dim_order_hist

), dates AS (

    SELECT * 
    FROM "PROD".common.dim_date

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), product_details AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), fct_mrr_with_zero_dollar_charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr_all

), trial_histories AS (

    SELECT * 
    FROM "PREP".customers.customers_db_trial_histories_source

), subscription_delivery_types AS (

    SELECT * 
    FROM "PROD".common.bdg_subscription_product_rate_plan

)

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id
    FROM fct_mrr_with_zero_dollar_charges
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = 

  TO_NUMBER(TO_CHAR(DATE_TRUNC('month', CURRENT_DATE)::DATE,'YYYYMMDD'),'99999999')


      AND product_details.product_deployment_type = 'GitLab.com'
      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      dates.first_day_of_month                                          AS namespace_snapshot_month,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND namespaces.gitlab_plan_title = 'Ultimate Trial'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    INNER JOIN dates
      ON dates.date_actual BETWEEN namespaces.created_at AND CURRENT_DATE
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      subscriptions.subscription_version,
      dates.first_day_of_month                                          AS subscription_snapshot_month,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN dates
      ON dates.date_actual BETWEEN subscriptions.subscription_start_date
                            AND IFNULL(subscriptions.subscription_end_date, CURRENT_DATE)
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), orders AS (
    /*
    This CTE transforms orders from the historical orders table in two significant ways:
      1. It corrects for erroneous order start/end dates by substituting in the valid_from/valid_to columns
          when changes are made to the order (generally remapping to renewed subscriptions, new namespaces)
        a. See term_start_date and term_end_date (identifiers borrowed from the Zuora subscription model)
      2. It smooths over same day updates to the namespace linked to a given order,
          which would otherwise result in multiple rows for an order in a given month
        a. See QUALIFY statement below. This gets the last update to an order on a given day
        b. NOTE: This does remove some order-namespace links that existed in the historical orders table
            at one point in time, but a judgement call was made to assume that if the namespace needed
            to be updated within 24 hours it is likely that the previous namespace was incorrect
    */
    SELECT
      orders_historical.dim_order_id,
      orders_historical.customer_id,
      IFNULL(trial_tiers.dim_product_tier_id,
              product_rate_plans.dim_product_tier_id)                   AS dim_product_tier_id_with_trial,
      IFNULL(trial_tiers.product_tier_name,
              product_rate_plans.product_tier_name)                     AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders_historical.dim_subscription_id                             AS subscription_id_order,
      orders_historical.dim_namespace_id                                AS namespace_id_order,
      MIN(orders_historical.order_start_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_start_date,
      MAX(orders_historical.order_end_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_end_date,
      MIN(orders_historical.valid_from) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_start_date,
      MAX(IFNULL(orders_historical.valid_to, CURRENT_DATE)) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_end_date,
      orders_historical.order_is_trial,
      IFF(order_end_date >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders_historical
    INNER JOIN product_rate_plans
      ON orders_historical.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders_historical.order_is_trial = TRUE
    WHERE order_start_date IS NOT NULL 
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        orders_historical.dim_order_id,
        orders_historical.valid_from::DATE
      ORDER BY orders_historical.valid_from DESC
    ) = 1

), order_list AS (
  
    SELECT
      orders.*,
      dates.first_day_of_month                                          AS order_snapshot_month
    FROM orders
    INNER JOIN dates
      ON dates.date_actual BETWEEN IFF(orders.term_start_date < orders.order_start_date,
                                       orders.order_start_date, orders.term_start_date)
                            AND IFF(orders.term_end_date > orders.order_end_date,
                                    orders.order_end_date, orders.term_end_date)
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY 
        orders.dim_order_id,
        dates.first_day_of_month
      ORDER BY orders.term_end_date DESC
    ) = 1

), final AS (

    SELECT DISTINCT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.dim_order_id,
      COALESCE(order_list.order_snapshot_month,
               subscription_list.subscription_snapshot_month,
               namespace_list.namespace_snapshot_month
              )                                                         AS snapshot_month,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.subscription_version,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.dim_order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription
      AND order_list.order_snapshot_month = subscription_list.subscription_snapshot_month
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id
      AND order_list.order_snapshot_month = namespace_list.namespace_snapshot_month

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-06-02'::DATE        AS model_created_date,
      '2022-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final2b:T16f2,WITH source AS (

    SELECT *
    FROM {{ source('salesforce', 'customer_subscription') }}

), renamed AS (

    SELECT
      account__c                                AS account_id,
      activated_users__c                        AS activated_user_count,
      admin_phoenix_status__c                   AS admin_phoenix_status,  
      bpo_renewal_status__c                     AS bpo_renewal_status,
      closed_lost_renewal__c                    AS closed_lost_renewal_id,
      createdbyid                               AS created_by_id,
      createddate                               AS created_date,
      current_renewal_created_by__c             AS current_renewal_created_by,
      current_subscription_carr__c              AS current_subscription_carr,
      current_subscription_status__c            AS current_subscription_status,
      current_term_end_date__c                  AS current_term_end_date,
      current_term_start_date__c                AS current_term_start_date,
      current_zuora_subscription__c             AS current_zuora_subscription,
      current_zuora_sub_id__c                   AS current_zuora_subscription_id,
      customer_subscription_count__c            AS customer_subscription_count,
      entitled_seats__c                         AS entitled_seats,
      estimated_overage_amount__c               AS estimated_overage_amount,
      hosting_type__c                           AS hosting_type,
      id                                        AS customer_subscription_id,
      isdeleted                                 AS is_deleted,
      lastmodifiedbyid                          AS last_modified_by_id,
      lastmodifieddate                          AS last_modified_date,
      license_usage_report_date__c              AS license_usage_report_date,
      linkage_problem__c                        AS is_linkage_problem,
      name                                      AS name,
      ownerid                                   AS owner_id,
      plan_name__c                              AS plan_name,
      renewal_finder_skip__c                    AS is_renewal_finder_skip,
      renewal_finder_story__c                   AS renewal_finder_story,
      renewal_opportunity_trigger__c            AS is_renewal_opportunity_trigger,
      seat_price__c                             AS seat_price,
      subscription_train_car__c                 AS is_subscription_train_car,
      subscription_type__c                      AS subscription_type,
      systemmodstamp                            AS system_mod_stamp,
      x14_days_past_end_date__c                 AS is_x14_days_past_end_date,
      zuora_original_subscription_id__c         AS zuora_original_subscription_id,
      zuora_subscription_id_history__c          AS zuora_subscription_id_history,
      zuora_sub_quote_type__c                   AS zuora_sub_quote_type,
      _sdc_batched_at                           AS _sdc_batched_at,
      _sdc_extracted_at                         AS _sdc_extracted_at,
      _sdc_received_at                          AS _sdc_received_at,
      _sdc_sequence                             AS _sdc_sequence,
      _sdc_table_version                        AS _sdc_table_version,
      current_renewal_arr_basis__c              AS current_renewal_arr_basis,
      current_open_renewal_id__c                AS current_open_renewal_id,
      stamped_arr_basis__c                      AS stamped_arr_basis,
      sub_to_basis_status__c                    AS sub_to_basis_status,
      suppress_update__c                        AS is_suppress_update,
      fy22_entering_arr__c                      AS fy22_entering_arr,
      fy22_entering_plan__c                     AS fy22_entering_plan,
      current_renewal_facts__c                  AS current_renewal_facts,
      open_renewal_created_by__c                AS open_renewal_created_by,
      temp_webstore_renewal_issue_status__c     AS temp_webstore_renewal_issue_status,
      renewal_status__c                         AS renewal_status,
      current_open_renewal_close_date__c        AS current_open_renewal_close_date,
      current_open_renewal_start_date__c        AS current_open_renewal_start_date,
      churn_status__c                           AS churn_status_,
      churn_opp_basis__c                        AS churn_opp_basis,
      pause_auto_renewal__c                     AS is_pause_auto_renewal,    
      super_sonics_toggle_result__c             AS super_sonics_toggle_result,
      pause_seat_reconciliation__c              AS is_pause_seat_reconciliation,
      subscription_reviewed__c                  AS subscription_reviewed,
      annualized_seat_price__c                  AS annualized_seat_price,
      product_tier_name_short__c                AS product_tier_name_short,
      billable_users__c                         AS billable_users,
      gs_time_to_first_10__c                    AS gs_time_to_first_10,
      gs_time_to_first_80__c                    AS gs_time_to_first_80,
      gs_time_to_first_ci__c                    AS gs_time_to_first_ci,
      gs_time_to_first_scm__c                   AS gs_time_to_first_scm,
      gs_time_to_first_dsc__c                   AS gs_time_to_first_dsc,
      gs_time_to_first_50__c                    AS gs_time_to_first_50,
      current_zuora_sub_version__c              AS current_zuora_sub_version,
      current_renewal_net_arr__c                AS current_renewal_net_arr,
      admin_double_linkage__c                   AS admin_double_linkage,
      next_chained_subscription__c              AS next_chained_subscription,
      estimated_underutilized_amount__c         AS estimated_underutilized_amount,
      utilization__c                            AS utilization,
      underutilized_seats__c                    AS underutilized_seats
    
    FROM source
)

SELECT *
FROM renamed2c:T16ef,WITH source AS (

    SELECT *
    FROM "RAW".salesforce_stitch.customer_subscription__c

), renamed AS (

    SELECT
      account__c                                AS account_id,
      activated_users__c                        AS activated_user_count,
      admin_phoenix_status__c                   AS admin_phoenix_status,  
      bpo_renewal_status__c                     AS bpo_renewal_status,
      closed_lost_renewal__c                    AS closed_lost_renewal_id,
      createdbyid                               AS created_by_id,
      createddate                               AS created_date,
      current_renewal_created_by__c             AS current_renewal_created_by,
      current_subscription_carr__c              AS current_subscription_carr,
      current_subscription_status__c            AS current_subscription_status,
      current_term_end_date__c                  AS current_term_end_date,
      current_term_start_date__c                AS current_term_start_date,
      current_zuora_subscription__c             AS current_zuora_subscription,
      current_zuora_sub_id__c                   AS current_zuora_subscription_id,
      customer_subscription_count__c            AS customer_subscription_count,
      entitled_seats__c                         AS entitled_seats,
      estimated_overage_amount__c               AS estimated_overage_amount,
      hosting_type__c                           AS hosting_type,
      id                                        AS customer_subscription_id,
      isdeleted                                 AS is_deleted,
      lastmodifiedbyid                          AS last_modified_by_id,
      lastmodifieddate                          AS last_modified_date,
      license_usage_report_date__c              AS license_usage_report_date,
      linkage_problem__c                        AS is_linkage_problem,
      name                                      AS name,
      ownerid                                   AS owner_id,
      plan_name__c                              AS plan_name,
      renewal_finder_skip__c                    AS is_renewal_finder_skip,
      renewal_finder_story__c                   AS renewal_finder_story,
      renewal_opportunity_trigger__c            AS is_renewal_opportunity_trigger,
      seat_price__c                             AS seat_price,
      subscription_train_car__c                 AS is_subscription_train_car,
      subscription_type__c                      AS subscription_type,
      systemmodstamp                            AS system_mod_stamp,
      x14_days_past_end_date__c                 AS is_x14_days_past_end_date,
      zuora_original_subscription_id__c         AS zuora_original_subscription_id,
      zuora_subscription_id_history__c          AS zuora_subscription_id_history,
      zuora_sub_quote_type__c                   AS zuora_sub_quote_type,
      _sdc_batched_at                           AS _sdc_batched_at,
      _sdc_extracted_at                         AS _sdc_extracted_at,
      _sdc_received_at                          AS _sdc_received_at,
      _sdc_sequence                             AS _sdc_sequence,
      _sdc_table_version                        AS _sdc_table_version,
      current_renewal_arr_basis__c              AS current_renewal_arr_basis,
      current_open_renewal_id__c                AS current_open_renewal_id,
      stamped_arr_basis__c                      AS stamped_arr_basis,
      sub_to_basis_status__c                    AS sub_to_basis_status,
      suppress_update__c                        AS is_suppress_update,
      fy22_entering_arr__c                      AS fy22_entering_arr,
      fy22_entering_plan__c                     AS fy22_entering_plan,
      current_renewal_facts__c                  AS current_renewal_facts,
      open_renewal_created_by__c                AS open_renewal_created_by,
      temp_webstore_renewal_issue_status__c     AS temp_webstore_renewal_issue_status,
      renewal_status__c                         AS renewal_status,
      current_open_renewal_close_date__c        AS current_open_renewal_close_date,
      current_open_renewal_start_date__c        AS current_open_renewal_start_date,
      churn_status__c                           AS churn_status_,
      churn_opp_basis__c                        AS churn_opp_basis,
      pause_auto_renewal__c                     AS is_pause_auto_renewal,    
      super_sonics_toggle_result__c             AS super_sonics_toggle_result,
      pause_seat_reconciliation__c              AS is_pause_seat_reconciliation,
      subscription_reviewed__c                  AS subscription_reviewed,
      annualized_seat_price__c                  AS annualized_seat_price,
      product_tier_name_short__c                AS product_tier_name_short,
      billable_users__c                         AS billable_users,
      gs_time_to_first_10__c                    AS gs_time_to_first_10,
      gs_time_to_first_80__c                    AS gs_time_to_first_80,
      gs_time_to_first_ci__c                    AS gs_time_to_first_ci,
      gs_time_to_first_scm__c                   AS gs_time_to_first_scm,
      gs_time_to_first_dsc__c                   AS gs_time_to_first_dsc,
      gs_time_to_first_50__c                    AS gs_time_to_first_50,
      current_zuora_sub_version__c              AS current_zuora_sub_version,
      current_renewal_net_arr__c                AS current_renewal_net_arr,
      admin_double_linkage__c                   AS admin_double_linkage,
      next_chained_subscription__c              AS next_chained_subscription,
      estimated_underutilized_amount__c         AS estimated_underutilized_amount,
      utilization__c                            AS utilization,
      underutilized_seats__c                    AS underutilized_seats
    
    FROM source
)

SELECT *
FROM renamed2d:Te2f,{{ config({
    "alias": "zuora_account_source"
}) }}

-- depends_on: {{ ref('zuora_excluded_accounts') }}
WITH source AS (

    SELECT *
    FROM {{ source('zuora', 'account') }}

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("{{this.database}}".{{target.schema}}.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamed2e:Tde2,

-- depends_on: "PROD".legacy.zuora_excluded_accounts
WITH source AS (

    SELECT *
    FROM "RAW".zuora_stitch.account

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("PREP".preparation.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamed2f:T14fa,{{ config({
    "alias": "zuora_subscription_source"
}) }}

-- depends_on: {{ ref('zuora_excluded_accounts') }}

WITH source AS (

    SELECT *
    FROM {{ source('zuora', 'subscription') }}

), renamed AS (

    SELECT
      id                                          AS subscription_id,
      subscriptionversionamendmentid              AS amendment_id,
      name                                        AS subscription_name,
        {{zuora_slugify("name")}}                 AS subscription_name_slugify,
      nullif(gitlabnamespacename__c, '')          AS namespace_name,
      --keys
      accountid                                   AS account_id,
      creatoraccountid                            AS creator_account_id,
      creatorinvoiceownerid                       AS creator_invoice_owner_id,
      invoiceownerid                              AS invoice_owner_id,
      nullif(opportunityid__c, '')                AS sfdc_opportunity_id,
      nullif(opportunityname__qt, '')             AS crm_opportunity_name,
      nullif(originalid, '')                      AS original_id,
      nullif(previoussubscriptionid, '')          AS previous_subscription_id,
      nullif(recurlyid__c, '')                    AS sfdc_recurly_id,
      cpqbundlejsonid__qt                         AS cpq_bundle_json_id,
      nullif(gitlabnamespaceid__c, '')            AS namespace_id,

      -- info
      status                                      AS subscription_status,
      autorenew                                   AS auto_renew_native_hist,
      autorenew__c                                AS auto_renew_customerdot_hist,
      version                                     AS version,
      termtype                                    AS term_type,
      notes                                       AS notes,
      isinvoiceseparate                           AS is_invoice_separate,
      currentterm                                 AS current_term,
      currenttermperiodtype                       AS current_term_period_type,
      endcustomerdetails__c                       AS sfdc_end_customer_details,
      eoastarterbronzeofferaccepted__c            AS eoa_starter_bronze_offer_accepted,
      turnoncloudlicensing__c                     AS turn_on_cloud_licensing,
      -- turnonusagepingrequiredmetrics__c           AS turn_on_usage_ping_required_metrics,
      turnonoperationalmetrics__c                 AS turn_on_operational_metrics,
      contractoperationalmetrics__c               AS contract_operational_metrics,
      multiyeardealsubscriptionlinkage__c         AS multi_year_deal_subscription_linkage,

      --key_dates
      cancelleddate                               AS cancelled_date,
      contractacceptancedate                      AS contract_acceptance_date,
      contracteffectivedate                       AS contract_effective_date,
      initialterm                                 AS initial_term,
      initialtermperiodtype                       AS initial_term_period_type,
      termenddate::DATE                           AS term_end_date,
      termstartdate::DATE                         AS term_start_date,
      subscriptionenddate::DATE                   AS subscription_end_date,
      subscriptionstartdate::DATE                 AS subscription_start_date,
      serviceactivationdate                       AS service_activiation_date,
      opportunityclosedate__qt                    AS opportunity_close_date,
      originalcreateddate                         AS original_created_date,

      --foreign synced info
      opportunityname__qt                         AS opportunity_name,
      purchase_order__c                           AS sfdc_purchase_order,
      --purchaseorder__c                            AS sfdc_purchase_order_,
      quotebusinesstype__qt                       AS quote_business_type,
      quotenumber__qt                             AS quote_number,
      quotetype__qt                               AS quote_type,

      --renewal info
      renewalsetting                              AS renewal_setting,
      renewal_subscription__c__c                  AS zuora_renewal_subscription_name,

      split(nullif({{zuora_slugify("renewal_subscription__c__c")}}, ''), '|')
                                                  AS zuora_renewal_subscription_name_slugify,
      renewalterm                                 AS renewal_term,
      renewaltermperiodtype                       AS renewal_term_period_type,
      exclude_from_renewal_report__c__c           AS exclude_from_renewal_report,
      contractautorenew__c                        AS contract_auto_renewal,
      turnonautorenew__c                          AS turn_on_auto_renewal,
      contractseatreconciliation__c               AS contract_seat_reconciliation,
      turnonseatreconciliation__c                 AS turn_on_seat_reconciliation,


      --metadata
      updatedbyid                                 AS updated_by_id,
      updateddate                                 AS updated_date,
      createdbyid                                 AS created_by_id,
      createddate                                 AS created_date,
      deleted                                     AS is_deleted,
      excludefromanalysis__c                      AS exclude_from_analysis

    FROM source

)

SELECT *
FROM renamed30:T16c1,

-- depends_on: "PROD".legacy.zuora_excluded_accounts

WITH source AS (

    SELECT *
    FROM "RAW".zuora_stitch.subscription

), renamed AS (

    SELECT
      id                                          AS subscription_id,
      subscriptionversionamendmentid              AS amendment_id,
      name                                        AS subscription_name,
        trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        name
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )                 AS subscription_name_slugify,
      nullif(gitlabnamespacename__c, '')          AS namespace_name,
      --keys
      accountid                                   AS account_id,
      creatoraccountid                            AS creator_account_id,
      creatorinvoiceownerid                       AS creator_invoice_owner_id,
      invoiceownerid                              AS invoice_owner_id,
      nullif(opportunityid__c, '')                AS sfdc_opportunity_id,
      nullif(opportunityname__qt, '')             AS crm_opportunity_name,
      nullif(originalid, '')                      AS original_id,
      nullif(previoussubscriptionid, '')          AS previous_subscription_id,
      nullif(recurlyid__c, '')                    AS sfdc_recurly_id,
      cpqbundlejsonid__qt                         AS cpq_bundle_json_id,
      nullif(gitlabnamespaceid__c, '')            AS namespace_id,

      -- info
      status                                      AS subscription_status,
      autorenew                                   AS auto_renew_native_hist,
      autorenew__c                                AS auto_renew_customerdot_hist,
      version                                     AS version,
      termtype                                    AS term_type,
      notes                                       AS notes,
      isinvoiceseparate                           AS is_invoice_separate,
      currentterm                                 AS current_term,
      currenttermperiodtype                       AS current_term_period_type,
      endcustomerdetails__c                       AS sfdc_end_customer_details,
      eoastarterbronzeofferaccepted__c            AS eoa_starter_bronze_offer_accepted,
      turnoncloudlicensing__c                     AS turn_on_cloud_licensing,
      -- turnonusagepingrequiredmetrics__c           AS turn_on_usage_ping_required_metrics,
      turnonoperationalmetrics__c                 AS turn_on_operational_metrics,
      contractoperationalmetrics__c               AS contract_operational_metrics,
      multiyeardealsubscriptionlinkage__c         AS multi_year_deal_subscription_linkage,

      --key_dates
      cancelleddate                               AS cancelled_date,
      contractacceptancedate                      AS contract_acceptance_date,
      contracteffectivedate                       AS contract_effective_date,
      initialterm                                 AS initial_term,
      initialtermperiodtype                       AS initial_term_period_type,
      termenddate::DATE                           AS term_end_date,
      termstartdate::DATE                         AS term_start_date,
      subscriptionenddate::DATE                   AS subscription_end_date,
      subscriptionstartdate::DATE                 AS subscription_start_date,
      serviceactivationdate                       AS service_activiation_date,
      opportunityclosedate__qt                    AS opportunity_close_date,
      originalcreateddate                         AS original_created_date,

      --foreign synced info
      opportunityname__qt                         AS opportunity_name,
      purchase_order__c                           AS sfdc_purchase_order,
      --purchaseorder__c                            AS sfdc_purchase_order_,
      quotebusinesstype__qt                       AS quote_business_type,
      quotenumber__qt                             AS quote_number,
      quotetype__qt                               AS quote_type,

      --renewal info
      renewalsetting                              AS renewal_setting,
      renewal_subscription__c__c                  AS zuora_renewal_subscription_name,

      split(nullif(trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        renewal_subscription__c__c
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        ), ''), '|')
                                                  AS zuora_renewal_subscription_name_slugify,
      renewalterm                                 AS renewal_term,
      renewaltermperiodtype                       AS renewal_term_period_type,
      exclude_from_renewal_report__c__c           AS exclude_from_renewal_report,
      contractautorenew__c                        AS contract_auto_renewal,
      turnonautorenew__c                          AS turn_on_auto_renewal,
      contractseatreconciliation__c               AS contract_seat_reconciliation,
      turnonseatreconciliation__c                 AS turn_on_seat_reconciliation,


      --metadata
      updatedbyid                                 AS updated_by_id,
      updateddate                                 AS updated_date,
      createdbyid                                 AS created_by_id,
      createddate                                 AS created_date,
      deleted                                     AS is_deleted,
      excludefromanalysis__c                      AS exclude_from_analysis

    FROM source

)

SELECT *
FROM renamed31:T78c,WITH last_account_snapshot AS (

    SELECT *
    FROM {{ ref('sfdc_account_snapshots_source') }}
    WHERE dbt_valid_to IS NULL

), unioned AS (


    SELECT 
      account_id,
      master_record_id,
      is_deleted
    FROM {{ ref('sfdc_account_source') }}

    UNION ALL

    /*
      Union in accounts which have been hard deleted but are captured in the snapshot models for completeness. 
    */

    SELECT 
      last_account_snapshot.account_id,
      last_account_snapshot.master_record_id,
      last_account_snapshot.is_deleted
    FROM last_account_snapshot
    LEFT JOIN {{ ref('sfdc_account_source') }}
      ON last_account_snapshot.account_id = sfdc_account_source.account_id
    WHERE sfdc_account_source.account_id IS NULL

), recursive_cte(account_id, master_record_id, is_deleted, lineage) AS (

    SELECT
      account_id,
      master_record_id,
      is_deleted,
      TO_ARRAY(account_id) AS lineage
    FROM unioned
    WHERE master_record_id IS NULL

    UNION ALL

    SELECT
      iter.account_id,
      iter.master_record_id,
      iter.is_deleted,
      ARRAY_INSERT(anchor.lineage, 0, iter.account_id)  AS lineage
    FROM recursive_cte AS anchor
    INNER JOIN unioned AS iter
      ON iter.master_record_id = anchor.account_id

), final AS (

    SELECT
      account_id                                         AS sfdc_account_id,
      lineage[ARRAY_SIZE(lineage) - 1]::VARCHAR          AS merged_account_id,
      is_deleted,
      IFF(merged_account_id != account_id, TRUE, FALSE)  AS is_merged,
      IFF(is_deleted AND NOT is_merged, TRUE, FALSE)     AS deleted_not_merged,
      --return final common dimension mapping,
      IFF(deleted_not_merged, '-1', merged_account_id)   AS dim_crm_account_id
    FROM recursive_cte

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mcooperDD",
    updated_by="@michellecooper",
    created_date="2020-11-23",
    updated_date="2023-04-13",
) }}32:T87b,WITH last_account_snapshot AS (

    SELECT *
    FROM "PROD".legacy.sfdc_account_snapshots_source
    WHERE dbt_valid_to IS NULL

), unioned AS (


    SELECT 
      account_id,
      master_record_id,
      is_deleted
    FROM "PREP".sfdc.sfdc_account_source

    UNION ALL

    /*
      Union in accounts which have been hard deleted but are captured in the snapshot models for completeness. 
    */

    SELECT 
      last_account_snapshot.account_id,
      last_account_snapshot.master_record_id,
      last_account_snapshot.is_deleted
    FROM last_account_snapshot
    LEFT JOIN "PREP".sfdc.sfdc_account_source
      ON last_account_snapshot.account_id = sfdc_account_source.account_id
    WHERE sfdc_account_source.account_id IS NULL

), recursive_cte(account_id, master_record_id, is_deleted, lineage) AS (

    SELECT
      account_id,
      master_record_id,
      is_deleted,
      TO_ARRAY(account_id) AS lineage
    FROM unioned
    WHERE master_record_id IS NULL

    UNION ALL

    SELECT
      iter.account_id,
      iter.master_record_id,
      iter.is_deleted,
      ARRAY_INSERT(anchor.lineage, 0, iter.account_id)  AS lineage
    FROM recursive_cte AS anchor
    INNER JOIN unioned AS iter
      ON iter.master_record_id = anchor.account_id

), final AS (

    SELECT
      account_id                                         AS sfdc_account_id,
      lineage[ARRAY_SIZE(lineage) - 1]::VARCHAR          AS merged_account_id,
      is_deleted,
      IFF(merged_account_id != account_id, TRUE, FALSE)  AS is_merged,
      IFF(is_deleted AND NOT is_merged, TRUE, FALSE)     AS deleted_not_merged,
      --return final common dimension mapping,
      IFF(deleted_not_merged, '-1', merged_account_id)   AS dim_crm_account_id
    FROM recursive_cte

)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2020-11-23'::DATE        AS model_created_date,
      '2023-04-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final33:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}34:T416,Used to simplify CTE imports in a model.

A large portion of import statements in a SQL model are simple `SELECT * FROM table`. Writing pure SQL is verbose and this macro aims to simplify the imports.

The macro accepts once argument which is a list of tuples where each tuple has the alias name and the table reference.

Below is an example and the expected output:

```sql

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_account','zuora_account_source'),
    ('zuora_contact','zuora_contact_source')
]) }}

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM {{ref('zuora_excluded_accounts')}}

)

```

```sql
WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".common.map_merged_crm_account

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

)

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM "PROD".legacy.zuora_excluded_accounts

)
```36:T1d7a,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
      ('map_merged_crm_account', 'map_merged_crm_account'),
      ('date_details', 'date_details'),
      ('zuora_account_source', 'zuora_account_source'),
      ('prep_billing_account_user', 'prep_billing_account_user'),
      ('sfdc_customer_subscription_source', 'sfdc_customer_subscription_source')

])}}

, zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@michellecooper",
    created_date="2021-01-07",
    updated_date="2023-04-12"
) }}37:T1f00,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), date_details AS (

    SELECT * 
    FROM "PROD".legacy.date_details

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

), sfdc_customer_subscription_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_customer_subscription_source

)

, zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-07'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joinedc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.prep_subscription"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"prep_subscription"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","mnpi_exception",{"children":[["$","code",null,{"children":["$","a",null,{"children":"mnpi_exception"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.common_prep.prep_subscription"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"33 MB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 09:06UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"Creates a base view with generated keys for the subscription shared dimension and references in facts."}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":5,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":6,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":7,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":9,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":10,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":15,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":17,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":18,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":19,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":20,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":21,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":22,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":23,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":24,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"NAMESPACE_NAME":{"type":"TEXT","index":25,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_ID":{"type":"TEXT","index":26,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":27,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":28,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":29,"name":"WAS_PURCHASED_THROUGH_RESELLER","comment":null,"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":30,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":31,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":32,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":33,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":34,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":37,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":38,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":39,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":40,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":41,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":42,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":44,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":45,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":46,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":47,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":48,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":49,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":50,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"TURN_ON_USAGE_PING_REQUIRED_METRICS":{"type":"TEXT","index":51,"name":"TURN_ON_USAGE_PING_REQUIRED_METRICS","comment":null,"display_name":"turn_on_usage_ping_required_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":52,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":53,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":54,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":55,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":56,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":57,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":34212352,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_subscription.sql","original_file_path":"models/common_prep/prep_subscription.sql","name":"prep_subscription","alias":"prep_subscription","checksum":{"name":"sha256","checksum":"1769b1b9c9fad9c8514abcf0c021261c8f88d9797bd412568b7e9982fec2041a"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["prep_billing_account_user"],["prep_billing_account_user"],["sfdc_customer_subscription_source"],["sfdc_customer_subscription_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"Creates a base view with generated keys for the subscription shared dimension and references in facts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.5360272,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_subscription","label":"prep_subscription"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":6,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":7,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":9,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":10,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":14,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":15,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":16,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":17,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"NAMESPACE_ID":{"type":"TEXT","index":18,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":19,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":20,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":21,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":22,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":23,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":24,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":25,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":26,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":27,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":28,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":29,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":30,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":31,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":32,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":33,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":34,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":35,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"IS_QUESTIONABLE_OPPORTUNITY_MAPPING":{"type":"NUMBER","index":36,"name":"IS_QUESTIONABLE_OPPORTUNITY_MAPPING","comment":null,"display_name":"is_questionable_opportunity_mapping"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":37,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":38,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":39,"name":"was_purchased_through_reseller","comment":null,"description":"Boolean field that indicates whether the subscription was purchased through a reseller. If TRUE, the `invoice_owner_account` will contain the name of the reseller.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":40,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":41,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":42,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":43,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":44,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":45,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":46,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":47,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"TERM_START_DATE":{"type":"DATE","index":48,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":49,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":50,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":51,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":52,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":53,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":54,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":55,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":56,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"SUBSCRIPTION_LINEAGE":{"type":"TEXT","index":57,"name":"SUBSCRIPTION_LINEAGE","comment":null,"display_name":"subscription_lineage"},"OLDEST_SUBSCRIPTION_IN_COHORT":{"type":"TEXT","index":58,"name":"OLDEST_SUBSCRIPTION_IN_COHORT","comment":null,"display_name":"oldest_subscription_in_cohort"},"SUBSCRIPTION_COHORT_MONTH":{"type":"DATE","index":59,"name":"SUBSCRIPTION_COHORT_MONTH","comment":null,"display_name":"subscription_cohort_month"},"SUBSCRIPTION_COHORT_QUARTER":{"type":"DATE","index":60,"name":"SUBSCRIPTION_COHORT_QUARTER","comment":null,"display_name":"subscription_cohort_quarter"},"SUBSCRIPTION_COHORT_YEAR":{"type":"DATE","index":61,"name":"SUBSCRIPTION_COHORT_YEAR","comment":null,"display_name":"subscription_cohort_year"},"CREATED_BY":{"type":"TEXT","index":62,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":63,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":64,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":65,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":66,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":67,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"lineage":{"name":"lineage","description":"All the subscriptions subsquent to the primary subscription, separated by commas.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lineage"},"cohort_month":{"name":"cohort_month","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_month"},"cohort_quarter":{"name":"cohort_quarter","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_quarter"},"cohort_year":{"name":"cohort_year","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"cohort_year"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":36424192,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_subscription","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_amendment","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.map_subscription_opportunity","model.gitlab_snowflake.map_subscription_opportunity","model.gitlab_snowflake.map_subscription_lineage","model.gitlab_snowflake.map_subscription_lineage"]},"config":{"enabled":true,"alias":"dim_subscription","schema":"common","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_subscription.sql","original_file_path":"models/common/dimensions_shared/dim_subscription.sql","name":"dim_subscription","alias":"dim_subscription","checksum":{"name":"sha256","checksum":"44a135462088f0caceab046c41bf8e7354f2c148c50ecbee98d6658fddfeda60"},"tags":["mnpi_exception"],"refs":[["prep_amendment"],["prep_amendment"],["prep_subscription"],["prep_subscription"],["map_subscription_opportunity"],["map_subscription_opportunity"],["map_subscription_lineage"],["map_subscription_lineage"]],"sources":[],"metrics":[],"description":"Dimension table representing subscription details. The Zuora subscription is created and maintained as part of the broader Quote Creation business process and can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#3-quote-creation).\n\nData comes from [Zuora Documentation](https://www.zuora.com/developer/api-reference/#tag/Subscriptions).\n\nThe grain of the table is the version of a Zuora subscription.\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"],"alias":"dim_subscription"},"created_at":1689033750.8111765,"compiled_sql":"$14","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_subscription","label":"dim_subscription"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_USAGE_SELF_MANAGED_SEAT_LINK","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"CUSTOMERS_DB_ORDER_ID":{"type":"NUMBER","index":1,"name":"customers_db_order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customers_db_order_id"},"ORDER_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"order_subscription_id","comment":null,"description":"Zuora subscription ID listed on the order in the Customers source database.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_subscription_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":3,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":4,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":5,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_previous"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":8,"name":"dim_product_tier_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_product_tier_id"},"ACTIVE_USER_COUNT":{"type":"NUMBER","index":9,"name":"active_user_count","comment":null,"description":"Count of active users currently on the customer's subcription. A count of 0 indicates that Seat Link has been turned off by the customer.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"active_user_count"},"LICENSE_USER_COUNT":{"type":"NUMBER","index":10,"name":"license_user_count","comment":null,"description":"Count of licensed users purchased with the customer's subcription.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"license_user_count"},"MAX_HISTORICAL_USER_COUNT":{"type":"NUMBER","index":11,"name":"max_historical_user_count","comment":null,"description":"Maximum active user count ever reported over the lifetime of the customer's subcription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"max_historical_user_count"},"REPORT_DATE":{"type":"DATE","index":12,"name":"report_date","comment":null,"description":"Day on which Seat Link usage data is reported. Should always be last day of month for historical months.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"report_date"},"IS_LAST_SEAT_LINK_REPORT_PER_SUBSCRIPTION":{"type":"BOOLEAN","index":13,"name":"is_last_seat_link_report_per_subscription","comment":null,"description":"Flags if the row contains the most recent seat link record received for the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_seat_link_report_per_subscription"},"IS_LAST_SEAT_LINK_REPORT_PER_ORDER":{"type":"BOOLEAN","index":14,"name":"is_last_seat_link_report_per_order","comment":null,"description":"Flags if the row contains the most recent seat link record received for the order.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_last_seat_link_report_per_order"},"IS_SUBSCRIPTION_IN_ZUORA":{"type":"BOOLEAN","index":15,"name":"is_subscription_in_zuora","comment":null,"description":"Flags rows where the `zuora_subscription_id` from `customers_db_orders_source` is not found in `dim_subscription`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_subscription_in_zuora"},"IS_RATE_PLAN_IN_ZUORA":{"type":"BOOLEAN","index":16,"name":"is_rate_plan_in_zuora","comment":null,"description":"Flags rows where the `product_rate_plan_id` from `customers_db_orders_source` is not found in `dim_product_tier`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_rate_plan_in_zuora"},"IS_ACTIVE_USER_COUNT_AVAILABLE":{"type":"BOOLEAN","index":17,"name":"is_active_user_count_available","comment":null,"description":"Flags rows where `active_user_count` is NULL in source.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_active_user_count_available"},"CREATED_BY":{"type":"TEXT","index":18,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":19,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":20,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":21,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":22,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:09UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":42411008,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_usage_self_managed_seat_link","raw_sql":"$15","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_license_seat_links_source","model.gitlab_snowflake.customers_db_license_seat_links_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_usage_self_managed_seat_link"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_usage_self_managed_seat_link.sql","original_file_path":"models/common_prep/prep_usage_self_managed_seat_link.sql","name":"prep_usage_self_managed_seat_link","alias":"prep_usage_self_managed_seat_link","checksum":{"name":"sha256","checksum":"f7b71249aff0ad7a0ac6758daeb6c820bb114f578ffa456ff518ad450b7d4204"},"tags":["mnpi_exception"],"refs":[["customers_db_license_seat_links_source"],["customers_db_license_seat_links_source"],["customers_db_orders_source"],["customers_db_orders_source"],["prep_subscription"],["prep_subscription"],["dim_product_detail"],["dim_product_detail"]],"sources":[],"metrics":[],"description":"This prep table contains Seat Link data at a daily grain for downstream aggregation and summarization, as well as flags for data quality.\n\nSelf-managed EE instances send [Seat Link](https://docs.gitlab.com/ee/subscriptions/self_managed/#seat-link) usage data to [CustomerDot](https://gitlab.com/gitlab-org/customers-gitlab-com) on a daily basis. This information includes a count of active users and a maximum count of users historically in order to assist the [true up process](https://docs.gitlab.com/ee/subscriptions/self_managed/#users-over-license). Additional details can be found in [this doc](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/doc/reconciliations.md).\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_usage_self_managed_seat_link.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.591012,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_usage_self_managed_seat_link","label":"prep_usage_self_managed_seat_link"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_PING_INSTANCE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_ID":{"type":"TEXT","index":1,"name":"ping_instance_id","comment":null,"description":"The unique composite ID for the fct_ping_instance model consisting of dim_ping_instance_id","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ping_instance_id"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":2,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"UPLOADED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"uploaded_at","comment":null,"description":"Column `uploaded_at` (`TIMESTAMP` data type) represent the moment WHEN the record is ingested into Snowflake. \nThe main motivation for introducing this column is for a few reasons:\n1. Be able to track back the exact date and time of data ingesting _(this information wasn't known to us)_\n1. Improving incremental load using `uploaded_at` column \n1. Support \"late_arriving\" ping automatically, without the need to full-refresh a full lineage","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"uploaded_at"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":5,"name":"dim_product_tier_id","comment":null,"description":"The unique identifier of a product tier, easily joined to `dim_product_tier`. This will reflect the tier of the installation at time of ping creation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":6,"name":"dim_subscription_id","comment":null,"description":"The unique identifier of a subscription, easily joined to `dim_subscription`. This is defined as the subscription_id associated with the license, with `license_subscription_id` from the ping payload as a fallback value.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_crm_account_id","comment":null,"description":"The unique identifier of a crm account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":8,"name":"dim_parent_crm_account_id","comment":null,"description":"The identifier of the ultimate parent account, easily joined to `dim_crm_account`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_parent_crm_account_id"},"DIM_LOCATION_COUNTRY_ID":{"type":"NUMBER","index":9,"name":"dim_location_country_id","comment":null,"description":"The unique identifier of a country, easily joined to `dim_location_country`. The location is associated with the IP address of the ping.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_location_country_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":10,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":11,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_HOST_ID":{"type":"NUMBER","index":12,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":13,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":14,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"DIM_APP_RELEASE_MAJOR_MINOR_SK":{"type":"TEXT","index":15,"name":"dim_app_release_major_minor_sk","comment":null,"description":"Surrogate key of dim_app_release_major_minor. Currently identified by hashing the major_minor_version field combined with the application field.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_app_release_major_minor_sk"},"DIM_LATEST_AVAILABLE_APP_RELEASE_MAJOR_MINOR_SK":{"type":"TEXT","index":16,"name":"dim_latest_available_app_release_major_minor_sk","comment":null,"description":"The latest avaiable dim_app_release_major_minor_sk at the moment the ping is sent.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_latest_available_app_release_major_minor_sk"},"LICENSE_SHA256":{"type":"TEXT","index":17,"name":"license_sha256","comment":null,"description":"The SHA-256 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"LICENSE_MD5":{"type":"TEXT","index":18,"name":"license_md5","comment":null,"description":"The md5 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_BILLABLE_USERS":{"type":"NUMBER","index":19,"name":"license_billable_users","comment":null,"description":"The count of active users who can be billed for. Guest users and bots are not included. This value comes from the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_billable_users"},"INSTANCE_USER_COUNT":{"type":"NUMBER","index":20,"name":"instance_user_count","comment":null,"description":"The number of active users existing in the installation. In this case \"active\" is referring to a user's state (ex. not blocked) as opposed to an indication of user activity with the product","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"instance_user_count"},"INSTALLATION_CREATION_DATE":{"type":"TIMESTAMP_NTZ","index":21,"name":"installation_creation_date","comment":null,"description":"Based off of the [`installation_creation_date`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/config/metrics/license/20230228110448_installation_creation_date.yml) \nService Ping metric. For installations where the root user (id = 1) is not deleted, it returns the root user creation date. For installations where the root user \nis deleted, it returns the earliest available user creation date.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"installation_creation_date"},"HISTORICAL_MAX_USER_COUNT":{"type":"NUMBER","index":22,"name":"historical_max_user_count","comment":null,"description":"The peak active (defined as non-blocked) user count ever reported over the lifetime of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"historical_max_user_count"},"LICENSE_USER_COUNT":{"type":"NUMBER","index":23,"name":"license_user_count","comment":null,"description":"Count of licensed users purchased with the customer's subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_user_count"},"HOSTNAME":{"type":"TEXT","index":24,"name":"hostname","comment":null,"description":"The name (URL) of the host. This appears as `hostname` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"hostname"},"UMAU_VALUE":{"type":"NUMBER","index":25,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"DIM_SUBSCRIPTION_LICENSE_ID":{"type":"TEXT","index":26,"name":"dim_subscription_license_id","comment":null,"description":"The unique identifier of a license subscription. This appears as `license_subscription_id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_license_id"},"IS_TRIAL":{"type":"BOOLEAN","index":27,"name":"is_trial","comment":null,"description":"Boolean flag which is set to True if the installation has a valid trial license at Service Ping creation. This is defined as `IFF(ping_created_at < license_trial_ends_on, TRUE, FALSE)`.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_trial"},"PRODUCT_TIER":{"type":"TEXT","index":28,"name":"product_tier","comment":null,"description":"The product tier of the ping, inferred from the edition and the plan saved in the license (Core, Starter, Premium, Ultimate). `Core` is synonymous with `Free`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier"},"MAIN_EDITION_PRODUCT_TIER":{"type":"TEXT","index":29,"name":"main_edition_product_tier","comment":null,"description":"The main edition of GitLab on the installation (EE, CE), also referred to as distribution","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"main_edition_product_tier"},"DATA_SOURCE":{"type":"TEXT","index":30,"name":"data_source","comment":null,"description":"The source application where the data was extracted from (ex. GITLAB_DOTCOM, VERSION_DB)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_source"},"CREATED_BY":{"type":"TEXT","index":31,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":32,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":33,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":34,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":35,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":36,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"ping_type":{"name":"ping_type","description":"Indicates whether the ping payload was generated by a manual or automated process, and has three potential values: 'SaaS - Manual', 'SaaS - Automated', and 'Self-Managed'. This field will only have the 'SaaS - Manual' value for the GitLab SaaS production installation (dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7') before February 19, 2023.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_type"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:49UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4500090368,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_ping_instance","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt.is_incremental","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_license","model.gitlab_snowflake.prep_license","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.map_ip_to_country","model.gitlab_snowflake.map_ip_to_country","model.gitlab_snowflake.prep_location_country","model.gitlab_snowflake.prep_location_country","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.prep_ping_instance","model.gitlab_snowflake.prep_ping_instance","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.prep_app_release_major_minor","model.gitlab_snowflake.prep_app_release_major_minor","model.gitlab_snowflake.dim_installation","model.gitlab_snowflake.dim_installation"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"ping_instance_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_ping_instance"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_ping_instance.sql","original_file_path":"models/common/facts_product_and_engineering/fct_ping_instance.sql","name":"fct_ping_instance","alias":"fct_ping_instance","checksum":{"name":"sha256","checksum":"3b8a4489d22aabaccce2f80a34ab6c096a7c1eeba133aca117e8ab699685fb3e"},"tags":["product","mnpi_exception"],"refs":[["prep_license"],["prep_license"],["prep_subscription"],["prep_subscription"],["dim_date"],["dim_date"],["map_ip_to_country"],["map_ip_to_country"],["prep_location_country"],["prep_location_country"],["dim_product_tier"],["dim_product_tier"],["prep_ping_instance"],["prep_ping_instance"],["dim_crm_account"],["dim_crm_account"],["prep_app_release_major_minor"],["prep_app_release_major_minor"],["dim_installation"],["dim_installation"]],"sources":[],"metrics":[],"description":"$18","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_ping_instance.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product","mnpi_exception"],"unique_key":"ping_instance_id"},"created_at":1689033751.5551186,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_ping_instance","label":"fct_ping_instance"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"BDG_SELF_MANAGED_ORDER_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"ORDER_ID":{"type":"NUMBER","index":2,"name":"order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_id"},"SUBSCRIPTION_ID_ORDER":{"type":"TEXT","index":3,"name":"subscription_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_id_order"},"CUSTOMER_ID":{"type":"NUMBER","index":4,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID_ORDER":{"type":"TEXT","index":5,"name":"product_rate_plan_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_order"},"DIM_PRODUCT_TIER_ID_ORDER":{"type":"TEXT","index":6,"name":"dim_product_tier_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_order"},"PRODUCT_TIER_NAME_ORDER":{"type":"TEXT","index":7,"name":"product_tier_name_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_order"},"IS_ORDER_ACTIVE":{"type":"BOOLEAN","index":8,"name":"IS_ORDER_ACTIVE","comment":null,"display_name":"is_order_active"},"ORDER_START_DATE":{"type":"TIMESTAMP_NTZ","index":9,"name":"order_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"TIMESTAMP_NTZ","index":10,"name":"order_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_end_date"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":11,"name":"order_is_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_is_trial"},"DIM_PRODUCT_TIER_ID_WITH_TRIAL":{"type":"TEXT","index":12,"name":"dim_product_tier_id_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_with_trial"},"PRODUCT_TIER_NAME_WITH_TRIAL":{"type":"TEXT","index":13,"name":"product_tier_name_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_with_trial"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":14,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":15,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":16,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":17,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":18,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":19,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"IS_SUBSCRIPTION_ACTIVE":{"type":"BOOLEAN","index":20,"name":"is_subscription_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_subscription_active"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":21,"name":"subscription_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":22,"name":"subscription_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"PRODUCT_RATE_PLAN_ID_SUBSCRIPTION":{"type":"TEXT","index":23,"name":"product_rate_plan_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_subscription"},"DIM_PRODUCT_TIER_ID_SUBSCRIPTION":{"type":"TEXT","index":24,"name":"dim_product_tier_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_subscription"},"PRODUCT_TIER_NAME_SUBSCRIPTION":{"type":"TEXT","index":25,"name":"product_tier_name_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_subscription"},"ORDER_SUBSCRIPTION_MATCH_STATUS":{"type":"TEXT","index":26,"name":"ORDER_SUBSCRIPTION_MATCH_STATUS","comment":null,"display_name":"order_subscription_match_status"},"CREATED_BY":{"type":"TEXT","index":27,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":28,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":29,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":30,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":31,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":32,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"namespace_id_order":{"name":"namespace_id_order","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id_order"},"count_of_tiers_per_subscription":{"name":"count_of_tiers_per_subscription","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_of_tiers_per_subscription"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:19UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":22706688,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_self_managed_order_subscription","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.bdg_subscription_product_rate_plan","model.gitlab_snowflake.bdg_subscription_product_rate_plan"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","bridge","bdg_self_managed_order_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/bridge/bdg_self_managed_order_subscription.sql","original_file_path":"models/common/bridge/bdg_self_managed_order_subscription.sql","name":"bdg_self_managed_order_subscription","alias":"bdg_self_managed_order_subscription","checksum":{"name":"sha256","checksum":"78e4d71af6a42e954bec933341481079f88b0806a1610909a52cdeb4442857f1"},"tags":["product","mnpi_exception"],"refs":[["prep_subscription"],["prep_subscription"],["customers_db_orders_source"],["customers_db_orders_source"],["prep_product_tier"],["prep_product_tier"],["dim_product_detail"],["dim_product_detail"],["fct_mrr_with_zero_dollar_charges"],["fct_mrr_with_zero_dollar_charges"],["bdg_subscription_product_rate_plan"],["bdg_subscription_product_rate_plan"]],"sources":[],"metrics":[],"description":"$1b","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/bridge/bdg_self_managed_order_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033750.5207949,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.bdg_self_managed_order_subscription","label":"bdg_self_managed_order_subscription"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_SUBSCRIPTION_OPPORTUNITY_MAPPING","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_billing_account_id","comment":null,"description":"Unique identifier of a Zuora Billing account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":3,"name":"subscription_name","comment":null,"description":"Unique name of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":4,"name":"subscription_sales_type","comment":null,"description":"Self-Service or Sales-Assisted, as defined by the Zuora user who created the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_sales_type"},"SUBSCRIPTION_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"subscription_account_id","comment":null,"description":"Unique identifier of a SFDC account, as associated with the dim_subscription_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_account_id"},"SUBSCRIPTION_PARENT_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"subscription_parent_account_id","comment":null,"description":"Unique identifier of an ultimate parent SFDC account, as associated with the dim_subscription_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_parent_account_id"},"INVOICE_OPP_ACCOUNT_ID_FORWARD":{"type":"TEXT","index":7,"name":"invoice_opp_account_id_forward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's invoice.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_account_id_forward"},"INVOICE_OPP_ACCOUNT_ID_BACKWARD":{"type":"TEXT","index":8,"name":"invoice_opp_account_id_backward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's invoice, as filled in backwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_account_id_backward"},"QUOTE_OPP_ACCOUNT_ID_FORWARD":{"type":"TEXT","index":9,"name":"quote_opp_account_id_forward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's invoice, as filled in forwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_account_id_forward"},"QUOTE_OPP_ACCOUNT_ID_BACKWARD":{"type":"TEXT","index":10,"name":"quote_opp_account_id_backward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's quote.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_account_id_backward"},"SUBSCRIPTION_OPP_NAME_OPP_ACCOUNT_ID_FORWARD":{"type":"TEXT","index":11,"name":"subscription_opp_name_opp_account_id_forward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's quote, as filled in forwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_opp_name_opp_account_id_forward"},"SUBSCRIPTION_OPP_NAME_OPP_ACCOUNT_ID_BACKWARD":{"type":"TEXT","index":12,"name":"subscription_opp_name_opp_account_id_backward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's quote, as filled in backwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_opp_name_opp_account_id_backward"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":13,"name":"subscription_version","comment":null,"description":"Version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"TERM_START_DATE":{"type":"DATE","index":14,"name":"term_start_date","comment":null,"description":"Subscription's term start date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":15,"name":"term_end_date","comment":null,"description":"Subscription's term end date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"term_end_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":16,"name":"subscription_start_date","comment":null,"description":"Date the subscription begins","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":17,"name":"subscription_end_date","comment":null,"description":"Date the subscription ends","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":18,"name":"subscription_status","comment":null,"description":"Subscription status (active, expired, etc.)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_status"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":19,"name":"subscription_created_date","comment":null,"description":"Date the subscription was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_created_date"},"SUBSCRIPTION_SOURCE_OPP_ID":{"type":"TEXT","index":20,"name":"subscription_source_opp_id","comment":null,"description":"Opportunity_id found on the subscription object","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_source_opp_id"},"SUBSCRIPTION_OPP_ID":{"type":"TEXT","index":21,"name":"subscription_opp_id","comment":null,"description":"Opportunity_id for self-service subscriptions only since this is considered to have high fidelity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_opp_id"},"INVOICE_OPP_ID_FORWARD":{"type":"TEXT","index":22,"name":"invoice_opp_id_forward","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in forwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_forward"},"INVOICE_OPP_ID_BACKWARD":{"type":"TEXT","index":23,"name":"invoice_opp_id_backward","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in backwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_backward"},"INVOICE_OPP_ID_FORWARD_TERM_BASED":{"type":"TEXT","index":24,"name":"invoice_opp_id_forward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in forwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_forward_term_based"},"INVOICE_OPP_ID_BACKWARD_TERM_BASED":{"type":"TEXT","index":25,"name":"invoice_opp_id_backward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in backwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_backward_term_based"},"INVOICE_OPP_ID_FORWARD_SUB_NAME":{"type":"TEXT","index":26,"name":"invoice_opp_id_forward_sub_name","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in forwards based on the the subscription's name being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_forward_sub_name"},"UNFILLED_INVOICE_OPP_ID":{"type":"TEXT","index":27,"name":"unfilled_invoice_opp_id","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unfilled_invoice_opp_id"},"QUOTE_OPP_ID_FORWARD":{"type":"TEXT","index":28,"name":"quote_opp_id_forward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in forwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_forward"},"QUOTE_OPP_ID_BACKWARD":{"type":"TEXT","index":29,"name":"quote_opp_id_backward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in backwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_backward"},"QUOTE_OPP_ID_FORWARD_TERM_BASED":{"type":"TEXT","index":30,"name":"quote_opp_id_forward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in forwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_forward_term_based"},"QUOTE_OPP_ID_BACKWARD_TERM_BASED":{"type":"TEXT","index":31,"name":"quote_opp_id_backward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in backwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_backward_term_based"},"QUOTE_OPP_ID_FORWARD_SUB_NAME":{"type":"TEXT","index":32,"name":"quote_opp_id_forward_sub_name","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in forwards based on the the subscription's name being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_forward_sub_name"},"UNFILLED_QUOTE_OPP_ID":{"type":"TEXT","index":33,"name":"unfilled_quote_opp_id","comment":null,"description":"Unique identifier of a opportunity from subscription's quote.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unfilled_quote_opp_id"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_FORWARD":{"type":"TEXT","index":34,"name":"subscription_quote_number_opp_id_forward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in forwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_forward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_BACKWARD":{"type":"TEXT","index":35,"name":"subscription_quote_number_opp_id_backward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in backwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_backward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_FORWARD_TERM_BASED":{"type":"TEXT","index":36,"name":"subscription_quote_number_opp_id_forward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in forwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_forward_term_based"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_BACKWARD_TERM_BASED":{"type":"TEXT","index":37,"name":"subscription_quote_number_opp_id_backward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in backwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_backward_term_based"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_FORWARD_SUB_NAME":{"type":"TEXT","index":38,"name":"subscription_quote_number_opp_id_forward_sub_name","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in forwards based on the the subscription's name being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_forward_sub_name"},"UNFILLED_SUBSCRIPTION_QUOTE_NUMBER_OPP_ID":{"type":"TEXT","index":39,"name":"unfilled_subscription_quote_number_opp_id","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unfilled_subscription_quote_number_opp_id"},"COMBINED_OPPORTUNITY_ID":{"type":"TEXT","index":40,"name":"combined_opportunity_id","comment":null,"description":"Taking all of the potential opportunity ids, choose the best fit based on rules approved by the Data Team and Enterprise Apps.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"combined_opportunity_id"},"INVOICE_OPP_CREATED_DATE_FORWARD":{"type":"TIMESTAMP_TZ","index":41,"name":"INVOICE_OPP_CREATED_DATE_FORWARD","comment":null,"display_name":"invoice_opp_created_date_forward"},"INVOICE_OPP_CREATED_DATE_BACKWARD":{"type":"TIMESTAMP_TZ","index":42,"name":"INVOICE_OPP_CREATED_DATE_BACKWARD","comment":null,"display_name":"invoice_opp_created_date_backward"},"QUOTE_OPP_CREATED_DATE_FORWARD":{"type":"TIMESTAMP_TZ","index":43,"name":"QUOTE_OPP_CREATED_DATE_FORWARD","comment":null,"display_name":"quote_opp_created_date_forward"},"QUOTE_OPP_CREATED_DATE_BACKWARD":{"type":"TIMESTAMP_TZ","index":44,"name":"QUOTE_OPP_CREATED_DATE_BACKWARD","comment":null,"display_name":"quote_opp_created_date_backward"},"INVOICE_OPP_TOTAL_CONTRACT_VALUE_FORWARD":{"type":"FLOAT","index":45,"name":"INVOICE_OPP_TOTAL_CONTRACT_VALUE_FORWARD","comment":null,"display_name":"invoice_opp_total_contract_value_forward"},"INVOICE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD":{"type":"FLOAT","index":46,"name":"INVOICE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD","comment":null,"display_name":"invoice_opp_total_contract_value_backward"},"QUOTE_OPP_TOTAL_CONTRACT_VALUE_FORWARD":{"type":"FLOAT","index":47,"name":"QUOTE_OPP_TOTAL_CONTRACT_VALUE_FORWARD","comment":null,"display_name":"quote_opp_total_contract_value_forward"},"QUOTE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD":{"type":"FLOAT","index":48,"name":"QUOTE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD","comment":null,"display_name":"quote_opp_total_contract_value_backward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_FORWARD":{"type":"FLOAT","index":49,"name":"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_FORWARD","comment":null,"display_name":"subscription_quote_number_opp_total_contract_value_forward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_BACKWARD":{"type":"FLOAT","index":50,"name":"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_BACKWARD","comment":null,"display_name":"subscription_quote_number_opp_total_contract_value_backward"},"INVOICE_NUMBER":{"type":"TEXT","index":51,"name":"INVOICE_NUMBER","comment":null,"display_name":"invoice_number"},"INVOICE_ITEM_CHARGE_AMOUNT":{"type":"FLOAT","index":52,"name":"INVOICE_ITEM_CHARGE_AMOUNT","comment":null,"display_name":"invoice_item_charge_amount"},"INVOICE_ITEM_QUANTITY":{"type":"FLOAT","index":53,"name":"INVOICE_ITEM_QUANTITY","comment":null,"display_name":"invoice_item_quantity"},"SOURCE":{"type":"TEXT","index":54,"name":"SOURCE","comment":null,"display_name":"source"},"OPP_ID_REMOVE_SALESFORCE_URL":{"type":"TEXT","index":55,"name":"OPP_ID_REMOVE_SALESFORCE_URL","comment":null,"display_name":"opp_id_remove_salesforce_url"},"OPP_ID_SLUGIFY":{"type":"TEXT","index":56,"name":"OPP_ID_SLUGIFY","comment":null,"display_name":"opp_id_slugify"},"OPP_ID_NAME":{"type":"TEXT","index":57,"name":"OPP_ID_NAME","comment":null,"display_name":"opp_id_name"},"COMBINED_OPORTUNITY_ID_COALESCED":{"type":"TEXT","index":58,"name":"COMBINED_OPORTUNITY_ID_COALESCED","comment":null,"display_name":"combined_oportunity_id_coalesced"},"IS_QUESTIONABLE_OPPORTUNITY_MAPPING":{"type":"NUMBER","index":59,"name":"IS_QUESTIONABLE_OPPORTUNITY_MAPPING","comment":null,"display_name":"is_questionable_opportunity_mapping"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":60,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"CREATED_BY":{"type":"TEXT","index":61,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":62,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":63,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":64,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":65,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":66,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:25UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":81396736,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription_opportunity_mapping","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.zuora_slugify","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.prep_crm_account","model.gitlab_snowflake.prep_crm_account","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.sfdc_zqu_quote_source","model.gitlab_snowflake.sfdc_zqu_quote_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.fct_invoice_item","model.gitlab_snowflake.fct_invoice_item","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_subscription_opportunity_mapping"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_subscription_opportunity_mapping.sql","original_file_path":"models/common_prep/restricted_safe/prep_subscription_opportunity_mapping.sql","name":"prep_subscription_opportunity_mapping","alias":"prep_subscription_opportunity_mapping","checksum":{"name":"sha256","checksum":"6a4b875d8eab5c22953b9186f32741c547f764c6c0b2871273b2933a20fc827a"},"tags":["safe"],"refs":[["zuora_account_source"],["zuora_account_source"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["prep_subscription"],["prep_subscription"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["prep_crm_account"],["prep_crm_account"],["zuora_invoice_item_source"],["zuora_invoice_item_source"],["zuora_invoice_source"],["zuora_invoice_source"],["sfdc_zqu_quote_source"],["sfdc_zqu_quote_source"],["zuora_subscription_source"],["zuora_subscription_source"],["fct_invoice_item"],["fct_invoice_item"],["dim_crm_opportunity"],["dim_crm_opportunity"],["fct_crm_opportunity"],["fct_crm_opportunity"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["sfdc_opportunity_source"]],"sources":[],"metrics":[],"description":"$1e","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_subscription_opportunity_mapping.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033758.0619636,"compiled_sql":"$1f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_subscription_opportunity_mapping","label":"prep_subscription_opportunity_mapping"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"BDG_NAMESPACE_ORDER_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"ORDER_ID":{"type":"NUMBER","index":3,"name":"order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_id"},"NAMESPACE_ID_ORDER":{"type":"TEXT","index":4,"name":"namespace_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id_order"},"SUBSCRIPTION_ID_ORDER":{"type":"TEXT","index":5,"name":"subscription_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_id_order"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":7,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_type"},"DIM_PRODUCT_TIER_ID_NAMESPACE":{"type":"TEXT","index":8,"name":"dim_product_tier_id_namespace","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_namespace"},"PRODUCT_TIER_NAME_NAMESPACE":{"type":"TEXT","index":9,"name":"product_tier_name_namespace","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_namespace"},"IS_NAMESPACE_ACTIVE":{"type":"BOOLEAN","index":10,"name":"is_namespace_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_namespace_active"},"NAMESPACE_WAS_TRIAL":{"type":"BOOLEAN","index":11,"name":"namespace_was_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_was_trial"},"SAAS_TRIAL_START_DATE":{"type":"TIMESTAMP_NTZ","index":12,"name":"saas_trial_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_start_date"},"SAAS_TRIAL_EXPIRED_ON":{"type":"TIMESTAMP_NTZ","index":13,"name":"saas_trial_expired_on","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_expired_on"},"CUSTOMER_ID":{"type":"NUMBER","index":14,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID_ORDER":{"type":"TEXT","index":15,"name":"product_rate_plan_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_order"},"DIM_PRODUCT_TIER_ID_ORDER":{"type":"TEXT","index":16,"name":"dim_product_tier_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_order"},"PRODUCT_TIER_NAME_ORDER":{"type":"TEXT","index":17,"name":"product_tier_name_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_order"},"IS_ORDER_ACTIVE":{"type":"BOOLEAN","index":18,"name":"is_order_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_order_active"},"ORDER_START_DATE":{"type":"TIMESTAMP_NTZ","index":19,"name":"order_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"TIMESTAMP_NTZ","index":20,"name":"order_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_end_date"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":21,"name":"order_is_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_is_trial"},"DIM_PRODUCT_TIER_ID_WITH_TRIAL":{"type":"TEXT","index":22,"name":"dim_product_tier_id_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_with_trial"},"PRODUCT_TIER_NAME_WITH_TRIAL":{"type":"TEXT","index":23,"name":"product_tier_name_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_with_trial"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":24,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":25,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":26,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":27,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":28,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":29,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"IS_SUBSCRIPTION_ACTIVE":{"type":"BOOLEAN","index":30,"name":"is_subscription_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_subscription_active"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":31,"name":"subscription_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":32,"name":"subscription_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"PRODUCT_RATE_PLAN_ID_SUBSCRIPTION":{"type":"TEXT","index":33,"name":"product_rate_plan_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_subscription"},"DIM_PRODUCT_TIER_ID_SUBSCRIPTION":{"type":"TEXT","index":34,"name":"dim_product_tier_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_subscription"},"PRODUCT_TIER_NAME_SUBSCRIPTION":{"type":"TEXT","index":35,"name":"product_tier_name_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_subscription"},"COUNT_OF_TIERS_PER_SUBSCRIPTION":{"type":"NUMBER","index":36,"name":"count_of_tiers_per_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_of_tiers_per_subscription"},"NAMESPACE_ORDER_SUBSCRIPTION_MATCH_STATUS":{"type":"TEXT","index":37,"name":"namespace_order_subscription_match_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_order_subscription_match_status"},"CREATED_BY":{"type":"TEXT","index":38,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":39,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":40,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":41,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":42,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":43,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:41UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":508715520,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_namespace_order_subscription","raw_sql":"$20","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.bdg_subscription_product_rate_plan","model.gitlab_snowflake.bdg_subscription_product_rate_plan"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","bridge","bdg_namespace_order_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/bridge/bdg_namespace_order_subscription.sql","original_file_path":"models/common/bridge/bdg_namespace_order_subscription.sql","name":"bdg_namespace_order_subscription","alias":"bdg_namespace_order_subscription","checksum":{"name":"sha256","checksum":"c85a31ec010b70abd7ed0c5ce08bf4b5c909b97fbf3f892021066ab3311c72b3"},"tags":["product","mnpi_exception"],"refs":[["prep_namespace"],["prep_namespace"],["prep_subscription"],["prep_subscription"],["customers_db_orders_source"],["customers_db_orders_source"],["prep_product_tier"],["prep_product_tier"],["dim_product_detail"],["dim_product_detail"],["fct_mrr_with_zero_dollar_charges"],["fct_mrr_with_zero_dollar_charges"],["customers_db_trial_histories_source"],["customers_db_trial_histories_source"],["bdg_subscription_product_rate_plan"],["bdg_subscription_product_rate_plan"]],"sources":[],"metrics":[],"description":"$21","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/bridge/bdg_namespace_order_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033750.5057893,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.bdg_namespace_order_subscription","label":"bdg_namespace_order_subscription"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_PING_INSTANCE_METRIC","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"PING_INSTANCE_METRIC_ID":{"type":"TEXT","index":1,"name":"ping_instance_metric_id","comment":null,"description":"The unique composite ID for the service_ping_instance_metric model consisting of dim_ping_instance_id and metrics_path","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ping_instance_metric_id"},"DIM_PING_INSTANCE_ID":{"type":"TEXT","index":2,"name":"dim_ping_instance_id","comment":null,"description":"The unique identifier of the ping. This appears as `id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_instance_id"},"METRICS_PATH":{"type":"TEXT","index":3,"name":"metrics_path","comment":null,"description":"The unique JSON key path of the identifier of the metric in the Service Ping payload. This appears as `key_path` in the metric definition YAML files","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metrics_path"},"METRIC_VALUE":{"type":"VARIANT","index":4,"name":"metric_value","comment":null,"description":"The value associated with the metric path. In most models, metrics with a value of `-1` (those that timed out during ping generation) are set to `0`. See model description for confirmation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"metric_value"},"HAS_TIMED_OUT":{"type":"BOOLEAN","index":5,"name":"has_timed_out","comment":null,"description":"Boolean flag which is set to True if the metric timed out during Service Ping generation. In the ping payload, timed out metrics have a value of `-1`, but in most models the value is set to `0` (see model description for confirmation).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_timed_out"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":6,"name":"dim_product_tier_id","comment":null,"description":"The unique identifier of a product tier, easily joined to `dim_product_tier`. This will reflect the tier of the installation at time of ping creation.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":7,"name":"dim_subscription_id","comment":null,"description":"The unique identifier of a subscription, easily joined to `dim_subscription`. This is defined as the subscription_id associated with the license, with `license_subscription_id` from the ping payload as a fallback value.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_LOCATION_COUNTRY_ID":{"type":"NUMBER","index":8,"name":"dim_location_country_id","comment":null,"description":"The unique identifier of a country, easily joined to `dim_location_country`. The location is associated with the IP address of the ping.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_location_country_id"},"DIM_PING_DATE_ID":{"type":"NUMBER","index":9,"name":"dim_ping_date_id","comment":null,"description":"The ID of the Service Ping creation date, easily joined to `dim_date`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_ping_date_id"},"DIM_INSTANCE_ID":{"type":"TEXT","index":10,"name":"dim_instance_id","comment":null,"description":"The identifier of the instance, easily joined to `dim_installation`. This id is stored in the database of the installation and appears as `uuid` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_instance_id"},"DIM_HOST_ID":{"type":"NUMBER","index":11,"name":"dim_host_id","comment":null,"description":"The identifier of the host, easily joined to `dim_installation` or `dim_host`. There is a 1:1 relationship between hostname and dim_host_id, so it will be shared across installations with the same hostname.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_host_id"},"DIM_INSTALLATION_ID":{"type":"TEXT","index":12,"name":"dim_installation_id","comment":null,"description":"The unique identifier of the installation, easily joined to `dim_installation`. This id is the combination of `dim_host_id` and `dim_instance_id` and is considered the unique identifier of the installation for reporting and analysis","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_installation_id"},"DIM_LICENSE_ID":{"type":"NUMBER","index":13,"name":"dim_license_id","comment":null,"description":"The unique identifier of the license, easily joined to `dim_license`","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"LICENSE_MD5":{"type":"TEXT","index":14,"name":"license_md5","comment":null,"description":"The md5 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_SHA256":{"type":"TEXT","index":15,"name":"license_sha256","comment":null,"description":"The SHA-256 hash of the license file.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"PING_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"ping_created_at","comment":null,"description":"The timestamp when the ping was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_at"},"UPLOADED_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"uploaded_at","comment":null,"description":"Column `uploaded_at` (`TIMESTAMP` data type) represent the moment WHEN the record is ingested into Snowflake. \nThe main motivation for introducing this column is for a few reasons:\n1. Be able to track back the exact date and time of data ingesting _(this information wasn't known to us)_\n1. Improving incremental load using `uploaded_at` column \n1. Support \"late_arriving\" ping automatically, without the need to full-refresh a full lineage","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"uploaded_at"},"PING_CREATED_DATE":{"type":"DATE","index":18,"name":"ping_created_date","comment":null,"description":"The date when the ping was created (YYYY-MM-DD)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_created_date"},"UMAU_VALUE":{"type":"NUMBER","index":19,"name":"umau_value","comment":null,"description":"The unique monthly active user (UMAU) value for the installation (i.e., the value of the metric flagged as UMAU)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"umau_value"},"DIM_SUBSCRIPTION_LICENSE_ID":{"type":"TEXT","index":20,"name":"dim_subscription_license_id","comment":null,"description":"The unique identifier of a license subscription. This appears as `license_subscription_id` in the ping payload.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_license_id"},"IS_LICENSE_MAPPED_TO_SUBSCRIPTION":{"type":"BOOLEAN","index":21,"name":"is_license_mapped_to_subscription","comment":null,"description":"Data quality boolean flag set to True if the license table has a value in both license_id and subscription_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_license_mapped_to_subscription"},"IS_LICENSE_SUBSCRIPTION_ID_VALID":{"type":"BOOLEAN","index":22,"name":"is_license_subscription_id_valid","comment":null,"description":"Data quality boolean flag set to True if the subscription_id in the license table is valid (does it exist in the subscription table?)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_license_subscription_id_valid"},"IS_SERVICE_PING_LICENSE_IN_CUSTOMERDOT":{"type":"BOOLEAN","index":23,"name":"is_service_ping_license_in_customerDot","comment":null,"description":"Data quality boolean flag set to True if the license from Service Ping exist in CustomerDot.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_service_ping_license_in_customerDot"},"DATA_SOURCE":{"type":"TEXT","index":24,"name":"data_source","comment":null,"description":"The source application where the data was extracted from (ex. GITLAB_DOTCOM, VERSION_DB)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"data_source"},"PING_TYPE":{"type":"TEXT","index":25,"name":"ping_type","comment":null,"description":"Indicates whether the ping payload was generated by a manual or automated process, and has three potential values: 'SaaS - Manual', 'SaaS - Automated', and 'Self-Managed'. This field will only have the 'SaaS - Manual' value for the GitLab SaaS production installation (dim_installation_id = '8b52effca410f0a380b0fcffaa1260e7') before February 19, 2023.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ping_type"},"CREATED_BY":{"type":"TEXT","index":26,"name":"created_by","comment":null,"description":"The GitLab handle of the original model creator","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":27,"name":"updated_by","comment":null,"description":"The GitLab handle of the most recent model editor","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":28,"name":"model_created_date","comment":null,"description":"Manually input ISO date of when model was original created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":29,"name":"model_updated_date","comment":null,"description":"Manually input ISO date of when model was updated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":30,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":31,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:57UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1052945513984,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_ping_instance_metric","raw_sql":"$23","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.map_ip_to_country","model.gitlab_snowflake.map_ip_to_country","model.gitlab_snowflake.prep_location_country","model.gitlab_snowflake.prep_location_country","model.gitlab_snowflake.prep_ping_instance_flattened","model.gitlab_snowflake.prep_ping_instance_flattened","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.dim_product_tier","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_license","model.gitlab_snowflake.prep_license"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"ping_instance_metric_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_ping_instance_metric"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_ping_instance_metric.sql","original_file_path":"models/common/facts_product_and_engineering/fct_ping_instance_metric.sql","name":"fct_ping_instance_metric","alias":"fct_ping_instance_metric","checksum":{"name":"sha256","checksum":"e5750ce87072a17ffb346629198b6f3321ade816de2b3abcbbc58b6747022cb4"},"tags":["product","mnpi_exception"],"refs":[["prep_subscription"],["prep_subscription"],["dim_date"],["dim_date"],["map_ip_to_country"],["map_ip_to_country"],["prep_location_country"],["prep_location_country"],["prep_ping_instance_flattened"],["prep_ping_instance_flattened"],["dim_product_tier"],["dim_product_tier"],["prep_subscription"],["prep_subscription"],["prep_subscription"],["prep_subscription"],["prep_license"],["prep_license"]],"sources":[],"metrics":[],"description":"$24","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_ping_instance_metric.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product","mnpi_exception"],"unique_key":"ping_instance_metric_id"},"created_at":1689033751.3162186,"compiled_sql":"$25","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_ping_instance_metric","label":"fct_ping_instance_metric"},{"metadata":{"type":"VIEW","schema":"COMMON_MAPPING","name":"MAP_LICENSE_SUBSCRIPTION_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_LICENSE_ID":{"type":"NUMBER","index":1,"name":"dim_license_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_license_id"},"LICENSE_MD5":{"type":"TEXT","index":2,"name":"license_md5","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_md5"},"LICENSE_SHA256":{"type":"TEXT","index":3,"name":"license_sha256","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"license_sha256"},"IS_LICENSE_MAPPED_TO_SUBSCRIPTION":{"type":"BOOLEAN","index":4,"name":"IS_LICENSE_MAPPED_TO_SUBSCRIPTION","comment":null,"display_name":"is_license_mapped_to_subscription"},"IS_LICENSE_SUBSCRIPTION_ID_VALID":{"type":"BOOLEAN","index":5,"name":"IS_LICENSE_SUBSCRIPTION_ID_VALID","comment":null,"display_name":"is_license_subscription_id_valid"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":6,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":8,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"ultimate_parent_account_id":{"name":"ultimate_parent_account_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_account_id"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_license_subscription_account","raw_sql":"$26","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_license","model.gitlab_snowflake.dim_license","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account"]},"config":{"enabled":true,"alias":null,"schema":"common_mapping","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mapping","fqn":["gitlab_snowflake","common_mapping","map_license_subscription_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/map_license_subscription_account.sql","original_file_path":"models/common_mapping/map_license_subscription_account.sql","name":"map_license_subscription_account","alias":"map_license_subscription_account","checksum":{"name":"sha256","checksum":"0d465bf4f7b92f7f74b79fa8dcec4edd883386aa72b529a6253921a4a4e90f8a"},"tags":["mnpi_exception"],"refs":[["dim_license"],["dim_license"],["prep_subscription"],["prep_subscription"],["dim_crm_account"],["dim_crm_account"]],"sources":[],"metrics":[],"description":"Table with mapping keys for license_md5 to subscription_id to crm (Salesforce) account ids","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/map_license_subscription_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["mnpi_exception"]},"created_at":1689033765.641631,"compiled_sql":"$27","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mapping.map_license_subscription_account","label":"map_license_subscription_account"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"BDG_NAMESPACE_ORDER_SUBSCRIPTION_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_ORDER_ID":{"type":"NUMBER","index":3,"name":"dim_order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_order_id"},"SNAPSHOT_MONTH":{"type":"DATE","index":4,"name":"snapshot_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_month"},"NAMESPACE_ID_ORDER":{"type":"NUMBER","index":5,"name":"namespace_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id_order"},"SUBSCRIPTION_ID_ORDER":{"type":"TEXT","index":6,"name":"subscription_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_id_order"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":7,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":8,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_type"},"IS_NAMESPACE_ACTIVE":{"type":"BOOLEAN","index":9,"name":"is_namespace_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_namespace_active"},"NAMESPACE_WAS_TRIAL":{"type":"BOOLEAN","index":10,"name":"namespace_was_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_was_trial"},"SAAS_TRIAL_START_DATE":{"type":"TIMESTAMP_NTZ","index":11,"name":"saas_trial_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_start_date"},"SAAS_TRIAL_EXPIRED_ON":{"type":"TIMESTAMP_NTZ","index":12,"name":"saas_trial_expired_on","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_expired_on"},"CUSTOMER_ID":{"type":"NUMBER","index":13,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID_ORDER":{"type":"TEXT","index":14,"name":"product_rate_plan_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_order"},"DIM_PRODUCT_TIER_ID_ORDER":{"type":"TEXT","index":15,"name":"dim_product_tier_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_order"},"PRODUCT_TIER_NAME_ORDER":{"type":"TEXT","index":16,"name":"product_tier_name_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_order"},"IS_ORDER_ACTIVE":{"type":"BOOLEAN","index":17,"name":"is_order_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_order_active"},"ORDER_START_DATE":{"type":"DATE","index":18,"name":"order_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"DATE","index":19,"name":"order_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_end_date"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":20,"name":"order_is_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_is_trial"},"DIM_PRODUCT_TIER_ID_WITH_TRIAL":{"type":"TEXT","index":21,"name":"dim_product_tier_id_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_with_trial"},"PRODUCT_TIER_NAME_WITH_TRIAL":{"type":"TEXT","index":22,"name":"product_tier_name_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_with_trial"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":23,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":24,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":25,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":26,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":27,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":28,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"IS_SUBSCRIPTION_ACTIVE":{"type":"BOOLEAN","index":29,"name":"is_subscription_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_subscription_active"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":30,"name":"subscription_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":31,"name":"subscription_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"PRODUCT_RATE_PLAN_ID_SUBSCRIPTION":{"type":"TEXT","index":32,"name":"product_rate_plan_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_subscription"},"DIM_PRODUCT_TIER_ID_SUBSCRIPTION":{"type":"TEXT","index":33,"name":"dim_product_tier_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_subscription"},"PRODUCT_TIER_NAME_SUBSCRIPTION":{"type":"TEXT","index":34,"name":"product_tier_name_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_subscription"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"NAMESPACE_ORDER_SUBSCRIPTION_MATCH_STATUS":{"type":"TEXT","index":36,"name":"namespace_order_subscription_match_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_order_subscription_match_status"},"CREATED_BY":{"type":"TEXT","index":37,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":38,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":39,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":40,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":41,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":42,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"count_of_tiers_per_subscription":{"name":"count_of_tiers_per_subscription","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_of_tiers_per_subscription"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":11061814272,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_namespace_order_subscription_monthly","raw_sql":"$28","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.dim_order_hist","model.gitlab_snowflake.dim_order_hist","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.bdg_subscription_product_rate_plan","model.gitlab_snowflake.bdg_subscription_product_rate_plan"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","bridge","bdg_namespace_order_subscription_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/bridge/bdg_namespace_order_subscription_monthly.sql","original_file_path":"models/common/bridge/bdg_namespace_order_subscription_monthly.sql","name":"bdg_namespace_order_subscription_monthly","alias":"bdg_namespace_order_subscription_monthly","checksum":{"name":"sha256","checksum":"5f4c3a78e84214a24e8176a3841c4f22bddf2c92731d0cb3b50953ea5c31e5cf"},"tags":["product","mnpi_exception"],"refs":[["prep_namespace"],["prep_namespace"],["prep_subscription"],["prep_subscription"],["dim_order_hist"],["dim_order_hist"],["dim_date"],["dim_date"],["prep_product_tier"],["prep_product_tier"],["dim_product_detail"],["dim_product_detail"],["fct_mrr_with_zero_dollar_charges"],["fct_mrr_with_zero_dollar_charges"],["customers_db_trial_histories_source"],["customers_db_trial_histories_source"],["bdg_subscription_product_rate_plan"],["bdg_subscription_product_rate_plan"]],"sources":[],"metrics":[],"description":"$29","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/bridge/bdg_namespace_order_subscription_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033750.4867938,"compiled_sql":"$2a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.bdg_namespace_order_subscription_monthly","label":"bdg_namespace_order_subscription_monthly"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_subscription_id","model":"{{ get_where_subquery(ref('prep_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","not_null_prep_subscription_dim_subscription_id"],"unique_id":"test.gitlab_snowflake.not_null_prep_subscription_dim_subscription_id.3980700e41","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_prep_subscription_dim_subscription_id.sql","original_file_path":"models/common_prep/schema.yml","name":"not_null_prep_subscription_dim_subscription_id","alias":"not_null_prep_subscription_dim_subscription_id","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/not_null_prep_subscription_dim_subscription_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.277409,"compiled_sql":"\n    \n    \n\n\n\nselect dim_subscription_id\nfrom \"PROD\".common_prep.prep_subscription\nwhere dim_subscription_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_subscription_id","file_key_name":"models.prep_subscription","label":"not_null_prep_subscription_dim_subscription_id"},{"raw_sql":"{{ test_unique(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"unique","kwargs":{"column_name":"dim_subscription_id","model":"{{ get_where_subquery(ref('prep_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_unique","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","unique_prep_subscription_dim_subscription_id"],"unique_id":"test.gitlab_snowflake.unique_prep_subscription_dim_subscription_id.ba1de00b35","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"unique_prep_subscription_dim_subscription_id.sql","original_file_path":"models/common_prep/schema.yml","name":"unique_prep_subscription_dim_subscription_id","alias":"unique_prep_subscription_dim_subscription_id","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/unique_prep_subscription_dim_subscription_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.2810235,"compiled_sql":"\n    \n    \n\nselect\n    dim_subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"PROD\".common_prep.prep_subscription\nwhere dim_subscription_id is not null\ngroup by dim_subscription_id\nhaving count(*) > 1\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_subscription_id","file_key_name":"models.prep_subscription","label":"unique_prep_subscription_dim_subscription_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"subscription_status","model":"{{ get_where_subquery(ref('prep_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","not_null_prep_subscription_subscription_status"],"unique_id":"test.gitlab_snowflake.not_null_prep_subscription_subscription_status.6a75ff605f","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_prep_subscription_subscription_status.sql","original_file_path":"models/common_prep/schema.yml","name":"not_null_prep_subscription_subscription_status","alias":"not_null_prep_subscription_subscription_status","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/not_null_prep_subscription_subscription_status.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.2845132,"compiled_sql":"\n    \n    \n\n\n\nselect subscription_status\nfrom \"PROD\".common_prep.prep_subscription\nwhere subscription_status is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_status","file_key_name":"models.prep_subscription","label":"not_null_prep_subscription_subscription_status"},{"raw_sql":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_prep_subscript_d8396a462f831f9ff4ffa445ef29d936\") }}","test_metadata":{"name":"accepted_values","kwargs":{"values":["Active","Cancelled","Draft","Expired"],"column_name":"subscription_status","model":"{{ get_where_subquery(ref('prep_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.gitlab_snowflake.ref"],"nodes":["model.gitlab_snowflake.prep_subscription"]},"config":{"enabled":true,"alias":"accepted_values_prep_subscript_d8396a462f831f9ff4ffa445ef29d936","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","accepted_values_prep_subscription_subscription_status__Active__Cancelled__Draft__Expired"],"unique_id":"test.gitlab_snowflake.accepted_values_prep_subscription_subscription_status__Active__Cancelled__Draft__Expired.7f274381fc","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"accepted_values_prep_subscript_d8396a462f831f9ff4ffa445ef29d936.sql","original_file_path":"models/common_prep/schema.yml","name":"accepted_values_prep_subscription_subscription_status__Active__Cancelled__Draft__Expired","alias":"accepted_values_prep_subscript_d8396a462f831f9ff4ffa445ef29d936","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/accepted_values_prep_subscript_d8396a462f831f9ff4ffa445ef29d936.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"accepted_values_prep_subscript_d8396a462f831f9ff4ffa445ef29d936"},"created_at":1689033757.2884731,"compiled_sql":"\n    \n    \n\nwith all_values as (\n\n    select\n        subscription_status as value_field,\n        count(*) as n_records\n\n    from \"PROD\".common_prep.prep_subscription\n    group by subscription_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Active','Cancelled','Draft','Expired'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_status","file_key_name":"models.prep_subscription","label":"accepted_values_prep_subscription_subscription_status__Active__Cancelled__Draft__Expired"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"subscription_sales_type","model":"{{ get_where_subquery(ref('prep_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_subscription"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","not_null_prep_subscription_subscription_sales_type"],"unique_id":"test.gitlab_snowflake.not_null_prep_subscription_subscription_sales_type.ea952a0f47","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_prep_subscription_subscription_sales_type.sql","original_file_path":"models/common_prep/schema.yml","name":"not_null_prep_subscription_subscription_sales_type","alias":"not_null_prep_subscription_subscription_sales_type","checksum":{"name":"none","checksum":""},"tags":["tdf"],"refs":[["prep_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/not_null_prep_subscription_subscription_sales_type.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.2982783,"compiled_sql":"\n    \n    \n\n\n\nselect subscription_sales_type\nfrom \"PROD\".common_prep.prep_subscription\nwhere subscription_sales_type is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_sales_type","file_key_name":"models.prep_subscription","label":"not_null_prep_subscription_subscription_sales_type"},{"raw_sql":"{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_prep_subscript_ff036a3ac73e320af9c03ab458f82321\") }}","test_metadata":{"name":"accepted_values","kwargs":{"values":["Sales-Assisted","Self-Service"],"column_name":"subscription_sales_type","model":"{{ get_where_subquery(ref('prep_subscription')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_accepted_values","macro.dbt.get_where_subquery","macro.gitlab_snowflake.ref"],"nodes":["model.gitlab_snowflake.prep_subscription"]},"config":{"enabled":true,"alias":"accepted_values_prep_subscript_ff036a3ac73e320af9c03ab458f82321","schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","accepted_values_prep_subscription_subscription_sales_type__Sales_Assisted__Self_Service"],"unique_id":"test.gitlab_snowflake.accepted_values_prep_subscription_subscription_sales_type__Sales_Assisted__Self_Service.3281c8a928","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"accepted_values_prep_subscript_ff036a3ac73e320af9c03ab458f82321.sql","original_file_path":"models/common_prep/schema.yml","name":"accepted_values_prep_subscription_subscription_sales_type__Sales_Assisted__Self_Service","alias":"accepted_values_prep_subscript_ff036a3ac73e320af9c03ab458f82321","checksum":{"name":"none","checksum":""},"tags":["tdf"],"refs":[["prep_subscription"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/accepted_values_prep_subscript_ff036a3ac73e320af9c03ab458f82321.sql","build_path":null,"deferred":false,"unrendered_config":{"alias":"accepted_values_prep_subscript_ff036a3ac73e320af9c03ab458f82321"},"created_at":1689033757.3023176,"compiled_sql":"\n    \n    \n\nwith all_values as (\n\n    select\n        subscription_sales_type as value_field,\n        count(*) as n_records\n\n    from \"PROD\".common_prep.prep_subscription\n    group by subscription_sales_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Sales-Assisted','Self-Service'\n)\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"subscription_sales_type","file_key_name":"models.prep_subscription","label":"accepted_values_prep_subscription_subscription_sales_type__Sales_Assisted__Self_Service"}]},"node":{"resource_type":"model","name":"prep_subscription","unique_id":"model.gitlab_snowflake.prep_subscription"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"VIEW","schema":"SFDC","name":"SFDC_CUSTOMER_SUBSCRIPTION_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"ACTIVATED_USER_COUNT":{"type":"FLOAT","index":2,"name":"ACTIVATED_USER_COUNT","comment":null,"display_name":"activated_user_count"},"ADMIN_PHOENIX_STATUS":{"type":"TEXT","index":3,"name":"ADMIN_PHOENIX_STATUS","comment":null,"display_name":"admin_phoenix_status"},"BPO_RENEWAL_STATUS":{"type":"TEXT","index":4,"name":"BPO_RENEWAL_STATUS","comment":null,"display_name":"bpo_renewal_status"},"CLOSED_LOST_RENEWAL_ID":{"type":"TEXT","index":5,"name":"CLOSED_LOST_RENEWAL_ID","comment":null,"display_name":"closed_lost_renewal_id"},"CREATED_BY_ID":{"type":"TEXT","index":6,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":7,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"CURRENT_RENEWAL_CREATED_BY":{"type":"TEXT","index":8,"name":"CURRENT_RENEWAL_CREATED_BY","comment":null,"display_name":"current_renewal_created_by"},"CURRENT_SUBSCRIPTION_CARR":{"type":"FLOAT","index":9,"name":"CURRENT_SUBSCRIPTION_CARR","comment":null,"display_name":"current_subscription_carr"},"CURRENT_SUBSCRIPTION_STATUS":{"type":"TEXT","index":10,"name":"CURRENT_SUBSCRIPTION_STATUS","comment":null,"display_name":"current_subscription_status"},"CURRENT_TERM_END_DATE":{"type":"TIMESTAMP_TZ","index":11,"name":"CURRENT_TERM_END_DATE","comment":null,"display_name":"current_term_end_date"},"CURRENT_TERM_START_DATE":{"type":"TIMESTAMP_TZ","index":12,"name":"CURRENT_TERM_START_DATE","comment":null,"display_name":"current_term_start_date"},"CURRENT_ZUORA_SUBSCRIPTION":{"type":"TEXT","index":13,"name":"CURRENT_ZUORA_SUBSCRIPTION","comment":null,"display_name":"current_zuora_subscription"},"CURRENT_ZUORA_SUBSCRIPTION_ID":{"type":"TEXT","index":14,"name":"CURRENT_ZUORA_SUBSCRIPTION_ID","comment":null,"display_name":"current_zuora_subscription_id"},"CUSTOMER_SUBSCRIPTION_COUNT":{"type":"FLOAT","index":15,"name":"CUSTOMER_SUBSCRIPTION_COUNT","comment":null,"display_name":"customer_subscription_count"},"ENTITLED_SEATS":{"type":"FLOAT","index":16,"name":"ENTITLED_SEATS","comment":null,"display_name":"entitled_seats"},"ESTIMATED_OVERAGE_AMOUNT":{"type":"FLOAT","index":17,"name":"ESTIMATED_OVERAGE_AMOUNT","comment":null,"display_name":"estimated_overage_amount"},"HOSTING_TYPE":{"type":"TEXT","index":18,"name":"HOSTING_TYPE","comment":null,"display_name":"hosting_type"},"CUSTOMER_SUBSCRIPTION_ID":{"type":"TEXT","index":19,"name":"customer_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","sfdc"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"customer_subscription_id"},"IS_DELETED":{"type":"BOOLEAN","index":20,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"LAST_MODIFIED_BY_ID":{"type":"TEXT","index":21,"name":"LAST_MODIFIED_BY_ID","comment":null,"display_name":"last_modified_by_id"},"LAST_MODIFIED_DATE":{"type":"TIMESTAMP_TZ","index":22,"name":"LAST_MODIFIED_DATE","comment":null,"display_name":"last_modified_date"},"LICENSE_USAGE_REPORT_DATE":{"type":"TIMESTAMP_TZ","index":23,"name":"LICENSE_USAGE_REPORT_DATE","comment":null,"display_name":"license_usage_report_date"},"IS_LINKAGE_PROBLEM":{"type":"BOOLEAN","index":24,"name":"IS_LINKAGE_PROBLEM","comment":null,"display_name":"is_linkage_problem"},"NAME":{"type":"TEXT","index":25,"name":"NAME","comment":null,"display_name":"name"},"OWNER_ID":{"type":"TEXT","index":26,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"PLAN_NAME":{"type":"TEXT","index":27,"name":"PLAN_NAME","comment":null,"display_name":"plan_name"},"IS_RENEWAL_FINDER_SKIP":{"type":"BOOLEAN","index":28,"name":"IS_RENEWAL_FINDER_SKIP","comment":null,"display_name":"is_renewal_finder_skip"},"RENEWAL_FINDER_STORY":{"type":"TEXT","index":29,"name":"RENEWAL_FINDER_STORY","comment":null,"display_name":"renewal_finder_story"},"IS_RENEWAL_OPPORTUNITY_TRIGGER":{"type":"BOOLEAN","index":30,"name":"IS_RENEWAL_OPPORTUNITY_TRIGGER","comment":null,"display_name":"is_renewal_opportunity_trigger"},"SEAT_PRICE":{"type":"FLOAT","index":31,"name":"SEAT_PRICE","comment":null,"display_name":"seat_price"},"IS_SUBSCRIPTION_TRAIN_CAR":{"type":"BOOLEAN","index":32,"name":"IS_SUBSCRIPTION_TRAIN_CAR","comment":null,"display_name":"is_subscription_train_car"},"SUBSCRIPTION_TYPE":{"type":"TEXT","index":33,"name":"SUBSCRIPTION_TYPE","comment":null,"display_name":"subscription_type"},"SYSTEM_MOD_STAMP":{"type":"TIMESTAMP_TZ","index":34,"name":"SYSTEM_MOD_STAMP","comment":null,"display_name":"system_mod_stamp"},"IS_X14_DAYS_PAST_END_DATE":{"type":"BOOLEAN","index":35,"name":"IS_X14_DAYS_PAST_END_DATE","comment":null,"display_name":"is_x14_days_past_end_date"},"ZUORA_ORIGINAL_SUBSCRIPTION_ID":{"type":"TEXT","index":36,"name":"ZUORA_ORIGINAL_SUBSCRIPTION_ID","comment":null,"display_name":"zuora_original_subscription_id"},"ZUORA_SUBSCRIPTION_ID_HISTORY":{"type":"TEXT","index":37,"name":"ZUORA_SUBSCRIPTION_ID_HISTORY","comment":null,"display_name":"zuora_subscription_id_history"},"ZUORA_SUB_QUOTE_TYPE":{"type":"TEXT","index":38,"name":"ZUORA_SUB_QUOTE_TYPE","comment":null,"display_name":"zuora_sub_quote_type"},"_SDC_BATCHED_AT":{"type":"TIMESTAMP_TZ","index":39,"name":"_SDC_BATCHED_AT","comment":null,"display_name":"_sdc_batched_at"},"_SDC_EXTRACTED_AT":{"type":"TIMESTAMP_TZ","index":40,"name":"_SDC_EXTRACTED_AT","comment":null,"display_name":"_sdc_extracted_at"},"_SDC_RECEIVED_AT":{"type":"TIMESTAMP_TZ","index":41,"name":"_SDC_RECEIVED_AT","comment":null,"display_name":"_sdc_received_at"},"_SDC_SEQUENCE":{"type":"NUMBER","index":42,"name":"_SDC_SEQUENCE","comment":null,"display_name":"_sdc_sequence"},"_SDC_TABLE_VERSION":{"type":"NUMBER","index":43,"name":"_SDC_TABLE_VERSION","comment":null,"display_name":"_sdc_table_version"},"CURRENT_RENEWAL_ARR_BASIS":{"type":"FLOAT","index":44,"name":"CURRENT_RENEWAL_ARR_BASIS","comment":null,"display_name":"current_renewal_arr_basis"},"CURRENT_OPEN_RENEWAL_ID":{"type":"TEXT","index":45,"name":"CURRENT_OPEN_RENEWAL_ID","comment":null,"display_name":"current_open_renewal_id"},"STAMPED_ARR_BASIS":{"type":"FLOAT","index":46,"name":"STAMPED_ARR_BASIS","comment":null,"display_name":"stamped_arr_basis"},"SUB_TO_BASIS_STATUS":{"type":"TEXT","index":47,"name":"SUB_TO_BASIS_STATUS","comment":null,"display_name":"sub_to_basis_status"},"IS_SUPPRESS_UPDATE":{"type":"BOOLEAN","index":48,"name":"IS_SUPPRESS_UPDATE","comment":null,"display_name":"is_suppress_update"},"FY22_ENTERING_ARR":{"type":"FLOAT","index":49,"name":"FY22_ENTERING_ARR","comment":null,"display_name":"fy22_entering_arr"},"FY22_ENTERING_PLAN":{"type":"TEXT","index":50,"name":"FY22_ENTERING_PLAN","comment":null,"display_name":"fy22_entering_plan"},"CURRENT_RENEWAL_FACTS":{"type":"TEXT","index":51,"name":"CURRENT_RENEWAL_FACTS","comment":null,"display_name":"current_renewal_facts"},"OPEN_RENEWAL_CREATED_BY":{"type":"TEXT","index":52,"name":"OPEN_RENEWAL_CREATED_BY","comment":null,"display_name":"open_renewal_created_by"},"TEMP_WEBSTORE_RENEWAL_ISSUE_STATUS":{"type":"TEXT","index":53,"name":"TEMP_WEBSTORE_RENEWAL_ISSUE_STATUS","comment":null,"display_name":"temp_webstore_renewal_issue_status"},"RENEWAL_STATUS":{"type":"TEXT","index":54,"name":"RENEWAL_STATUS","comment":null,"display_name":"renewal_status"},"CURRENT_OPEN_RENEWAL_CLOSE_DATE":{"type":"TIMESTAMP_TZ","index":55,"name":"CURRENT_OPEN_RENEWAL_CLOSE_DATE","comment":null,"display_name":"current_open_renewal_close_date"},"CURRENT_OPEN_RENEWAL_START_DATE":{"type":"TIMESTAMP_TZ","index":56,"name":"CURRENT_OPEN_RENEWAL_START_DATE","comment":null,"display_name":"current_open_renewal_start_date"},"CHURN_STATUS_":{"type":"TEXT","index":57,"name":"CHURN_STATUS_","comment":null,"display_name":"churn_status_"},"CHURN_OPP_BASIS":{"type":"FLOAT","index":58,"name":"CHURN_OPP_BASIS","comment":null,"display_name":"churn_opp_basis"},"IS_PAUSE_AUTO_RENEWAL":{"type":"BOOLEAN","index":59,"name":"IS_PAUSE_AUTO_RENEWAL","comment":null,"display_name":"is_pause_auto_renewal"},"SUPER_SONICS_TOGGLE_RESULT":{"type":"TEXT","index":60,"name":"SUPER_SONICS_TOGGLE_RESULT","comment":null,"display_name":"super_sonics_toggle_result"},"IS_PAUSE_SEAT_RECONCILIATION":{"type":"BOOLEAN","index":61,"name":"IS_PAUSE_SEAT_RECONCILIATION","comment":null,"display_name":"is_pause_seat_reconciliation"},"SUBSCRIPTION_REVIEWED":{"type":"TIMESTAMP_TZ","index":62,"name":"SUBSCRIPTION_REVIEWED","comment":null,"display_name":"subscription_reviewed"},"ANNUALIZED_SEAT_PRICE":{"type":"FLOAT","index":63,"name":"ANNUALIZED_SEAT_PRICE","comment":null,"display_name":"annualized_seat_price"},"PRODUCT_TIER_NAME_SHORT":{"type":"TEXT","index":64,"name":"PRODUCT_TIER_NAME_SHORT","comment":null,"display_name":"product_tier_name_short"},"BILLABLE_USERS":{"type":"FLOAT","index":65,"name":"BILLABLE_USERS","comment":null,"display_name":"billable_users"},"GS_TIME_TO_FIRST_10":{"type":"FLOAT","index":66,"name":"GS_TIME_TO_FIRST_10","comment":null,"display_name":"gs_time_to_first_10"},"GS_TIME_TO_FIRST_80":{"type":"FLOAT","index":67,"name":"GS_TIME_TO_FIRST_80","comment":null,"display_name":"gs_time_to_first_80"},"GS_TIME_TO_FIRST_CI":{"type":"FLOAT","index":68,"name":"GS_TIME_TO_FIRST_CI","comment":null,"display_name":"gs_time_to_first_ci"},"GS_TIME_TO_FIRST_SCM":{"type":"FLOAT","index":69,"name":"GS_TIME_TO_FIRST_SCM","comment":null,"display_name":"gs_time_to_first_scm"},"GS_TIME_TO_FIRST_DSC":{"type":"FLOAT","index":70,"name":"GS_TIME_TO_FIRST_DSC","comment":null,"display_name":"gs_time_to_first_dsc"},"GS_TIME_TO_FIRST_50":{"type":"FLOAT","index":71,"name":"GS_TIME_TO_FIRST_50","comment":null,"display_name":"gs_time_to_first_50"},"CURRENT_ZUORA_SUB_VERSION":{"type":"FLOAT","index":72,"name":"CURRENT_ZUORA_SUB_VERSION","comment":null,"display_name":"current_zuora_sub_version"},"CURRENT_RENEWAL_NET_ARR":{"type":"FLOAT","index":73,"name":"CURRENT_RENEWAL_NET_ARR","comment":null,"display_name":"current_renewal_net_arr"},"ADMIN_DOUBLE_LINKAGE":{"type":"TEXT","index":74,"name":"ADMIN_DOUBLE_LINKAGE","comment":null,"display_name":"admin_double_linkage"},"NEXT_CHAINED_SUBSCRIPTION":{"type":"TEXT","index":75,"name":"NEXT_CHAINED_SUBSCRIPTION","comment":null,"display_name":"next_chained_subscription"},"ESTIMATED_UNDERUTILIZED_AMOUNT":{"type":"FLOAT","index":76,"name":"ESTIMATED_UNDERUTILIZED_AMOUNT","comment":null,"display_name":"estimated_underutilized_amount"},"UTILIZATION":{"type":"FLOAT","index":77,"name":"UTILIZATION","comment":null,"display_name":"utilization"},"UNDERUTILIZED_SEATS":{"type":"FLOAT","index":78,"name":"UNDERUTILIZED_SEATS","comment":null,"display_name":"underutilized_seats"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.sfdc_customer_subscription_source","raw_sql":"$2b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.salesforce.customer_subscription"]},"config":{"enabled":true,"alias":null,"schema":"sfdc","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sfdc","fqn":["gitlab_snowflake","sources","sfdc","sfdc_customer_subscription_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/sfdc/sfdc_customer_subscription_source.sql","original_file_path":"models/sources/sfdc/sfdc_customer_subscription_source.sql","name":"sfdc_customer_subscription_source","alias":"sfdc_customer_subscription_source","checksum":{"name":"sha256","checksum":"48ef231d4eb9cf60d9ed9aef41e9372349097e353f40f69cdbb30af102ddbb44"},"tags":["sources"],"refs":[],"sources":[["salesforce","customer_subscription"]],"metrics":[],"description":"Source model for SFDC custom object customer customer_subscription","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/sfdc/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/sfdc/sfdc_customer_subscription_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sfdc","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033749.7024543,"compiled_sql":"$2c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sfdc.sfdc_customer_subscription_source","label":"sfdc_customer_subscription_source"},{"metadata":{"type":"VIEW","schema":"ZUORA","name":"ZUORA_ACCOUNT_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"COMMUNICATION_PROFILE_ID":{"type":"TEXT","index":2,"name":"COMMUNICATION_PROFILE_ID","comment":null,"display_name":"communication_profile_id"},"CRM_ID":{"type":"TEXT","index":3,"name":"CRM_ID","comment":null,"display_name":"crm_id"},"DEFAULT_PAYMENT_METHOD_ID":{"type":"TEXT","index":4,"name":"DEFAULT_PAYMENT_METHOD_ID","comment":null,"display_name":"default_payment_method_id"},"INVOICE_TEMPLATE_ID":{"type":"TEXT","index":5,"name":"INVOICE_TEMPLATE_ID","comment":null,"display_name":"invoice_template_id"},"PARENT_ID":{"type":"TEXT","index":6,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SOLD_TO_CONTACT_ID":{"type":"TEXT","index":7,"name":"SOLD_TO_CONTACT_ID","comment":null,"display_name":"sold_to_contact_id"},"BILL_TO_CONTACT_ID":{"type":"TEXT","index":8,"name":"BILL_TO_CONTACT_ID","comment":null,"display_name":"bill_to_contact_id"},"TAX_EXEMPT_CERTIFICATE_ID":{"type":"TEXT","index":9,"name":"TAX_EXEMPT_CERTIFICATE_ID","comment":null,"display_name":"tax_exempt_certificate_id"},"TAX_EXEMPT_CERTIFICATE_TYPE":{"type":"TEXT","index":10,"name":"TAX_EXEMPT_CERTIFICATE_TYPE","comment":null,"display_name":"tax_exempt_certificate_type"},"ACCOUNT_NUMBER":{"type":"TEXT","index":11,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"ACCOUNT_NAME":{"type":"TEXT","index":12,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_NOTES":{"type":"TEXT","index":13,"name":"ACCOUNT_NOTES","comment":null,"display_name":"account_notes"},"PURCHASE_ORDER_NUMBER":{"type":"TEXT","index":14,"name":"PURCHASE_ORDER_NUMBER","comment":null,"display_name":"purchase_order_number"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":15,"name":"SFDC_ACCOUNT_CODE","comment":null,"display_name":"sfdc_account_code"},"STATUS":{"type":"TEXT","index":16,"name":"STATUS","comment":null,"display_name":"status"},"SFDC_ENTITY":{"type":"TEXT","index":17,"name":"SFDC_ENTITY","comment":null,"display_name":"sfdc_entity"},"AUTO_PAY":{"type":"BOOLEAN","index":18,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"BALANCE":{"type":"FLOAT","index":19,"name":"BALANCE","comment":null,"display_name":"balance"},"CREDIT_BALANCE":{"type":"FLOAT","index":20,"name":"CREDIT_BALANCE","comment":null,"display_name":"credit_balance"},"BILL_CYCLE_DAY":{"type":"NUMBER","index":21,"name":"BILL_CYCLE_DAY","comment":null,"display_name":"bill_cycle_day"},"CURRENCY":{"type":"TEXT","index":22,"name":"CURRENCY","comment":null,"display_name":"currency"},"SFDC_CONVERSION_RATE":{"type":"TEXT","index":23,"name":"SFDC_CONVERSION_RATE","comment":null,"display_name":"sfdc_conversion_rate"},"PAYMENT_TERM":{"type":"TEXT","index":24,"name":"PAYMENT_TERM","comment":null,"display_name":"payment_term"},"ALLOW_INVOICE_EDIT":{"type":"BOOLEAN","index":25,"name":"ALLOW_INVOICE_EDIT","comment":null,"display_name":"allow_invoice_edit"},"BATCH":{"type":"TEXT","index":26,"name":"BATCH","comment":null,"display_name":"batch"},"INVOICE_DELIVERY_PREFS_EMAIL":{"type":"BOOLEAN","index":27,"name":"INVOICE_DELIVERY_PREFS_EMAIL","comment":null,"display_name":"invoice_delivery_prefs_email"},"INVOICE_DELIVERY_PREFS_PRINT":{"type":"BOOLEAN","index":28,"name":"INVOICE_DELIVERY_PREFS_PRINT","comment":null,"display_name":"invoice_delivery_prefs_print"},"PAYMENT_GATEWAY":{"type":"TEXT","index":29,"name":"PAYMENT_GATEWAY","comment":null,"display_name":"payment_gateway"},"CUSTOMER_SERVICE_REP_NAME":{"type":"TEXT","index":30,"name":"CUSTOMER_SERVICE_REP_NAME","comment":null,"display_name":"customer_service_rep_name"},"SALES_REP_NAME":{"type":"TEXT","index":31,"name":"SALES_REP_NAME","comment":null,"display_name":"sales_rep_name"},"ADDITIONAL_EMAIL_ADDRESSES":{"type":"TEXT","index":32,"name":"ADDITIONAL_EMAIL_ADDRESSES","comment":null,"display_name":"additional_email_addresses"},"SFDC_PARENT":{"type":"TEXT","index":33,"name":"SFDC_PARENT","comment":null,"display_name":"sfdc_parent"},"SSP_CHANNEL":{"type":"TEXT","index":34,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":35,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"LAST_INVOICE_DATE":{"type":"TIMESTAMP_TZ","index":36,"name":"LAST_INVOICE_DATE","comment":null,"display_name":"last_invoice_date"},"CREATED_BY_ID":{"type":"TEXT","index":37,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":38,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"UPDATED_BY_ID":{"type":"TEXT","index":39,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE":{"type":"TIMESTAMP_TZ","index":40,"name":"UPDATED_DATE","comment":null,"display_name":"updated_date"},"IS_DELETED":{"type":"BOOLEAN","index":41,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_account_source","raw_sql":"$2d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.zuora.account","seed.gitlab_snowflake.zuora_excluded_accounts","seed.gitlab_snowflake.zuora_excluded_accounts"]},"config":{"enabled":true,"alias":"zuora_account_source","schema":"zuora","database":"PREP","tags":["sources","zuora"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"zuora","fqn":["gitlab_snowflake","sources","zuora","zuora_account_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/zuora/zuora_account_source.sql","original_file_path":"models/sources/zuora/zuora_account_source.sql","name":"zuora_account_source","alias":"zuora_account_source","checksum":{"name":"sha256","checksum":"8c48348187a27d94d7c66edb5171c988a9aa6ce01a461c613d295da91f9a4fd5"},"tags":["sources","zuora"],"refs":[["zuora_excluded_accounts"],["zuora_excluded_accounts"]],"sources":[["zuora","account"]],"metrics":[],"description":"Source layer for Zuora Accounts for cleaning and renaming","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/zuora/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/zuora/zuora_account_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"zuora","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["zuora"],"alias":"zuora_account_source"},"created_at":1689033748.6565464,"compiled_sql":"$2e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".zuora.zuora_account_source","label":"zuora_account_source"},{"metadata":{"type":"VIEW","schema":"ZUORA","name":"ZUORA_SUBSCRIPTION_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"SUBSCRIPTION_ID","comment":null,"display_name":"subscription_id"},"AMENDMENT_ID":{"type":"TEXT","index":2,"name":"AMENDMENT_ID","comment":null,"display_name":"amendment_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":3,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":4,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"NAMESPACE_NAME":{"type":"TEXT","index":5,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"ACCOUNT_ID":{"type":"TEXT","index":6,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"CREATOR_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"CREATOR_ACCOUNT_ID","comment":null,"display_name":"creator_account_id"},"CREATOR_INVOICE_OWNER_ID":{"type":"TEXT","index":8,"name":"CREATOR_INVOICE_OWNER_ID","comment":null,"display_name":"creator_invoice_owner_id"},"INVOICE_OWNER_ID":{"type":"TEXT","index":9,"name":"INVOICE_OWNER_ID","comment":null,"display_name":"invoice_owner_id"},"SFDC_OPPORTUNITY_ID":{"type":"TEXT","index":10,"name":"SFDC_OPPORTUNITY_ID","comment":null,"display_name":"sfdc_opportunity_id"},"CRM_OPPORTUNITY_NAME":{"type":"TEXT","index":11,"name":"CRM_OPPORTUNITY_NAME","comment":null,"display_name":"crm_opportunity_name"},"ORIGINAL_ID":{"type":"TEXT","index":12,"name":"ORIGINAL_ID","comment":null,"display_name":"original_id"},"PREVIOUS_SUBSCRIPTION_ID":{"type":"TEXT","index":13,"name":"PREVIOUS_SUBSCRIPTION_ID","comment":null,"display_name":"previous_subscription_id"},"SFDC_RECURLY_ID":{"type":"TEXT","index":14,"name":"SFDC_RECURLY_ID","comment":null,"display_name":"sfdc_recurly_id"},"CPQ_BUNDLE_JSON_ID":{"type":"TEXT","index":15,"name":"CPQ_BUNDLE_JSON_ID","comment":null,"display_name":"cpq_bundle_json_id"},"NAMESPACE_ID":{"type":"TEXT","index":16,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":17,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":18,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":19,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"VERSION":{"type":"NUMBER","index":20,"name":"VERSION","comment":null,"display_name":"version"},"TERM_TYPE":{"type":"TEXT","index":21,"name":"TERM_TYPE","comment":null,"display_name":"term_type"},"NOTES":{"type":"TEXT","index":22,"name":"NOTES","comment":null,"display_name":"notes"},"IS_INVOICE_SEPARATE":{"type":"BOOLEAN","index":23,"name":"IS_INVOICE_SEPARATE","comment":null,"display_name":"is_invoice_separate"},"CURRENT_TERM":{"type":"NUMBER","index":24,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"CURRENT_TERM_PERIOD_TYPE":{"type":"TEXT","index":25,"name":"CURRENT_TERM_PERIOD_TYPE","comment":null,"display_name":"current_term_period_type"},"SFDC_END_CUSTOMER_DETAILS":{"type":"TEXT","index":26,"name":"SFDC_END_CUSTOMER_DETAILS","comment":null,"display_name":"sfdc_end_customer_details"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":27,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":28,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":29,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":30,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":31,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":32,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"CONTRACT_ACCEPTANCE_DATE":{"type":"TIMESTAMP_TZ","index":33,"name":"CONTRACT_ACCEPTANCE_DATE","comment":null,"display_name":"contract_acceptance_date"},"CONTRACT_EFFECTIVE_DATE":{"type":"TIMESTAMP_TZ","index":34,"name":"CONTRACT_EFFECTIVE_DATE","comment":null,"display_name":"contract_effective_date"},"INITIAL_TERM":{"type":"NUMBER","index":35,"name":"INITIAL_TERM","comment":null,"display_name":"initial_term"},"INITIAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":36,"name":"INITIAL_TERM_PERIOD_TYPE","comment":null,"display_name":"initial_term_period_type"},"TERM_END_DATE":{"type":"DATE","index":37,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_DATE":{"type":"DATE","index":38,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":39,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":40,"name":"SUBSCRIPTION_START_DATE","comment":null,"display_name":"subscription_start_date"},"SERVICE_ACTIVIATION_DATE":{"type":"TIMESTAMP_TZ","index":41,"name":"SERVICE_ACTIVIATION_DATE","comment":null,"display_name":"service_activiation_date"},"OPPORTUNITY_CLOSE_DATE":{"type":"TIMESTAMP_TZ","index":42,"name":"OPPORTUNITY_CLOSE_DATE","comment":null,"display_name":"opportunity_close_date"},"ORIGINAL_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":43,"name":"ORIGINAL_CREATED_DATE","comment":null,"display_name":"original_created_date"},"OPPORTUNITY_NAME":{"type":"TEXT","index":44,"name":"OPPORTUNITY_NAME","comment":null,"display_name":"opportunity_name"},"SFDC_PURCHASE_ORDER":{"type":"TEXT","index":45,"name":"SFDC_PURCHASE_ORDER","comment":null,"display_name":"sfdc_purchase_order"},"QUOTE_BUSINESS_TYPE":{"type":"TEXT","index":46,"name":"QUOTE_BUSINESS_TYPE","comment":null,"display_name":"quote_business_type"},"QUOTE_NUMBER":{"type":"TEXT","index":47,"name":"QUOTE_NUMBER","comment":null,"display_name":"quote_number"},"QUOTE_TYPE":{"type":"TEXT","index":48,"name":"QUOTE_TYPE","comment":null,"display_name":"quote_type"},"RENEWAL_SETTING":{"type":"TEXT","index":49,"name":"RENEWAL_SETTING","comment":null,"display_name":"renewal_setting"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":50,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME","comment":null,"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":51,"name":"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"zuora_renewal_subscription_name_slugify"},"RENEWAL_TERM":{"type":"NUMBER","index":52,"name":"RENEWAL_TERM","comment":null,"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":53,"name":"RENEWAL_TERM_PERIOD_TYPE","comment":null,"display_name":"renewal_term_period_type"},"EXCLUDE_FROM_RENEWAL_REPORT":{"type":"TEXT","index":54,"name":"EXCLUDE_FROM_RENEWAL_REPORT","comment":null,"display_name":"exclude_from_renewal_report"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":55,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":56,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":57,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":58,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"UPDATED_BY_ID":{"type":"TEXT","index":59,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE":{"type":"TIMESTAMP_TZ","index":60,"name":"UPDATED_DATE","comment":null,"display_name":"updated_date"},"CREATED_BY_ID":{"type":"TEXT","index":61,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":62,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"IS_DELETED":{"type":"BOOLEAN","index":63,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"EXCLUDE_FROM_ANALYSIS":{"type":"TEXT","index":64,"name":"EXCLUDE_FROM_ANALYSIS","comment":null,"display_name":"exclude_from_analysis"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_subscription_source","raw_sql":"$2f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.zuora_slugify","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.zuora.subscription","seed.gitlab_snowflake.zuora_excluded_accounts","seed.gitlab_snowflake.zuora_excluded_accounts"]},"config":{"enabled":true,"alias":"zuora_subscription_source","schema":"zuora","database":"PREP","tags":["sources","zuora"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"zuora","fqn":["gitlab_snowflake","sources","zuora","zuora_subscription_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/zuora/zuora_subscription_source.sql","original_file_path":"models/sources/zuora/zuora_subscription_source.sql","name":"zuora_subscription_source","alias":"zuora_subscription_source","checksum":{"name":"sha256","checksum":"79fdef6d573d116b389b1a564c8fba3984ba9ad7a03d23befeeb1f9b44c73a42"},"tags":["sources","zuora"],"refs":[["zuora_excluded_accounts"],["zuora_excluded_accounts"]],"sources":[["zuora","subscription"]],"metrics":[],"description":"Source layer for Zuora Subscriptions for cleaning and renaming","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/zuora/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/zuora/zuora_subscription_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"zuora","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["zuora"],"alias":"zuora_subscription_source"},"created_at":1689033748.689239,"compiled_sql":"$30","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".zuora.zuora_subscription_source","label":"zuora_subscription_source"},{"metadata":{"type":"VIEW","schema":"LEGACY","name":"DATE_DETAILS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_ID":{"type":"NUMBER","index":1,"name":"DATE_ID","comment":null,"display_name":"date_id"},"DATE_DAY":{"type":"DATE","index":2,"name":"date_day","comment":null,"description":"Calendar date, e.g. '2019-02-02'","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"date_day"},"DATE_ACTUAL":{"type":"DATE","index":3,"name":"date_actual","comment":null,"description":"Matches `date_day`, duplicated for ease of use","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"date_actual"},"DAY_NAME":{"type":"TEXT","index":4,"name":"day_name","comment":null,"description":"Abbreviated name of the day of the week, e.g. 'Sat' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_name"},"MONTH_ACTUAL":{"type":"NUMBER","index":5,"name":"month_actual","comment":null,"description":"Number for the calendar month of the year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"month_actual"},"YEAR_ACTUAL":{"type":"NUMBER","index":6,"name":"year_actual","comment":null,"description":"Calendar year, e.g. '2019' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"year_actual"},"QUARTER_ACTUAL":{"type":"NUMBER","index":7,"name":"quarter_actual","comment":null,"description":"Calendar quarter, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"quarter_actual"},"DAY_OF_WEEK":{"type":"NUMBER","index":8,"name":"day_of_week","comment":null,"description":"Number of the day of the week, with Sunday = 1 and Saturday = 7","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_week"},"FIRST_DAY_OF_WEEK":{"type":"DATE","index":9,"name":"first_day_of_week","comment":null,"description":"Calendar date of the first Sunday of that week, e.g. '2019-01-27' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_week"},"WEEK_OF_YEAR":{"type":"NUMBER","index":10,"name":"week_of_year","comment":null,"description":"Calendar week of year, e.g. '5' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"week_of_year"},"DAY_OF_MONTH":{"type":"NUMBER","index":11,"name":"day_of_month","comment":null,"description":"Day Number of the month, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_month"},"DAY_OF_QUARTER":{"type":"NUMBER","index":12,"name":"day_of_quarter","comment":null,"description":"Day Number from the start of the calendar quarter, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_quarter"},"DAY_OF_YEAR":{"type":"NUMBER","index":13,"name":"day_of_year","comment":null,"description":"Day Number from the start of the calendar year, e.g. '33' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_year"},"FISCAL_YEAR":{"type":"NUMBER","index":14,"name":"fiscal_year","comment":null,"description":"Fiscal year for the date, e.g. '2020' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_year"},"FISCAL_QUARTER":{"type":"TEXT","index":15,"name":"fiscal_quarter","comment":null,"description":"Fiscal quarter for the date, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_quarter"},"DAY_OF_FISCAL_QUARTER":{"type":"NUMBER","index":16,"name":"day_of_fiscal_quarter","comment":null,"description":"Day Number from the start of the fiscal quarter, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_fiscal_quarter"},"DAY_OF_FISCAL_YEAR":{"type":"NUMBER","index":17,"name":"day_of_fiscal_year","comment":null,"description":"Day Number from the start of the fiscal year, e.g. '2' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"day_of_fiscal_year"},"MONTH_NAME":{"type":"TEXT","index":18,"name":"month_name","comment":null,"description":"The full month name for any calendar month, e.g. 'February' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"month_name"},"FIRST_DAY_OF_MONTH":{"type":"DATE","index":19,"name":"first_day_of_month","comment":null,"description":"The first day of a calendar month, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_month"},"LAST_DAY_OF_MONTH":{"type":"DATE","index":20,"name":"last_day_of_month","comment":null,"description":"The last day of a calendar month, e.g. '2019-02-28' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_month"},"FIRST_DAY_OF_YEAR":{"type":"DATE","index":21,"name":"first_day_of_year","comment":null,"description":"The first day of a calendar year, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_year"},"LAST_DAY_OF_YEAR":{"type":"DATE","index":22,"name":"last_day_of_year","comment":null,"description":"The last day of a calendar year, e.g. '2019-12-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_year"},"FIRST_DAY_OF_QUARTER":{"type":"DATE","index":23,"name":"first_day_of_quarter","comment":null,"description":"The first day of a calendar quarter, e.g. '2019-01-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_quarter"},"LAST_DAY_OF_QUARTER":{"type":"DATE","index":24,"name":"last_day_of_quarter","comment":null,"description":"The last day of a calendar quarter, e.g. '2019-03-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_quarter"},"FIRST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":25,"name":"first_day_of_fiscal_quarter","comment":null,"description":"The first day of the fiscal quarter, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_fiscal_quarter"},"LAST_DAY_OF_FISCAL_QUARTER":{"type":"DATE","index":26,"name":"last_day_of_fiscal_quarter","comment":null,"description":"The last day of the fiscal quarter, e.g. '2019-04-30' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_fiscal_quarter"},"FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":27,"name":"first_day_of_fiscal_year","comment":null,"description":"The first day of the fiscal year, e.g. '2019-02-01' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"first_day_of_fiscal_year"},"LAST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":28,"name":"last_day_of_fiscal_year","comment":null,"description":"The last day of the fiscal year, e.g. '2020-01-31' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_fiscal_year"},"WEEK_OF_FISCAL_YEAR":{"type":"NUMBER","index":29,"name":"week_of_fiscal_year","comment":null,"description":"The week number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"week_of_fiscal_year"},"MONTH_OF_FISCAL_YEAR":{"type":"NUMBER","index":30,"name":"month_of_fiscal_year","comment":null,"description":"The month number for the fiscal year, e.g. '1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"month_of_fiscal_year"},"LAST_DAY_OF_WEEK":{"type":"DATE","index":31,"name":"last_day_of_week","comment":null,"description":"The Saturday of the week, e.g. '2019-02-02' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"last_day_of_week"},"QUARTER_NAME":{"type":"TEXT","index":32,"name":"quarter_name","comment":null,"description":"The name of the calendar quarter, e.g. '2019-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"quarter_name"},"FISCAL_QUARTER_NAME":{"type":"TEXT","index":33,"name":"fiscal_quarter_name","comment":null,"description":"The name of the fiscal quarter, e.g '2020-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_quarter_name"},"FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":34,"name":"fiscal_quarter_name_fy","comment":null,"description":"The name of the fiscal quarter, e.g 'FY20-Q1' for 2019-02-02","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"fiscal_quarter_name_fy"},"FISCAL_QUARTER_NUMBER_ABSOLUTE":{"type":"NUMBER","index":35,"name":"FISCAL_QUARTER_NUMBER_ABSOLUTE","comment":null,"display_name":"fiscal_quarter_number_absolute"},"FISCAL_MONTH_NAME":{"type":"TEXT","index":36,"name":"FISCAL_MONTH_NAME","comment":null,"display_name":"fiscal_month_name"},"FISCAL_MONTH_NAME_FY":{"type":"TEXT","index":37,"name":"FISCAL_MONTH_NAME_FY","comment":null,"display_name":"fiscal_month_name_fy"},"HOLIDAY_DESC":{"type":"TEXT","index":38,"name":"holiday_desc","comment":null,"description":"The name of the holiday, if applicable","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"holiday_desc"},"IS_HOLIDAY":{"type":"BOOLEAN","index":39,"name":"is_holiday","comment":null,"description":"Whether or not it is a holiday","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_holiday"},"LAST_MONTH_OF_FISCAL_QUARTER":{"type":"DATE","index":40,"name":"LAST_MONTH_OF_FISCAL_QUARTER","comment":null,"display_name":"last_month_of_fiscal_quarter"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER":{"type":"BOOLEAN","index":41,"name":"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_QUARTER","comment":null,"display_name":"is_first_day_of_last_month_of_fiscal_quarter"},"LAST_MONTH_OF_FISCAL_YEAR":{"type":"DATE","index":42,"name":"LAST_MONTH_OF_FISCAL_YEAR","comment":null,"display_name":"last_month_of_fiscal_year"},"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR":{"type":"BOOLEAN","index":43,"name":"IS_FIRST_DAY_OF_LAST_MONTH_OF_FISCAL_YEAR","comment":null,"display_name":"is_first_day_of_last_month_of_fiscal_year"},"SNAPSHOT_DATE_FPA":{"type":"DATE","index":44,"name":"SNAPSHOT_DATE_FPA","comment":null,"display_name":"snapshot_date_fpa"},"SNAPSHOT_DATE_BILLINGS":{"type":"DATE","index":45,"name":"SNAPSHOT_DATE_BILLINGS","comment":null,"display_name":"snapshot_date_billings"},"DAYS_IN_MONTH_COUNT":{"type":"NUMBER","index":46,"name":"DAYS_IN_MONTH_COUNT","comment":null,"display_name":"days_in_month_count"},"WEEK_OF_MONTH_NORMALISED":{"type":"NUMBER","index":47,"name":"WEEK_OF_MONTH_NORMALISED","comment":null,"display_name":"week_of_month_normalised"},"DAY_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":48,"name":"DAY_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"day_of_fiscal_quarter_normalised"},"WEEK_OF_FISCAL_QUARTER_NORMALISED":{"type":"NUMBER","index":49,"name":"WEEK_OF_FISCAL_QUARTER_NORMALISED","comment":null,"display_name":"week_of_fiscal_quarter_normalised"},"DAY_OF_FISCAL_YEAR_NORMALISED":{"type":"NUMBER","index":50,"name":"DAY_OF_FISCAL_YEAR_NORMALISED","comment":null,"display_name":"day_of_fiscal_year_normalised"},"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK":{"type":"NUMBER","index":51,"name":"IS_FIRST_DAY_OF_FISCAL_QUARTER_WEEK","comment":null,"display_name":"is_first_day_of_fiscal_quarter_week"},"DAYS_UNTIL_LAST_DAY_OF_MONTH":{"type":"NUMBER","index":52,"name":"DAYS_UNTIL_LAST_DAY_OF_MONTH","comment":null,"display_name":"days_until_last_day_of_month"},"CURRENT_DATE_ACTUAL":{"type":"DATE","index":53,"name":"CURRENT_DATE_ACTUAL","comment":null,"display_name":"current_date_actual"},"CURRENT_FISCAL_YEAR":{"type":"NUMBER","index":54,"name":"CURRENT_FISCAL_YEAR","comment":null,"display_name":"current_fiscal_year"},"CURRENT_FIRST_DAY_OF_FISCAL_YEAR":{"type":"DATE","index":55,"name":"CURRENT_FIRST_DAY_OF_FISCAL_YEAR","comment":null,"display_name":"current_first_day_of_fiscal_year"},"CURRENT_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":56,"name":"CURRENT_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"current_fiscal_quarter_name_fy"},"CURRENT_FIRST_DAY_OF_MONTH":{"type":"DATE","index":57,"name":"CURRENT_FIRST_DAY_OF_MONTH","comment":null,"display_name":"current_first_day_of_month"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.date_details","raw_sql":"WITH source AS (\n\n    SELECT *\n    FROM {{ ref('dim_date')}}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","date","date_details"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/date/date_details.sql","original_file_path":"models/legacy/date/date_details.sql","name":"date_details","alias":"date_details","checksum":{"name":"sha256","checksum":"4401b2363ba59daa347afc2beadfc88e103306b56dc93c1bdbb20e979b17e371"},"tags":[],"refs":[["dim_date"],["dim_date"]],"sources":[],"metrics":[],"description":"Join on this table to add additional date complexity","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/date/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/date/date_details.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view"},"created_at":1689033764.424968,"compiled_sql":"WITH source AS (\n\n    SELECT *\n    FROM \"PROD\".common.dim_date\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.date_details","label":"date_details"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_BILLING_ACCOUNT_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ZUORA_USER_ID":{"type":"TEXT","index":1,"name":"zuora_user_id","comment":null,"description":"Unique identifier of a Zuora Billing user","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"zuora_user_id"},"EMAIL":{"type":"TEXT","index":2,"name":"email","comment":null,"description":"email account associated with a Zuora Billing user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"first_name","comment":null,"description":"First name of Zuora Billing user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"last_name","comment":null,"description":"Last name of Zuora Billing user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"USER_NAME":{"type":"TEXT","index":5,"name":"user_name","comment":null,"description":"User name displayed in the UI for Zuora Billing user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_name"},"CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":6,"name":"created_date","comment":null,"description":"Date the Zuora Billing user was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_date"},"UPLOADED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"UPLOADED_AT","comment":null,"display_name":"uploaded_at"},"IS_INTEGRATION_USER":{"type":"NUMBER","index":8,"name":"is_integration_user","comment":null,"description":"A flag indentifying integration users based on Zuora Billing user last names.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_integration_user"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":25600,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_billing_account_user","raw_sql":"WITH source AS (\n\n    SELECT \n      *,\n      IFF(LOWER(last_name) LIKE '%integration%', 1, 0) AS is_integration_user\n    FROM {{ref('zuora_query_api_users_source')}}\n\n)\n\nSELECT *\nFROM source","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_query_api_users_source","model.gitlab_snowflake.zuora_query_api_users_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_billing_account_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_billing_account_user.sql","original_file_path":"models/common_prep/restricted_safe/prep_billing_account_user.sql","name":"prep_billing_account_user","alias":"prep_billing_account_user","checksum":{"name":"sha256","checksum":"d5175a147b5ab82536f8b01451b5ca8bb4d968ae3f593ec93831f09eb2076c2c"},"tags":["safe"],"refs":[["zuora_query_api_users_source"],["zuora_query_api_users_source"]],"sources":[],"metrics":[],"description":"Zuora Billing users","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_billing_account_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033756.8037844,"compiled_sql":"WITH source AS (\n\n    SELECT \n      *,\n      IFF(LOWER(last_name) LIKE '%integration%', 1, 0) AS is_integration_user\n    FROM \"PREP\".zuora_query_api.zuora_query_api_users_source\n\n)\n\nSELECT *\nFROM source","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_billing_account_user","label":"prep_billing_account_user"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_MAPPING","name":"MAP_MERGED_CRM_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SFDC_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"sfdc_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","crm_account"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"sfdc_account_id"},"MERGED_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"MERGED_ACCOUNT_ID","comment":null,"display_name":"merged_account_id"},"IS_DELETED":{"type":"BOOLEAN","index":3,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"},"IS_MERGED":{"type":"BOOLEAN","index":4,"name":"IS_MERGED","comment":null,"display_name":"is_merged"},"DELETED_NOT_MERGED":{"type":"BOOLEAN","index":5,"name":"DELETED_NOT_MERGED","comment":null,"display_name":"deleted_not_merged"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","crm_account"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"CREATED_BY":{"type":"TEXT","index":7,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":8,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":9,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":10,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":11,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:52UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4833280,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_merged_crm_account","raw_sql":"$31","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_account_snapshots_source","model.gitlab_snowflake.sfdc_account_snapshots_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_mapping","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_mapping","fqn":["gitlab_snowflake","common_mapping","restricted_safe","map_merged_crm_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/restricted_safe/map_merged_crm_account.sql","original_file_path":"models/common_mapping/restricted_safe/map_merged_crm_account.sql","name":"map_merged_crm_account","alias":"map_merged_crm_account","checksum":{"name":"sha256","checksum":"4749d641901a5bd3b7a5503d3a3f81baf559fdb39972cea2c5df1b8dc4a7bac4"},"tags":["safe"],"refs":[["sfdc_account_snapshots_source"],["sfdc_account_snapshots_source"],["sfdc_account_source"],["sfdc_account_source"],["sfdc_account_source"],["sfdc_account_source"]],"sources":[],"metrics":[],"description":"This table maps an original crm_account_id to its final, non-deleted crm_account_id if the original crm_id has been deleted and merged. If the account has not been deleted and merged, the non-deleted crm_account_id is equal to the original crm_account_id.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/restricted_safe/map_merged_crm_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033765.845014,"compiled_sql":"$32","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_mapping.map_merged_crm_account","label":"map_merged_crm_account"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$33","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.simple_cte","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/simple_cte.sql","original_file_path":"macros/utils/simple_cte.sql","name":"simple_cte","macro_sql":"{% macro simple_cte(tuple_list) %}\n\nWITH{% for cte_ref in tuple_list %} {{cte_ref[0]}} AS (\n\n    SELECT * \n    FROM {{ ref(cte_ref[1]) }}\n\n)\n    {%- if not loop.last -%}\n    ,\n    {%- endif -%}\n    \n    {%- endfor -%}\n\n{%- endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"$34","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"tuple_list","type":"list","description":"List of tuples with the alias as the first item and the dbt table reference as the second item."}],"created_at":1689033766.0494742},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527}]},"node":{"resource_type":"model","name":"prep_subscription","unique_id":"model.gitlab_snowflake.prep_subscription"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L35",null,{"versions":{"Source":"$36","Compiled":"$37"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
