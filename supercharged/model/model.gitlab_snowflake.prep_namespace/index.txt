1:HL["/supercharged-dbt-docs/supercharged/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css",{"as":"style"}]
0:["3_N3LAWgtmWGg2et9V1N1",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.prep_namespace","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.prep_namespace\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/supercharged-dbt-docs/supercharged/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_5f725a","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.prep_namespace","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.prep_namespace\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.prep_namespace","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ReferenceListClient","async":false}
4d:I{"id":4431,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:T1f62,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('namespace_current', 'gitlab_dotcom_namespaces_source'),
    ('namespace_snapshots', 'prep_namespace_hist'),
    ('namespace_settings', 'gitlab_dotcom_namespace_settings_source'),
    ('namespace_lineage_historical', 'gitlab_dotcom_namespace_lineage_historical_daily'),
    ('map_namespace_internal', 'map_namespace_internal'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('product_tiers', 'prep_product_tier'),
    ('members_source', 'gitlab_dotcom_members_source'),
    ('projects_source', 'gitlab_dotcom_projects_source'),
    ('audit_events', 'gitlab_dotcom_audit_events_source'),
    ('audit_event_details_clean', 'prep_audit_event_details_clean'),
    ('users', 'prep_user')
]) }},

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND {{ filter_out_blocked_users('members_source', 'user_id') }}
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    {{ get_keyed_nulls('saas_product_tiers.dim_product_tier_id') }}         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-01-14",
    updated_date="2023-06-22"
) }}11:T22ae,



WITH namespace_current AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), namespace_snapshots AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_hist

), namespace_settings AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_settings_source

), namespace_lineage_historical AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), projects_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), audit_events AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_audit_events_source

), audit_event_details_clean AS (

    SELECT * 
    FROM "PROD".common_prep.prep_audit_event_details_clean

), users AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

),

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members_source.user_id

    )
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    

  COALESCE(saas_product_tiers.dim_product_tier_id, MD5(-1)) 

         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-14'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined13:T1783,{{ simple_cte ([
  ('gitlab_namespaces', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_members', 'gitlab_dotcom_members_source'),
  ('gitlab_users', 'gitlab_dotcom_users_source'),
  ('customer_db_source', 'customers_db_customers_source'),
  ('zuora_account', 'zuora_account_source'),
  ('zuora_contact', 'zuora_contact_source'),
  ('dim_marketing_contact', 'dim_marketing_contact'),
  ('prep_namespace', 'prep_namespace')
]) }}

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2022-10-03"
) }}14:T19aa,

WITH gitlab_namespaces AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_members AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_users AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_customers_source

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

)

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2022-10-03'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final15:T4a63,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('marketing_contact', 'dim_marketing_contact'),
    ('marketing_contact_role', 'bdg_marketing_contact_role'),
    ('namespace_lineage', 'prep_namespace'),
    ('project', 'prep_project'),
    ('gitlab_namespaces', 'gitlab_dotcom_namespaces_source'),
    ('instance_metric_wave', 'fct_ping_instance_metric_wave_monthly')
]) }}

, namespace_project_visibility AS (

    SELECT
      dim_namespace_id,
      MAX(IFF(visibility_level = 'public', TRUE, FALSE)) AS does_namespace_have_public_project
    FROM project
    GROUP BY 1

), free_namespace_project_visibility AS (

    SELECT
      project.dim_namespace_id,
      MAX(IFF(namespace_lineage.gitlab_plan_title = 'Free' AND project.visibility_level = 'public', TRUE, FALSE)) AS does_free_namespace_have_public_project
    FROM project
    LEFT JOIN namespace_lineage
      ON project.dim_namespace_id = namespace_lineage.dim_namespace_id
    GROUP BY 1

), saas_namespace_subscription AS (
    
    SELECT *
    FROM {{ref('bdg_namespace_order_subscription')}}
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), self_managed_namespace_subscription AS (
    
    SELECT *
    FROM {{ref('bdg_self_managed_order_subscription')}}
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), instance_metric_wave_aggregate AS (

    SELECT 
      dim_subscription_id,
      umau_28_days_user,
      action_monthly_active_users_project_repo_28_days_user,
      merge_requests_28_days_user,
      commit_comment_all_time_event,
      source_code_pushes_all_time_event,
      ci_pipelines_28_days_user,
      ci_internal_pipelines_28_days_user,
      ci_builds_28_days_user,
      ci_builds_all_time_user,
      ci_builds_all_time_event,
      ci_runners_all_time_event,
      auto_devops_enabled_all_time_event,
      template_repositories_all_time_event,
      ci_pipeline_config_repository_28_days_user,
      user_unique_users_all_secure_scanners_28_days_user,
      user_container_scanning_jobs_28_days_user,
      user_sast_jobs_28_days_user,
      user_dast_jobs_28_days_user,
      user_dependency_scanning_jobs_28_days_user,
      user_license_management_jobs_28_days_user,
      user_secret_detection_jobs_28_days_user,
      projects_with_packages_all_time_event,
      projects_with_packages_28_days_event,
      deployments_28_days_user,
      releases_28_days_user,
      epics_28_days_user,
      issues_28_days_user,
      instance_user_count_not_aligned,
      historical_max_users_not_aligned
    FROM instance_metric_wave
    WHERE snapshot_month = DATE_TRUNC(MONTH, CURRENT_DATE)

), prep AS (

     SELECT DISTINCT
      marketing_contact.dim_marketing_contact_id,
      marketing_contact_role.marketing_contact_role,
      marketing_contact.email_address, 
      COALESCE(marketing_contact_role.namespace_id, 
               saas_namespace.dim_namespace_id, 
               saas_customer.dim_namespace_id, 
               saas_billing_account.dim_namespace_id)                                         AS dim_namespace_id,
      gitlab_namespaces.namespace_path,
      namespace_lineage.namespace_is_ultimate_parent                                          AS is_ultimate_parent_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'User' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_individual_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'Group' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_group_namespace,
      namespace_lineage.is_setup_for_company                                                  AS is_setup_for_company,
      namespace_project_visibility.does_namespace_have_public_project                         AS does_namespace_have_public_project,
      free_namespace_project_visibility.does_free_namespace_have_public_project               AS does_free_namespace_have_public_project,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'public', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_public,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'private', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_private,
      marketing_contact_role.customer_db_customer_id                                          AS customer_id,
      marketing_contact_role.zuora_billing_account_id                                         AS dim_billing_account_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.dim_subscription_id
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.dim_subscription_id
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.dim_subscription_id
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.dim_subscription_id
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.dim_subscription_id
      END                                                                                     AS dim_subscription_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_start_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_start_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_start_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_start_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_start_date
      END                                                                                     AS subscription_start_date,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_end_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_end_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_end_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_end_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_end_date
      END                                                                                     AS subscription_end_date,
      CASE 
        WHEN marketing_contact_role.namespace_id IS NOT NULL 
          AND saas_namespace.product_tier_name_namespace is NULL
          THEN 'SaaS - Free' 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Personal Namespace Owner'
                                                                , 'Group Namespace Owner'
                                                                , 'Group Namespace Member'
                                                                , 'Group Namespace Maintainer'
                                                              ) 
          THEN saas_namespace.product_tier_name_namespace
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN saas_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN saas_billing_account.product_tier_name_subscription     
      END                                                                                     AS saas_product_tier,
      CASE 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN self_managed_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN self_managed_billing_account.product_tier_name_subscription     
      END                                                                                     AS self_managed_product_tier,
      CASE 
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate' 
          OR saas_customer.order_is_trial = TRUE 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_trial,
      CASE 
        WHEN saas_customer.order_is_trial 
          THEN CAST(saas_customer.order_end_date AS DATE)
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate'
          THEN CAST(COALESCE(saas_namespace.saas_trial_expired_on, saas_namespace.order_end_date) AS DATE)
      END                                                                                     AS trial_end_date,    
      IFF(trial_end_date < CURRENT_DATE, CURRENT_DATE - trial_end_date, NULL)                 AS days_since_saas_trial_ended,
      {{ days_buckets('days_since_saas_trial_ended') }}                                       AS days_since_saas_trial_ended_bucket,
      CASE 
        WHEN trial_end_date IS NOT NULL AND CURRENT_DATE <= trial_end_date
          THEN trial_end_date - CURRENT_DATE
      END                                                                                     AS days_until_saas_trial_ends,
      {{ days_buckets('days_until_saas_trial_ends') }}                                        AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN saas_product_tier = 'SaaS - Free' 
          THEN 1
        ELSE 0
      END                                                                                     AS is_saas_free_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Bronze' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_bronze_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_premium_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_ultimate_tier,       
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Starter' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_starter_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_premium_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_ultimate_tier
    
    FROM marketing_contact_role 
    INNER JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = marketing_contact_role.dim_marketing_contact_id
    LEFT JOIN saas_namespace_subscription saas_namespace 
      ON saas_namespace.dim_namespace_id = marketing_contact_role.namespace_id
    LEFT JOIN saas_namespace_subscription saas_customer 
      ON saas_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN saas_namespace_subscription saas_billing_account 
      ON saas_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN self_managed_namespace_subscription self_managed_customer 
      ON self_managed_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN self_managed_namespace_subscription self_managed_billing_account 
      ON self_managed_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN namespace_lineage 
      ON namespace_lineage.dim_namespace_id = COALESCE(marketing_contact_role.namespace_id,
                                                   saas_namespace.dim_namespace_id,
                                                   saas_customer.dim_namespace_id,
                                                   saas_billing_account.dim_namespace_id)
    LEFT JOIN gitlab_namespaces 
      ON namespace_lineage.dim_namespace_id = gitlab_namespaces.namespace_id
    LEFT JOIN namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = namespace_project_visibility.dim_namespace_id
    LEFT JOIN free_namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = free_namespace_project_visibility.dim_namespace_id
      
), final AS (

    SELECT 
      prep.*,
      instance_metric_wave_aggregate.umau_28_days_user                                                                          AS usage_umau_28_days_user,
      instance_metric_wave_aggregate.action_monthly_active_users_project_repo_28_days_user                                      AS usage_action_monthly_active_users_project_repo_28_days_user,
      instance_metric_wave_aggregate.merge_requests_28_days_user                                                                AS usage_merge_requests_28_days_user,
      instance_metric_wave_aggregate.commit_comment_all_time_event                                                              AS usage_commit_comment_all_time_event,
      instance_metric_wave_aggregate.source_code_pushes_all_time_event                                                          AS usage_source_code_pushes_all_time_event,
      instance_metric_wave_aggregate.ci_pipelines_28_days_user                                                                  AS usage_ci_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_internal_pipelines_28_days_user                                                         AS usage_ci_internal_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_builds_28_days_user                                                                     AS usage_ci_builds_28_days_user,
      instance_metric_wave_aggregate.ci_builds_all_time_user                                                                    AS usage_ci_builds_all_time_user,
      instance_metric_wave_aggregate.ci_builds_all_time_event                                                                   AS usage_ci_builds_all_time_event,
      instance_metric_wave_aggregate.ci_runners_all_time_event                                                                  AS usage_ci_runners_all_time_event,
      instance_metric_wave_aggregate.auto_devops_enabled_all_time_event                                                         AS usage_auto_devops_enabled_all_time_event,
      instance_metric_wave_aggregate.template_repositories_all_time_event                                                       AS usage_template_repositories_all_time_event,
      instance_metric_wave_aggregate.ci_pipeline_config_repository_28_days_user                                                 AS usage_ci_pipeline_config_repository_28_days_user,
      instance_metric_wave_aggregate.user_unique_users_all_secure_scanners_28_days_user                                         AS usage_user_unique_users_all_secure_scanners_28_days_user,
      instance_metric_wave_aggregate.user_container_scanning_jobs_28_days_user                                                  AS usage_user_container_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_sast_jobs_28_days_user                                                                AS usage_user_sast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dast_jobs_28_days_user                                                                AS usage_user_dast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dependency_scanning_jobs_28_days_user                                                 AS usage_user_dependency_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_license_management_jobs_28_days_user                                                  AS usage_user_license_management_jobs_28_days_user,
      instance_metric_wave_aggregate.user_secret_detection_jobs_28_days_user                                                    AS usage_user_secret_detection_jobs_28_days_user,
      instance_metric_wave_aggregate.projects_with_packages_all_time_event                                                      AS usage_projects_with_packages_all_time_event,
      instance_metric_wave_aggregate.projects_with_packages_28_days_event                                                       AS usage_projects_with_packages_28_days_event,
      instance_metric_wave_aggregate.deployments_28_days_user                                                                   AS usage_deployments_28_days_user,
      instance_metric_wave_aggregate.releases_28_days_user                                                                      AS usage_releases_28_days_user,
      instance_metric_wave_aggregate.epics_28_days_user                                                                         AS usage_epics_28_days_user,
      instance_metric_wave_aggregate.issues_28_days_user                                                                        AS usage_issues_28_days_user,
      instance_metric_wave_aggregate.instance_user_count_not_aligned                                                            AS usage_instance_user_count_not_aligned,
      instance_metric_wave_aggregate.historical_max_users_not_aligned                                                           AS usage_historical_max_users_not_aligned
    FROM prep
    LEFT JOIN instance_metric_wave_aggregate
      ON instance_metric_wave_aggregate.dim_subscription_id = prep.dim_subscription_id

)
    

{{ dbt_audit(
    cte_ref="final",
    created_by="@trevor31",
    updated_by="@jpeguero",
    created_date="2021-02-04",
    updated_date="2022-10-17"
) }}16:T5329,



WITH marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), marketing_contact_role AS (

    SELECT * 
    FROM "PREP".sensitive.bdg_marketing_contact_role

), namespace_lineage AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), gitlab_namespaces AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), instance_metric_wave AS (

    SELECT * 
    FROM "PROD".common.fct_ping_instance_metric_wave_monthly

)

, namespace_project_visibility AS (

    SELECT
      dim_namespace_id,
      MAX(IFF(visibility_level = 'public', TRUE, FALSE)) AS does_namespace_have_public_project
    FROM project
    GROUP BY 1

), free_namespace_project_visibility AS (

    SELECT
      project.dim_namespace_id,
      MAX(IFF(namespace_lineage.gitlab_plan_title = 'Free' AND project.visibility_level = 'public', TRUE, FALSE)) AS does_free_namespace_have_public_project
    FROM project
    LEFT JOIN namespace_lineage
      ON project.dim_namespace_id = namespace_lineage.dim_namespace_id
    GROUP BY 1

), saas_namespace_subscription AS (
    
    SELECT *
    FROM "PROD".common.bdg_namespace_order_subscription
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), self_managed_namespace_subscription AS (
    
    SELECT *
    FROM "PROD".common.bdg_self_managed_order_subscription
    WHERE is_subscription_active = TRUE
      OR dim_subscription_id IS NULL

), instance_metric_wave_aggregate AS (

    SELECT 
      dim_subscription_id,
      umau_28_days_user,
      action_monthly_active_users_project_repo_28_days_user,
      merge_requests_28_days_user,
      commit_comment_all_time_event,
      source_code_pushes_all_time_event,
      ci_pipelines_28_days_user,
      ci_internal_pipelines_28_days_user,
      ci_builds_28_days_user,
      ci_builds_all_time_user,
      ci_builds_all_time_event,
      ci_runners_all_time_event,
      auto_devops_enabled_all_time_event,
      template_repositories_all_time_event,
      ci_pipeline_config_repository_28_days_user,
      user_unique_users_all_secure_scanners_28_days_user,
      user_container_scanning_jobs_28_days_user,
      user_sast_jobs_28_days_user,
      user_dast_jobs_28_days_user,
      user_dependency_scanning_jobs_28_days_user,
      user_license_management_jobs_28_days_user,
      user_secret_detection_jobs_28_days_user,
      projects_with_packages_all_time_event,
      projects_with_packages_28_days_event,
      deployments_28_days_user,
      releases_28_days_user,
      epics_28_days_user,
      issues_28_days_user,
      instance_user_count_not_aligned,
      historical_max_users_not_aligned
    FROM instance_metric_wave
    WHERE snapshot_month = DATE_TRUNC(MONTH, CURRENT_DATE)

), prep AS (

     SELECT DISTINCT
      marketing_contact.dim_marketing_contact_id,
      marketing_contact_role.marketing_contact_role,
      marketing_contact.email_address, 
      COALESCE(marketing_contact_role.namespace_id, 
               saas_namespace.dim_namespace_id, 
               saas_customer.dim_namespace_id, 
               saas_billing_account.dim_namespace_id)                                         AS dim_namespace_id,
      gitlab_namespaces.namespace_path,
      namespace_lineage.namespace_is_ultimate_parent                                          AS is_ultimate_parent_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'User' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_individual_namespace,
      CASE 
        WHEN namespace_lineage.namespace_type = 'Group' 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_group_namespace,
      namespace_lineage.is_setup_for_company                                                  AS is_setup_for_company,
      namespace_project_visibility.does_namespace_have_public_project                         AS does_namespace_have_public_project,
      free_namespace_project_visibility.does_free_namespace_have_public_project               AS does_free_namespace_have_public_project,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'public', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_public,
      IFF(namespace_lineage.namespace_is_ultimate_parent AND namespace_lineage.visibility_level = 'private', TRUE, FALSE)
                                                                                              AS is_ultimate_parent_namespace_private,
      marketing_contact_role.customer_db_customer_id                                          AS customer_id,
      marketing_contact_role.zuora_billing_account_id                                         AS dim_billing_account_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.dim_subscription_id
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.dim_subscription_id
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.dim_subscription_id
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.dim_subscription_id
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.dim_subscription_id
      END                                                                                     AS dim_subscription_id,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_start_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_start_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_start_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_start_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_start_date
      END                                                                                     AS subscription_start_date,
      CASE
        WHEN saas_namespace.dim_namespace_id IS NOT NULL
          THEN saas_namespace.subscription_end_date
        WHEN saas_customer.dim_namespace_id IS NOT NULL
          THEN saas_customer.subscription_end_date
        WHEN saas_billing_account.dim_namespace_id IS NOT NULL
          THEN saas_billing_account.subscription_end_date
        WHEN self_managed_customer.customer_id IS NOT NULL
          THEN self_managed_customer.subscription_end_date
        WHEN self_managed_billing_account.customer_id IS NOT NULL
          THEN self_managed_billing_account.subscription_end_date
      END                                                                                     AS subscription_end_date,
      CASE 
        WHEN marketing_contact_role.namespace_id IS NOT NULL 
          AND saas_namespace.product_tier_name_namespace is NULL
          THEN 'SaaS - Free' 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Personal Namespace Owner'
                                                                , 'Group Namespace Owner'
                                                                , 'Group Namespace Member'
                                                                , 'Group Namespace Maintainer'
                                                              ) 
          THEN saas_namespace.product_tier_name_namespace
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN saas_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN saas_billing_account.product_tier_name_subscription     
      END                                                                                     AS saas_product_tier,
      CASE 
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Customer DB Owner'
                                                              ) 
          THEN self_managed_customer.product_tier_name_with_trial   
        WHEN marketing_contact_role.marketing_contact_role IN (
                                                                'Zuora Billing Contact'
                                                              ) 
          THEN self_managed_billing_account.product_tier_name_subscription     
      END                                                                                     AS self_managed_product_tier,
      CASE 
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate' 
          OR saas_customer.order_is_trial = TRUE 
          THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_trial,
      CASE 
        WHEN saas_customer.order_is_trial 
          THEN CAST(saas_customer.order_end_date AS DATE)
        WHEN saas_namespace.product_tier_name_with_trial = 'SaaS - Trial: Ultimate'
          THEN CAST(COALESCE(saas_namespace.saas_trial_expired_on, saas_namespace.order_end_date) AS DATE)
      END                                                                                     AS trial_end_date,    
      IFF(trial_end_date < CURRENT_DATE, CURRENT_DATE - trial_end_date, NULL)                 AS days_since_saas_trial_ended,
      CASE 
  WHEN days_since_saas_trial_ended BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_saas_trial_ended BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_saas_trial_ended BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_saas_trial_ended BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_saas_trial_ended BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_saas_trial_ended BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_saas_trial_ended BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_saas_trial_ended BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_saas_trial_ended BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_saas_trial_ended BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_saas_trial_ended BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_saas_trial_ended > 1095
    THEN '[12] 3+ Years'
END                                       AS days_since_saas_trial_ended_bucket,
      CASE 
        WHEN trial_end_date IS NOT NULL AND CURRENT_DATE <= trial_end_date
          THEN trial_end_date - CURRENT_DATE
      END                                                                                     AS days_until_saas_trial_ends,
      CASE 
  WHEN days_until_saas_trial_ends BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_until_saas_trial_ends BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_until_saas_trial_ends BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_until_saas_trial_ends BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_until_saas_trial_ends BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_until_saas_trial_ends BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_until_saas_trial_ends BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_until_saas_trial_ends BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_until_saas_trial_ends BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_until_saas_trial_ends BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_until_saas_trial_ends BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_until_saas_trial_ends > 1095
    THEN '[12] 3+ Years'
END                                        AS days_until_saas_trial_ends_bucket,
      CASE 
        WHEN saas_product_tier = 'SaaS - Free' 
          THEN 1
        ELSE 0
      END                                                                                     AS is_saas_free_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Bronze' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_bronze_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_premium_tier,
      CASE 
        WHEN saas_product_tier = 'SaaS - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_saas_ultimate_tier,       
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Starter' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_starter_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Premium' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_premium_tier,
      CASE 
        WHEN self_managed_product_tier = 'Self-Managed - Ultimate' THEN 1 
        ELSE 0 
      END                                                                                     AS is_self_managed_ultimate_tier
    
    FROM marketing_contact_role 
    INNER JOIN marketing_contact 
      ON marketing_contact.dim_marketing_contact_id = marketing_contact_role.dim_marketing_contact_id
    LEFT JOIN saas_namespace_subscription saas_namespace 
      ON saas_namespace.dim_namespace_id = marketing_contact_role.namespace_id
    LEFT JOIN saas_namespace_subscription saas_customer 
      ON saas_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN saas_namespace_subscription saas_billing_account 
      ON saas_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN self_managed_namespace_subscription self_managed_customer 
      ON self_managed_customer.customer_id = marketing_contact_role.customer_db_customer_id
    LEFT JOIN self_managed_namespace_subscription self_managed_billing_account 
      ON self_managed_billing_account.dim_billing_account_id = marketing_contact_role.zuora_billing_account_id   
    LEFT JOIN namespace_lineage 
      ON namespace_lineage.dim_namespace_id = COALESCE(marketing_contact_role.namespace_id,
                                                   saas_namespace.dim_namespace_id,
                                                   saas_customer.dim_namespace_id,
                                                   saas_billing_account.dim_namespace_id)
    LEFT JOIN gitlab_namespaces 
      ON namespace_lineage.dim_namespace_id = gitlab_namespaces.namespace_id
    LEFT JOIN namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = namespace_project_visibility.dim_namespace_id
    LEFT JOIN free_namespace_project_visibility
      ON namespace_lineage.dim_namespace_id = free_namespace_project_visibility.dim_namespace_id
      
), final AS (

    SELECT 
      prep.*,
      instance_metric_wave_aggregate.umau_28_days_user                                                                          AS usage_umau_28_days_user,
      instance_metric_wave_aggregate.action_monthly_active_users_project_repo_28_days_user                                      AS usage_action_monthly_active_users_project_repo_28_days_user,
      instance_metric_wave_aggregate.merge_requests_28_days_user                                                                AS usage_merge_requests_28_days_user,
      instance_metric_wave_aggregate.commit_comment_all_time_event                                                              AS usage_commit_comment_all_time_event,
      instance_metric_wave_aggregate.source_code_pushes_all_time_event                                                          AS usage_source_code_pushes_all_time_event,
      instance_metric_wave_aggregate.ci_pipelines_28_days_user                                                                  AS usage_ci_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_internal_pipelines_28_days_user                                                         AS usage_ci_internal_pipelines_28_days_user,
      instance_metric_wave_aggregate.ci_builds_28_days_user                                                                     AS usage_ci_builds_28_days_user,
      instance_metric_wave_aggregate.ci_builds_all_time_user                                                                    AS usage_ci_builds_all_time_user,
      instance_metric_wave_aggregate.ci_builds_all_time_event                                                                   AS usage_ci_builds_all_time_event,
      instance_metric_wave_aggregate.ci_runners_all_time_event                                                                  AS usage_ci_runners_all_time_event,
      instance_metric_wave_aggregate.auto_devops_enabled_all_time_event                                                         AS usage_auto_devops_enabled_all_time_event,
      instance_metric_wave_aggregate.template_repositories_all_time_event                                                       AS usage_template_repositories_all_time_event,
      instance_metric_wave_aggregate.ci_pipeline_config_repository_28_days_user                                                 AS usage_ci_pipeline_config_repository_28_days_user,
      instance_metric_wave_aggregate.user_unique_users_all_secure_scanners_28_days_user                                         AS usage_user_unique_users_all_secure_scanners_28_days_user,
      instance_metric_wave_aggregate.user_container_scanning_jobs_28_days_user                                                  AS usage_user_container_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_sast_jobs_28_days_user                                                                AS usage_user_sast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dast_jobs_28_days_user                                                                AS usage_user_dast_jobs_28_days_user,
      instance_metric_wave_aggregate.user_dependency_scanning_jobs_28_days_user                                                 AS usage_user_dependency_scanning_jobs_28_days_user,
      instance_metric_wave_aggregate.user_license_management_jobs_28_days_user                                                  AS usage_user_license_management_jobs_28_days_user,
      instance_metric_wave_aggregate.user_secret_detection_jobs_28_days_user                                                    AS usage_user_secret_detection_jobs_28_days_user,
      instance_metric_wave_aggregate.projects_with_packages_all_time_event                                                      AS usage_projects_with_packages_all_time_event,
      instance_metric_wave_aggregate.projects_with_packages_28_days_event                                                       AS usage_projects_with_packages_28_days_event,
      instance_metric_wave_aggregate.deployments_28_days_user                                                                   AS usage_deployments_28_days_user,
      instance_metric_wave_aggregate.releases_28_days_user                                                                      AS usage_releases_28_days_user,
      instance_metric_wave_aggregate.epics_28_days_user                                                                         AS usage_epics_28_days_user,
      instance_metric_wave_aggregate.issues_28_days_user                                                                        AS usage_issues_28_days_user,
      instance_metric_wave_aggregate.instance_user_count_not_aligned                                                            AS usage_instance_user_count_not_aligned,
      instance_metric_wave_aggregate.historical_max_users_not_aligned                                                           AS usage_historical_max_users_not_aligned
    FROM prep
    LEFT JOIN instance_metric_wave_aggregate
      ON instance_metric_wave_aggregate.dim_subscription_id = prep.dim_subscription_id

)
    

SELECT
      *,
      '@trevor31'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-02-04'::DATE        AS model_created_date,
      '2022-10-17'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final17:T6d08,{{ config(
    tags=["product"]
) }}

{% set year_value = var('year', (run_started_at - modules.datetime.timedelta(2)).strftime('%Y')) %}
{% set month_value = var('month', (run_started_at - modules.datetime.timedelta(2)).strftime('%m')) %}
   

{%- set event_ctes = [
  {
    "event_name": "action",
    "source_cte_name": "prep_action",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "manage"
  },
  {
    "event_name": "dast_build_run",
    "source_cte_name": "dast_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "dependency_scanning_build_run",
    "source_cte_name": "dependency_scanning_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "deployment_creation",
    "source_cte_name": "prep_deployment",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_deployment_id",
    "stage_name": "release"
  },
  {
    "event_name": "epic_creation",
    "source_cte_name": "prep_epic",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "NULL",
    "primary_key": "dim_epic_id",
    "stage_name": "plan"
  },
  {
    "event_name": "issue_creation_other",
    "source_cte_name": "issue_creation_other_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_issue_id",
    "stage_name": "plan"
  },
  {
    "event_name": "issue_note_creation",
    "source_cte_name": "issue_note",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_note_id",
    "stage_name": "plan"
  },
  {
    "event_name": "license_scanning_build_run",
    "source_cte_name": "license_scanning_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "merge_request_creation",
    "source_cte_name": "prep_merge_request",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_merge_request_id",
    "stage_name": "create"
  },
  {
    "event_name": "merge_request_note_creation",
    "source_cte_name": "merge_request_note",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_note_id",
    "stage_name": "create"
  },
  {
    "event_name": "ci_pipeline_creation",
    "source_cte_name": "prep_ci_pipeline",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_pipeline_id",
    "stage_name": "verify"
  },
  {
    "event_name": "package_creation",
    "source_cte_name": "prep_package",
    "user_column_name": "creator_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_package_id",
    "stage_name": "package"
  },
  {
    "event_name": "container_scanning_build_run",
    "source_cte_name": "protect_ci_build",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "protect"
  },
  {
    "event_name": "push_action",
    "source_cte_name": "push_actions",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "release_creation",
    "source_cte_name": "prep_release",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_release_id",
    "stage_name": "release"
  },
  {
    "event_name": "requirement_creation",
    "source_cte_name": "prep_requirement",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_requirement_id",
    "stage_name": "plan"
  },
  {
    "event_name": "sast_build_run",
    "source_cte_name": "sast_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "secret_detection_build_run",
    "source_cte_name": "secret_detection_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "other_ci_build_creation",
    "source_cte_name": "other_ci_build",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "verify"
  },
  {
    "event_name": "successful_ci_pipeline_creation",
    "source_cte_name": "successful_ci_pipelines",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_pipeline_id",
    "stage_name": "verify"
  },
  {
    "event_name": "action_monthly_active_users_project_repo",
    "source_cte_name": "monthly_active_users_project_repo",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "ci_stages",
    "source_cte_name": "prep_ci_stage",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_stage_id",
    "stage_name": "configure"
  },
  {
    "event_name": "notes_other",
    "source_cte_name": "other_notes_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_note_id",
    "stage_name": "plan"
  },
  {
    "event_name": "todos",
    "source_cte_name": "prep_todo",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_todo_id",
    "stage_name": "plan"
  },
  {
    "event_name": "issue_resource_label_events",
    "source_cte_name": "issue_resource_label_events",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_issue_label_id",
    "stage_name": "plan"
  },
  {
    "event_name": "environments",
    "source_cte_name": "prep_environment_event",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_environment_id",
    "stage_name": "release"
  },
  {
    "event_name": "issue_resource_milestone_events",
    "source_cte_name": "issue_resource_milestone",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_resource_milestone_id",
    "stage_name": "plan"
  },
  {
    "event_name": "labels",
    "source_cte_name": "prep_labels",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_label_id",
    "stage_name": "plan"
  },
  {
    "event_name": "terraform_reports",
    "source_cte_name": "terraform_reports_events",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_job_artifact_id",
    "stage_name": "configure"
  },
  {
    "event_name": "users_created",
    "source_cte_name": "prep_user_event",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "NULL",
    "project_column_name": "NULL",
    "primary_key": "dim_user_id",
    "stage_name": "manage"
  },
  {
    "event_name": "action_monthly_active_users_wiki_repo",
    "source_cte_name": "action_monthly_active_users_wiki_repo_source",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "epic_notes",
    "source_cte_name": "epic_notes_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "NULL",
    "primary_key": "dim_note_id",
    "stage_name": "plan"
  },
  {
    "event_name": "boards",
    "source_cte_name": "prep_board",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_board_id",
    "stage_name": "plan"
  },
  {
    "event_name": "project_auto_devops",
    "source_cte_name": "prep_project_auto_devops",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_auto_devops_id",
    "stage_name": "configure"
  },
  {
    "event_name": "integrations",
    "source_cte_name": "prep_service",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_service_id",
    "stage_name": "create"
  },
  {
    "event_name": "issue_resource_weight_events",
    "source_cte_name": "prep_issue_resource_weight",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_resource_weight_id",
    "stage_name": "plan"
  },
  {
    "event_name": "milestones",
    "source_cte_name": "prep_milestone",
    "user_column_name": "NULL",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_milestone_id",
    "stage_name": "plan"
  },
  {
    "event_name": "action_monthly_active_users_design_management",
    "source_cte_name": "action_monthly_active_users_design_management_source",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_action_id",
    "stage_name": "create"
  },
  {
    "event_name": "ci_pipeline_schedules",
    "source_cte_name": "prep_ci_pipeline_schedule",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_pipeline_schedule_id",
    "stage_name": "verify"
  },
  {
    "event_name": "snippets",
    "source_cte_name": "prep_snippet",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_snippet_id",
    "stage_name": "create"
  },
  {
    "event_name": "projects_prometheus_active",
    "source_cte_name": "project_prometheus_source",
    "user_column_name": "dim_user_id_creator",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_project_id",
    "stage_name": "monitor"
  },
  {
    "event_name": "ci_triggers",
    "source_cte_name": "prep_ci_trigger",
    "user_column_name": "owner_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_trigger_id",
    "stage_name": "verify"
  },
  {
    "event_name": "incident_labeled_issues",
    "source_cte_name": "incident_labeled_issues_source",
    "user_column_name": "author_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_issue_id",
    "stage_name": "monitor"
  },
  {
    "event_name": "api_fuzzing_build_run",
    "source_cte_name": "api_fuzzing_jobs",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "dim_ci_build_id",
    "stage_name": "secure"
  },
  {
    "event_name": "kubernetes_with_agent",
    "source_cte_name": "prep_cluster_agent",
    "user_column_name": "dim_user_id",
    "ultimate_parent_namespace_column_name": "ultimate_parent_namespace_id",
    "project_column_name": "dim_project_id",
    "primary_key": "cluster_agent_id",
    "stage_name": "configure"
  }
]

-%}

{{ simple_cte([
    ('prep_ci_pipeline', 'prep_ci_pipeline'),
    ('prep_action', 'prep_action'),
    ('prep_ci_build', 'prep_ci_build'),
    ('prep_deployment', 'prep_deployment'),
    ('prep_epic', 'prep_epic'),
    ('prep_issue', 'prep_issue'),
    ('prep_merge_request', 'prep_merge_request'),
    ('prep_note', 'prep_note'),
    ('prep_package', 'prep_package'),
    ('prep_release', 'prep_release'),
    ('prep_requirement', 'prep_requirement'),
    ('dim_project', 'dim_project'),
    ('prep_namespace', 'prep_namespace'),
    ('prep_user', 'prep_user'),
    ('prep_plan', 'prep_gitlab_dotcom_plan'),
    ('prep_namespace_plan_hist', 'prep_namespace_plan_hist'),
    ('prep_ci_stage', 'prep_ci_stage'),
    ('prep_todo', 'prep_todo'),
    ('prep_resource_label', 'prep_resource_label'),
    ('prep_environment_event', 'prep_environment_event'),
    ('prep_resource_milestone', 'prep_resource_milestone'),
    ('prep_labels', 'prep_labels'),
    ('prep_ci_artifact', 'prep_ci_artifact'),
    ('prep_user_event', 'prep_user'),
    ('prep_board', 'prep_board'),
    ('prep_project_auto_devops', 'prep_project_auto_devops'),
    ('prep_service', 'prep_service'),
    ('prep_issue_resource_weight', 'prep_issue_resource_weight'),
    ('prep_milestone', 'prep_milestone'),
    ('prep_ci_pipeline_schedule', 'prep_ci_pipeline_schedule'),
    ('prep_snippet', 'prep_snippet'),
    ('prep_project', 'prep_project'),
    ('prep_ci_trigger', 'prep_ci_trigger'),
    ('prep_cluster_agent', 'prep_cluster_agent')
]) }}

, dast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dast'

), dependency_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dependency_scanning'

), push_actions AS (

    SELECT *
    FROM  prep_action
    WHERE event_action_type = 'pushed'

), issue_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Issue'

), license_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IN (
                                  'license_scanning',
                                  'license_management'
                                )

), merge_request_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'MergeRequest'

), protect_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'container_scanning'
    
), sast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'sast'

), secret_detection_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'secret_detection'

), other_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IS NULL

), api_fuzzing_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'api_fuzzing'

), successful_ci_pipelines AS (

    SELECT *
    FROM prep_ci_pipeline
    WHERE failure_reason IS NULL

), monthly_active_users_project_repo AS (

    SELECT *
    FROM  prep_action
    WHERE target_type IS NULL
      AND event_action_type = 'pushed'

), issue_resource_label_events AS (

    SELECT *
    FROM prep_resource_label
    WHERE dim_issue_id IS NOT NULL

), issue_resource_milestone AS (

    SELECT *
    FROM prep_resource_milestone
    WHERE issue_id IS NOT NULL

), terraform_reports_events AS (

    SELECT *
    FROM prep_ci_artifact
    WHERE file_type = 18

), action_monthly_active_users_wiki_repo_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'WikiPage::Meta'
      AND event_action_type IN ('created', 'updated')

), other_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type NOT IN ('Epic', 'MergeRequest')

), epic_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Epic'

), action_monthly_active_users_design_management_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'DesignManagement::Design'
      AND event_action_type IN ('created', 'updated')

), project_prometheus_source AS (

    SELECT *, 
      dim_date_id AS created_date_id
    FROM  prep_project
    WHERE ARRAY_CONTAINS('Integrations::Prometheus'::VARIANT, active_service_types_array)

), incident_labeled_issues_source AS (

    SELECT
      *
    FROM prep_issue
    WHERE ARRAY_CONTAINS('incident'::variant, labels)

), issue_creation_other_source AS (
    
    SELECT
      *
    FROM prep_issue
    WHERE NOT ARRAY_CONTAINS('incident'::variant, labels)

), data AS (

{% for event_cte in event_ctes %}

    SELECT
      MD5({{ event_cte.source_cte_name}}.{{ event_cte.primary_key }} || '-' || '{{ event_cte.event_name }}')   AS event_id,
      '{{ event_cte.event_name }}'                                                                             AS event_name,
      '{{ event_cte.stage_name }}'                                                                             AS stage_name,
      {{ event_cte.source_cte_name}}.created_at                                                                AS event_created_at,
      {{ event_cte.source_cte_name}}.created_date_id                                                           AS created_date_id,
      {%- if event_cte.project_column_name != 'NULL' %}
        {{ event_cte.source_cte_name}}.{{ event_cte.project_column_name }}                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        {{ event_cte.source_cte_name}}.{{ event_cte.project_column_name }}                                     AS parent_id,
        {{ event_cte.source_cte_name}}.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
      {%- elif event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
        NULL                                                                                                   AS dim_project_id,
        'group'                                                                                                AS parent_type,
        {{ event_cte.source_cte_name}}.{{ event_cte.ultimate_parent_namespace_column_name }}                   AS parent_id, 
        {{ event_cte.source_cte_name}}.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
      {%- else %}
        NULL                                                                                                   AS dim_project_id,
        NULL                                                                                                   AS parent_type,
        NULL                                                                                                   AS parent_id, 
        NULL                                                                                                   AS ultimate_parent_namespace_id,
      {%- endif %}
      {%- if event_cte.project_column_name != 'NULL' or event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
        COALESCE({{ event_cte.source_cte_name}}.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
      {%- else %}
        34                                                                                                     AS plan_id_at_event_timestamp,
        'free'                                                                                                 AS plan_name_at_event_timestamp,
        FALSE                                                                                                  AS plan_was_paid_at_event_timestamp,
      {%- endif %}  
      {%- if event_cte.user_column_name != 'NULL' %}
        {{ event_cte.source_cte_name}}.{{ event_cte.user_column_name }}                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                {{ event_cte.source_cte_name}}.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
      {%- else %}
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
      {%- endif %}
      {%- if event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                {{ event_cte.source_cte_name}}.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
      {%- else %}
        NULL                                                                                                   AS namespace_created_at,
        NULL                                                                                                   AS namespace_created_date,
        NULL                                                                                                   AS is_blocked_namespace_creator,
        NULL                                                                                                   AS namespace_is_internal,
        NULL                                                                                                   AS days_since_namespace_creation_at_event_date,
      {%- endif %}   
      {%- if event_cte.project_column_name != 'NULL' %}
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                {{ event_cte.source_cte_name}}.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab
      {%- else %}
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab
      {%- endif %}                                                                       
    FROM {{ event_cte.source_cte_name }}
    {%- if event_cte.project_column_name != 'NULL' %}
    LEFT JOIN dim_project 
      ON {{event_cte.source_cte_name}}.{{event_cte.project_column_name}} = dim_project.dim_project_id
    {%- endif %}
    {%- if event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
    LEFT JOIN prep_namespace
      ON {{event_cte.source_cte_name}}.{{event_cte.ultimate_parent_namespace_column_name}} = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    {%- endif %}
    {%- if event_cte.user_column_name != 'NULL' %}
    LEFT JOIN prep_user
      ON {{event_cte.source_cte_name}}.{{event_cte.user_column_name}} = prep_user.dim_user_id
    {%- endif %}
    {%- if event_cte.project_column_name != 'NULL' or event_cte.ultimate_parent_namespace_column_name != 'NULL' %}
    LEFT JOIN prep_plan
      ON {{event_cte.source_cte_name}}.dim_plan_id = prep_plan.dim_plan_id
    {%- endif%}
    WHERE DATE_PART('year', {{ event_cte.source_cte_name}}.created_at) = {{year_value}}
      AND DATE_PART('month', {{ event_cte.source_cte_name}}.created_at) = {{month_value}}
    {% if not loop.last %}
    UNION ALL
    {% endif %}
{%- endfor %}

)

SELECT *
FROM data18:T60f,prep table to build the fct_dotcom_usage_events table. The grain of the table is one row per event.

The primary key of this table is the `event_id`.

This table is actually a long event list table with the following foreign keys:

- `dim_project_id`: in which project a specific event has been generated. For some events, there is no such data like boards which are at the group-level
- `ultimate_parent_namespace_id`: the top-level namespace in which the event has been generated. This is ALWAYS filled
- `dim_user_id`: the user who generated the event (for example the user who triggered a CI Pipeline)
- `dim_plan_id`: ID of the plan of the ultimate parent namespace when the event got created
- `dim_date_id`: ID of the date when the event got created.

Then other metadata available in the model are :

- Time metadata
  - user_created_at
  - namespace_created_at
  - days_since_namespace_creation
  - days_since_user_creation
  - days_since_project_creation
- Project specific metadata:
  - project_is_learn_gitlab
  - project_is_imported

A specific handbook page has been created for this table [here](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-product-events-data/). This has more information on how to add events and some analysis that can be run with this model.

When making changes to this model, you will have to use a specific DAG to backfill the partitions. Details [here](https://about.gitlab.com/handbook/business-technology/data-team/data-catalog/saas-product-events-data/#backfill-the-data).19:T2e6a5,




WITH prep_ci_pipeline AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_pipeline

), prep_action AS (

    SELECT * 
    FROM "PROD".common_prep.prep_action

), prep_ci_build AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_build

), prep_deployment AS (

    SELECT * 
    FROM "PROD".common_prep.prep_deployment

), prep_epic AS (

    SELECT * 
    FROM "PROD".common_prep.prep_epic

), prep_issue AS (

    SELECT * 
    FROM "PROD".common_prep.prep_issue

), prep_merge_request AS (

    SELECT * 
    FROM "PROD".common_prep.prep_merge_request

), prep_note AS (

    SELECT * 
    FROM "PROD".common_prep.prep_note

), prep_package AS (

    SELECT * 
    FROM "PROD".common_prep.prep_package

), prep_release AS (

    SELECT * 
    FROM "PROD".common_prep.prep_release

), prep_requirement AS (

    SELECT * 
    FROM "PROD".common_prep.prep_requirement

), dim_project AS (

    SELECT * 
    FROM "PROD".common.dim_project

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), prep_user AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

), prep_plan AS (

    SELECT * 
    FROM "PROD".common_prep.prep_gitlab_dotcom_plan

), prep_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_plan_hist

), prep_ci_stage AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_stage

), prep_todo AS (

    SELECT * 
    FROM "PROD".common_prep.prep_todo

), prep_resource_label AS (

    SELECT * 
    FROM "PROD".common_prep.prep_resource_label

), prep_environment_event AS (

    SELECT * 
    FROM "PROD".common_prep.prep_environment_event

), prep_resource_milestone AS (

    SELECT * 
    FROM "PROD".common_prep.prep_resource_milestone

), prep_labels AS (

    SELECT * 
    FROM "PROD".common_prep.prep_labels

), prep_ci_artifact AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_artifact

), prep_user_event AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

), prep_board AS (

    SELECT * 
    FROM "PROD".common_prep.prep_board

), prep_project_auto_devops AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project_auto_devops

), prep_service AS (

    SELECT * 
    FROM "PROD".common_prep.prep_service

), prep_issue_resource_weight AS (

    SELECT * 
    FROM "PROD".common_prep.prep_issue_resource_weight

), prep_milestone AS (

    SELECT * 
    FROM "PROD".common_prep.prep_milestone

), prep_ci_pipeline_schedule AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_pipeline_schedule

), prep_snippet AS (

    SELECT * 
    FROM "PROD".common_prep.prep_snippet

), prep_project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

), prep_ci_trigger AS (

    SELECT * 
    FROM "PROD".common_prep.prep_ci_trigger

), prep_cluster_agent AS (

    SELECT * 
    FROM "PROD".common_prep.prep_cluster_agent

)

, dast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dast'

), dependency_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'dependency_scanning'

), push_actions AS (

    SELECT *
    FROM  prep_action
    WHERE event_action_type = 'pushed'

), issue_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Issue'

), license_scanning_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IN (
                                  'license_scanning',
                                  'license_management'
                                )

), merge_request_note AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'MergeRequest'

), protect_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'container_scanning'
    
), sast_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'sast'

), secret_detection_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'secret_detection'

), other_ci_build AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type IS NULL

), api_fuzzing_jobs AS (

    SELECT *
    FROM prep_ci_build
    WHERE secure_ci_build_type = 'api_fuzzing'

), successful_ci_pipelines AS (

    SELECT *
    FROM prep_ci_pipeline
    WHERE failure_reason IS NULL

), monthly_active_users_project_repo AS (

    SELECT *
    FROM  prep_action
    WHERE target_type IS NULL
      AND event_action_type = 'pushed'

), issue_resource_label_events AS (

    SELECT *
    FROM prep_resource_label
    WHERE dim_issue_id IS NOT NULL

), issue_resource_milestone AS (

    SELECT *
    FROM prep_resource_milestone
    WHERE issue_id IS NOT NULL

), terraform_reports_events AS (

    SELECT *
    FROM prep_ci_artifact
    WHERE file_type = 18

), action_monthly_active_users_wiki_repo_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'WikiPage::Meta'
      AND event_action_type IN ('created', 'updated')

), other_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type NOT IN ('Epic', 'MergeRequest')

), epic_notes_source AS (

    SELECT *
    FROM prep_note
    WHERE noteable_type = 'Epic'

), action_monthly_active_users_design_management_source AS (

    SELECT *
    FROM  prep_action
    WHERE target_type = 'DesignManagement::Design'
      AND event_action_type IN ('created', 'updated')

), project_prometheus_source AS (

    SELECT *, 
      dim_date_id AS created_date_id
    FROM  prep_project
    WHERE ARRAY_CONTAINS('Integrations::Prometheus'::VARIANT, active_service_types_array)

), incident_labeled_issues_source AS (

    SELECT
      *
    FROM prep_issue
    WHERE ARRAY_CONTAINS('incident'::variant, labels)

), issue_creation_other_source AS (
    
    SELECT
      *
    FROM prep_issue
    WHERE NOT ARRAY_CONTAINS('incident'::variant, labels)

), data AS (



    SELECT
      MD5(prep_action.dim_action_id || '-' || 'action')   AS event_id,
      'action'                                                                             AS event_name,
      'manage'                                                                             AS stage_name,
      prep_action.created_at                                                                AS event_created_at,
      prep_action.created_date_id                                                           AS created_date_id,
        prep_action.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_action.dim_project_id                                     AS parent_id,
        prep_action.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_action.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_action.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_action.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_action.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_action.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_action
    LEFT JOIN dim_project 
      ON prep_action.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_action.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_action.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_action.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_action.created_at) = 2023
      AND DATE_PART('month', prep_action.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(dast_jobs.dim_ci_build_id || '-' || 'dast_build_run')   AS event_id,
      'dast_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      dast_jobs.created_at                                                                AS event_created_at,
      dast_jobs.created_date_id                                                           AS created_date_id,
        dast_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        dast_jobs.dim_project_id                                     AS parent_id,
        dast_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(dast_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        dast_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                dast_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                dast_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                dast_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM dast_jobs
    LEFT JOIN dim_project 
      ON dast_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON dast_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON dast_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON dast_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', dast_jobs.created_at) = 2023
      AND DATE_PART('month', dast_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(dependency_scanning_jobs.dim_ci_build_id || '-' || 'dependency_scanning_build_run')   AS event_id,
      'dependency_scanning_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      dependency_scanning_jobs.created_at                                                                AS event_created_at,
      dependency_scanning_jobs.created_date_id                                                           AS created_date_id,
        dependency_scanning_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        dependency_scanning_jobs.dim_project_id                                     AS parent_id,
        dependency_scanning_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(dependency_scanning_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        dependency_scanning_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                dependency_scanning_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                dependency_scanning_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                dependency_scanning_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM dependency_scanning_jobs
    LEFT JOIN dim_project 
      ON dependency_scanning_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON dependency_scanning_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON dependency_scanning_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON dependency_scanning_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', dependency_scanning_jobs.created_at) = 2023
      AND DATE_PART('month', dependency_scanning_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_deployment.dim_deployment_id || '-' || 'deployment_creation')   AS event_id,
      'deployment_creation'                                                                             AS event_name,
      'release'                                                                             AS stage_name,
      prep_deployment.created_at                                                                AS event_created_at,
      prep_deployment.created_date_id                                                           AS created_date_id,
        prep_deployment.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_deployment.dim_project_id                                     AS parent_id,
        prep_deployment.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_deployment.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_deployment.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_deployment.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_deployment.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_deployment.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_deployment
    LEFT JOIN dim_project 
      ON prep_deployment.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_deployment.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_deployment.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_deployment.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_deployment.created_at) = 2023
      AND DATE_PART('month', prep_deployment.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_epic.dim_epic_id || '-' || 'epic_creation')   AS event_id,
      'epic_creation'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_epic.created_at                                                                AS event_created_at,
      prep_epic.created_date_id                                                           AS created_date_id,
        NULL                                                                                                   AS dim_project_id,
        'group'                                                                                                AS parent_type,
        prep_epic.ultimate_parent_namespace_id                   AS parent_id, 
        prep_epic.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_epic.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_epic.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_epic.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_epic.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab                                                                       
    FROM prep_epic
    LEFT JOIN prep_namespace
      ON prep_epic.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_epic.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_epic.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_epic.created_at) = 2023
      AND DATE_PART('month', prep_epic.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_creation_other_source.dim_issue_id || '-' || 'issue_creation_other')   AS event_id,
      'issue_creation_other'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_creation_other_source.created_at                                                                AS event_created_at,
      issue_creation_other_source.created_date_id                                                           AS created_date_id,
        issue_creation_other_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_creation_other_source.dim_project_id                                     AS parent_id,
        issue_creation_other_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_creation_other_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_creation_other_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_creation_other_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_creation_other_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_creation_other_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_creation_other_source
    LEFT JOIN dim_project 
      ON issue_creation_other_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_creation_other_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_creation_other_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_creation_other_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_creation_other_source.created_at) = 2023
      AND DATE_PART('month', issue_creation_other_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_note.dim_note_id || '-' || 'issue_note_creation')   AS event_id,
      'issue_note_creation'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_note.created_at                                                                AS event_created_at,
      issue_note.created_date_id                                                           AS created_date_id,
        issue_note.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_note.dim_project_id                                     AS parent_id,
        issue_note.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_note.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_note.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_note.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_note.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_note.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_note
    LEFT JOIN dim_project 
      ON issue_note.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_note.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_note.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_note.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_note.created_at) = 2023
      AND DATE_PART('month', issue_note.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(license_scanning_jobs.dim_ci_build_id || '-' || 'license_scanning_build_run')   AS event_id,
      'license_scanning_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      license_scanning_jobs.created_at                                                                AS event_created_at,
      license_scanning_jobs.created_date_id                                                           AS created_date_id,
        license_scanning_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        license_scanning_jobs.dim_project_id                                     AS parent_id,
        license_scanning_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(license_scanning_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        license_scanning_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                license_scanning_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                license_scanning_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                license_scanning_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM license_scanning_jobs
    LEFT JOIN dim_project 
      ON license_scanning_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON license_scanning_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON license_scanning_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON license_scanning_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', license_scanning_jobs.created_at) = 2023
      AND DATE_PART('month', license_scanning_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_merge_request.dim_merge_request_id || '-' || 'merge_request_creation')   AS event_id,
      'merge_request_creation'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      prep_merge_request.created_at                                                                AS event_created_at,
      prep_merge_request.created_date_id                                                           AS created_date_id,
        prep_merge_request.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_merge_request.dim_project_id                                     AS parent_id,
        prep_merge_request.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_merge_request.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_merge_request.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_merge_request.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_merge_request.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_merge_request.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_merge_request
    LEFT JOIN dim_project 
      ON prep_merge_request.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_merge_request.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_merge_request.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_merge_request.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_merge_request.created_at) = 2023
      AND DATE_PART('month', prep_merge_request.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(merge_request_note.dim_note_id || '-' || 'merge_request_note_creation')   AS event_id,
      'merge_request_note_creation'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      merge_request_note.created_at                                                                AS event_created_at,
      merge_request_note.created_date_id                                                           AS created_date_id,
        merge_request_note.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        merge_request_note.dim_project_id                                     AS parent_id,
        merge_request_note.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(merge_request_note.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        merge_request_note.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                merge_request_note.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                merge_request_note.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                merge_request_note.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM merge_request_note
    LEFT JOIN dim_project 
      ON merge_request_note.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON merge_request_note.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON merge_request_note.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON merge_request_note.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', merge_request_note.created_at) = 2023
      AND DATE_PART('month', merge_request_note.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_pipeline.dim_ci_pipeline_id || '-' || 'ci_pipeline_creation')   AS event_id,
      'ci_pipeline_creation'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      prep_ci_pipeline.created_at                                                                AS event_created_at,
      prep_ci_pipeline.created_date_id                                                           AS created_date_id,
        prep_ci_pipeline.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_pipeline.dim_project_id                                     AS parent_id,
        prep_ci_pipeline.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_pipeline.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_ci_pipeline.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_ci_pipeline.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_pipeline.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_pipeline.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_pipeline
    LEFT JOIN dim_project 
      ON prep_ci_pipeline.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_pipeline.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_ci_pipeline.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_pipeline.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_pipeline.created_at) = 2023
      AND DATE_PART('month', prep_ci_pipeline.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_package.dim_package_id || '-' || 'package_creation')   AS event_id,
      'package_creation'                                                                             AS event_name,
      'package'                                                                             AS stage_name,
      prep_package.created_at                                                                AS event_created_at,
      prep_package.created_date_id                                                           AS created_date_id,
        prep_package.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_package.dim_project_id                                     AS parent_id,
        prep_package.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_package.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_package.creator_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_package.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_package.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_package.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_package
    LEFT JOIN dim_project 
      ON prep_package.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_package.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_package.creator_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_package.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_package.created_at) = 2023
      AND DATE_PART('month', prep_package.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(protect_ci_build.dim_ci_build_id || '-' || 'container_scanning_build_run')   AS event_id,
      'container_scanning_build_run'                                                                             AS event_name,
      'protect'                                                                             AS stage_name,
      protect_ci_build.created_at                                                                AS event_created_at,
      protect_ci_build.created_date_id                                                           AS created_date_id,
        protect_ci_build.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        protect_ci_build.dim_project_id                                     AS parent_id,
        protect_ci_build.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(protect_ci_build.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        protect_ci_build.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                protect_ci_build.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                protect_ci_build.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                protect_ci_build.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM protect_ci_build
    LEFT JOIN dim_project 
      ON protect_ci_build.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON protect_ci_build.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON protect_ci_build.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON protect_ci_build.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', protect_ci_build.created_at) = 2023
      AND DATE_PART('month', protect_ci_build.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(push_actions.dim_action_id || '-' || 'push_action')   AS event_id,
      'push_action'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      push_actions.created_at                                                                AS event_created_at,
      push_actions.created_date_id                                                           AS created_date_id,
        push_actions.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        push_actions.dim_project_id                                     AS parent_id,
        push_actions.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(push_actions.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        push_actions.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                push_actions.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                push_actions.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                push_actions.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM push_actions
    LEFT JOIN dim_project 
      ON push_actions.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON push_actions.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON push_actions.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON push_actions.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', push_actions.created_at) = 2023
      AND DATE_PART('month', push_actions.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_release.dim_release_id || '-' || 'release_creation')   AS event_id,
      'release_creation'                                                                             AS event_name,
      'release'                                                                             AS stage_name,
      prep_release.created_at                                                                AS event_created_at,
      prep_release.created_date_id                                                           AS created_date_id,
        prep_release.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_release.dim_project_id                                     AS parent_id,
        prep_release.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_release.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_release.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_release.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_release.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_release.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_release
    LEFT JOIN dim_project 
      ON prep_release.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_release.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_release.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_release.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_release.created_at) = 2023
      AND DATE_PART('month', prep_release.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_requirement.dim_requirement_id || '-' || 'requirement_creation')   AS event_id,
      'requirement_creation'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_requirement.created_at                                                                AS event_created_at,
      prep_requirement.created_date_id                                                           AS created_date_id,
        prep_requirement.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_requirement.dim_project_id                                     AS parent_id,
        prep_requirement.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_requirement.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_requirement.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_requirement.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_requirement.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_requirement.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_requirement
    LEFT JOIN dim_project 
      ON prep_requirement.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_requirement.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_requirement.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_requirement.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_requirement.created_at) = 2023
      AND DATE_PART('month', prep_requirement.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(sast_jobs.dim_ci_build_id || '-' || 'sast_build_run')   AS event_id,
      'sast_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      sast_jobs.created_at                                                                AS event_created_at,
      sast_jobs.created_date_id                                                           AS created_date_id,
        sast_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        sast_jobs.dim_project_id                                     AS parent_id,
        sast_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(sast_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        sast_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                sast_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                sast_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                sast_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM sast_jobs
    LEFT JOIN dim_project 
      ON sast_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON sast_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON sast_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON sast_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', sast_jobs.created_at) = 2023
      AND DATE_PART('month', sast_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(secret_detection_jobs.dim_ci_build_id || '-' || 'secret_detection_build_run')   AS event_id,
      'secret_detection_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      secret_detection_jobs.created_at                                                                AS event_created_at,
      secret_detection_jobs.created_date_id                                                           AS created_date_id,
        secret_detection_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        secret_detection_jobs.dim_project_id                                     AS parent_id,
        secret_detection_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(secret_detection_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        secret_detection_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                secret_detection_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                secret_detection_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                secret_detection_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM secret_detection_jobs
    LEFT JOIN dim_project 
      ON secret_detection_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON secret_detection_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON secret_detection_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON secret_detection_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', secret_detection_jobs.created_at) = 2023
      AND DATE_PART('month', secret_detection_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(other_ci_build.dim_ci_build_id || '-' || 'other_ci_build_creation')   AS event_id,
      'other_ci_build_creation'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      other_ci_build.created_at                                                                AS event_created_at,
      other_ci_build.created_date_id                                                           AS created_date_id,
        other_ci_build.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        other_ci_build.dim_project_id                                     AS parent_id,
        other_ci_build.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(other_ci_build.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        other_ci_build.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                other_ci_build.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                other_ci_build.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                other_ci_build.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM other_ci_build
    LEFT JOIN dim_project 
      ON other_ci_build.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON other_ci_build.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON other_ci_build.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON other_ci_build.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', other_ci_build.created_at) = 2023
      AND DATE_PART('month', other_ci_build.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(successful_ci_pipelines.dim_ci_pipeline_id || '-' || 'successful_ci_pipeline_creation')   AS event_id,
      'successful_ci_pipeline_creation'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      successful_ci_pipelines.created_at                                                                AS event_created_at,
      successful_ci_pipelines.created_date_id                                                           AS created_date_id,
        successful_ci_pipelines.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        successful_ci_pipelines.dim_project_id                                     AS parent_id,
        successful_ci_pipelines.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(successful_ci_pipelines.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        successful_ci_pipelines.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                successful_ci_pipelines.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                successful_ci_pipelines.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                successful_ci_pipelines.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM successful_ci_pipelines
    LEFT JOIN dim_project 
      ON successful_ci_pipelines.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON successful_ci_pipelines.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON successful_ci_pipelines.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON successful_ci_pipelines.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', successful_ci_pipelines.created_at) = 2023
      AND DATE_PART('month', successful_ci_pipelines.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(monthly_active_users_project_repo.dim_action_id || '-' || 'action_monthly_active_users_project_repo')   AS event_id,
      'action_monthly_active_users_project_repo'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      monthly_active_users_project_repo.created_at                                                                AS event_created_at,
      monthly_active_users_project_repo.created_date_id                                                           AS created_date_id,
        monthly_active_users_project_repo.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        monthly_active_users_project_repo.dim_project_id                                     AS parent_id,
        monthly_active_users_project_repo.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(monthly_active_users_project_repo.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        monthly_active_users_project_repo.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                monthly_active_users_project_repo.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                monthly_active_users_project_repo.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                monthly_active_users_project_repo.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM monthly_active_users_project_repo
    LEFT JOIN dim_project 
      ON monthly_active_users_project_repo.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON monthly_active_users_project_repo.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON monthly_active_users_project_repo.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON monthly_active_users_project_repo.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', monthly_active_users_project_repo.created_at) = 2023
      AND DATE_PART('month', monthly_active_users_project_repo.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_stage.dim_ci_stage_id || '-' || 'ci_stages')   AS event_id,
      'ci_stages'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      prep_ci_stage.created_at                                                                AS event_created_at,
      prep_ci_stage.created_date_id                                                           AS created_date_id,
        prep_ci_stage.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_stage.dim_project_id                                     AS parent_id,
        prep_ci_stage.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_stage.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_stage.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_stage.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_stage
    LEFT JOIN dim_project 
      ON prep_ci_stage.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_stage.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_stage.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_stage.created_at) = 2023
      AND DATE_PART('month', prep_ci_stage.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(other_notes_source.dim_note_id || '-' || 'notes_other')   AS event_id,
      'notes_other'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      other_notes_source.created_at                                                                AS event_created_at,
      other_notes_source.created_date_id                                                           AS created_date_id,
        other_notes_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        other_notes_source.dim_project_id                                     AS parent_id,
        other_notes_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(other_notes_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        other_notes_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                other_notes_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                other_notes_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                other_notes_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM other_notes_source
    LEFT JOIN dim_project 
      ON other_notes_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON other_notes_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON other_notes_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON other_notes_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', other_notes_source.created_at) = 2023
      AND DATE_PART('month', other_notes_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_todo.dim_todo_id || '-' || 'todos')   AS event_id,
      'todos'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_todo.created_at                                                                AS event_created_at,
      prep_todo.created_date_id                                                           AS created_date_id,
        prep_todo.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_todo.dim_project_id                                     AS parent_id,
        prep_todo.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_todo.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_todo.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_todo.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_todo.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_todo.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_todo
    LEFT JOIN dim_project 
      ON prep_todo.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_todo.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_todo.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_todo.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_todo.created_at) = 2023
      AND DATE_PART('month', prep_todo.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_resource_label_events.dim_issue_label_id || '-' || 'issue_resource_label_events')   AS event_id,
      'issue_resource_label_events'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_resource_label_events.created_at                                                                AS event_created_at,
      issue_resource_label_events.created_date_id                                                           AS created_date_id,
        issue_resource_label_events.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_resource_label_events.dim_project_id                                     AS parent_id,
        issue_resource_label_events.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_resource_label_events.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_resource_label_events.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_resource_label_events.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_resource_label_events.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_resource_label_events.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_resource_label_events
    LEFT JOIN dim_project 
      ON issue_resource_label_events.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_resource_label_events.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_resource_label_events.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_resource_label_events.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_resource_label_events.created_at) = 2023
      AND DATE_PART('month', issue_resource_label_events.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_environment_event.dim_environment_id || '-' || 'environments')   AS event_id,
      'environments'                                                                             AS event_name,
      'release'                                                                             AS stage_name,
      prep_environment_event.created_at                                                                AS event_created_at,
      prep_environment_event.created_date_id                                                           AS created_date_id,
        prep_environment_event.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_environment_event.dim_project_id                                     AS parent_id,
        prep_environment_event.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_environment_event.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_environment_event.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_environment_event.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_environment_event
    LEFT JOIN dim_project 
      ON prep_environment_event.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_environment_event.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_environment_event.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_environment_event.created_at) = 2023
      AND DATE_PART('month', prep_environment_event.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(issue_resource_milestone.dim_resource_milestone_id || '-' || 'issue_resource_milestone_events')   AS event_id,
      'issue_resource_milestone_events'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      issue_resource_milestone.created_at                                                                AS event_created_at,
      issue_resource_milestone.created_date_id                                                           AS created_date_id,
        issue_resource_milestone.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        issue_resource_milestone.dim_project_id                                     AS parent_id,
        issue_resource_milestone.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(issue_resource_milestone.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        issue_resource_milestone.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                issue_resource_milestone.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                issue_resource_milestone.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                issue_resource_milestone.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM issue_resource_milestone
    LEFT JOIN dim_project 
      ON issue_resource_milestone.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON issue_resource_milestone.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON issue_resource_milestone.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON issue_resource_milestone.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', issue_resource_milestone.created_at) = 2023
      AND DATE_PART('month', issue_resource_milestone.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_labels.dim_label_id || '-' || 'labels')   AS event_id,
      'labels'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_labels.created_at                                                                AS event_created_at,
      prep_labels.created_date_id                                                           AS created_date_id,
        prep_labels.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_labels.dim_project_id                                     AS parent_id,
        prep_labels.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_labels.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_labels.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_labels.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_labels
    LEFT JOIN dim_project 
      ON prep_labels.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_labels.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_labels.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_labels.created_at) = 2023
      AND DATE_PART('month', prep_labels.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(terraform_reports_events.dim_ci_job_artifact_id || '-' || 'terraform_reports')   AS event_id,
      'terraform_reports'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      terraform_reports_events.created_at                                                                AS event_created_at,
      terraform_reports_events.created_date_id                                                           AS created_date_id,
        terraform_reports_events.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        terraform_reports_events.dim_project_id                                     AS parent_id,
        terraform_reports_events.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(terraform_reports_events.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                terraform_reports_events.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                terraform_reports_events.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM terraform_reports_events
    LEFT JOIN dim_project 
      ON terraform_reports_events.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON terraform_reports_events.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON terraform_reports_events.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', terraform_reports_events.created_at) = 2023
      AND DATE_PART('month', terraform_reports_events.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_user_event.dim_user_id || '-' || 'users_created')   AS event_id,
      'users_created'                                                                             AS event_name,
      'manage'                                                                             AS stage_name,
      prep_user_event.created_at                                                                AS event_created_at,
      prep_user_event.created_date_id                                                           AS created_date_id,
        NULL                                                                                                   AS dim_project_id,
        NULL                                                                                                   AS parent_type,
        NULL                                                                                                   AS parent_id, 
        NULL                                                                                                   AS ultimate_parent_namespace_id,
        34                                                                                                     AS plan_id_at_event_timestamp,
        'free'                                                                                                 AS plan_name_at_event_timestamp,
        FALSE                                                                                                  AS plan_was_paid_at_event_timestamp,
        prep_user_event.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_user_event.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        NULL                                                                                                   AS namespace_created_at,
        NULL                                                                                                   AS namespace_created_date,
        NULL                                                                                                   AS is_blocked_namespace_creator,
        NULL                                                                                                   AS namespace_is_internal,
        NULL                                                                                                   AS days_since_namespace_creation_at_event_date,
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab                                                                       
    FROM prep_user_event
    LEFT JOIN prep_user
      ON prep_user_event.dim_user_id = prep_user.dim_user_id
    WHERE DATE_PART('year', prep_user_event.created_at) = 2023
      AND DATE_PART('month', prep_user_event.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(action_monthly_active_users_wiki_repo_source.dim_action_id || '-' || 'action_monthly_active_users_wiki_repo')   AS event_id,
      'action_monthly_active_users_wiki_repo'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      action_monthly_active_users_wiki_repo_source.created_at                                                                AS event_created_at,
      action_monthly_active_users_wiki_repo_source.created_date_id                                                           AS created_date_id,
        action_monthly_active_users_wiki_repo_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        action_monthly_active_users_wiki_repo_source.dim_project_id                                     AS parent_id,
        action_monthly_active_users_wiki_repo_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(action_monthly_active_users_wiki_repo_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        action_monthly_active_users_wiki_repo_source.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                action_monthly_active_users_wiki_repo_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                action_monthly_active_users_wiki_repo_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                action_monthly_active_users_wiki_repo_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM action_monthly_active_users_wiki_repo_source
    LEFT JOIN dim_project 
      ON action_monthly_active_users_wiki_repo_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON action_monthly_active_users_wiki_repo_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON action_monthly_active_users_wiki_repo_source.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON action_monthly_active_users_wiki_repo_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', action_monthly_active_users_wiki_repo_source.created_at) = 2023
      AND DATE_PART('month', action_monthly_active_users_wiki_repo_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(epic_notes_source.dim_note_id || '-' || 'epic_notes')   AS event_id,
      'epic_notes'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      epic_notes_source.created_at                                                                AS event_created_at,
      epic_notes_source.created_date_id                                                           AS created_date_id,
        NULL                                                                                                   AS dim_project_id,
        'group'                                                                                                AS parent_type,
        epic_notes_source.ultimate_parent_namespace_id                   AS parent_id, 
        epic_notes_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(epic_notes_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        epic_notes_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                epic_notes_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                epic_notes_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        NULL                                                                                                   AS days_since_project_creation_at_event_date,
        NULL                                                                                                   AS project_is_imported,
        NULL                                                                                                   AS project_is_learn_gitlab                                                                       
    FROM epic_notes_source
    LEFT JOIN prep_namespace
      ON epic_notes_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON epic_notes_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON epic_notes_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', epic_notes_source.created_at) = 2023
      AND DATE_PART('month', epic_notes_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_board.dim_board_id || '-' || 'boards')   AS event_id,
      'boards'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_board.created_at                                                                AS event_created_at,
      prep_board.created_date_id                                                           AS created_date_id,
        prep_board.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_board.dim_project_id                                     AS parent_id,
        prep_board.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_board.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_board.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_board.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_board
    LEFT JOIN dim_project 
      ON prep_board.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_board.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_board.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_board.created_at) = 2023
      AND DATE_PART('month', prep_board.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_project_auto_devops.dim_auto_devops_id || '-' || 'project_auto_devops')   AS event_id,
      'project_auto_devops'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      prep_project_auto_devops.created_at                                                                AS event_created_at,
      prep_project_auto_devops.created_date_id                                                           AS created_date_id,
        prep_project_auto_devops.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_project_auto_devops.dim_project_id                                     AS parent_id,
        prep_project_auto_devops.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_project_auto_devops.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_project_auto_devops.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_project_auto_devops.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_project_auto_devops
    LEFT JOIN dim_project 
      ON prep_project_auto_devops.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_project_auto_devops.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_project_auto_devops.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_project_auto_devops.created_at) = 2023
      AND DATE_PART('month', prep_project_auto_devops.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_service.dim_service_id || '-' || 'integrations')   AS event_id,
      'integrations'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      prep_service.created_at                                                                AS event_created_at,
      prep_service.created_date_id                                                           AS created_date_id,
        prep_service.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_service.dim_project_id                                     AS parent_id,
        prep_service.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_service.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_service.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_service.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_service
    LEFT JOIN dim_project 
      ON prep_service.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_service.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_service.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_service.created_at) = 2023
      AND DATE_PART('month', prep_service.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_issue_resource_weight.dim_resource_weight_id || '-' || 'issue_resource_weight_events')   AS event_id,
      'issue_resource_weight_events'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_issue_resource_weight.created_at                                                                AS event_created_at,
      prep_issue_resource_weight.created_date_id                                                           AS created_date_id,
        prep_issue_resource_weight.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_issue_resource_weight.dim_project_id                                     AS parent_id,
        prep_issue_resource_weight.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_issue_resource_weight.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_issue_resource_weight.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_issue_resource_weight.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_issue_resource_weight.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_issue_resource_weight.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_issue_resource_weight
    LEFT JOIN dim_project 
      ON prep_issue_resource_weight.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_issue_resource_weight.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_issue_resource_weight.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_issue_resource_weight.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_issue_resource_weight.created_at) = 2023
      AND DATE_PART('month', prep_issue_resource_weight.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_milestone.dim_milestone_id || '-' || 'milestones')   AS event_id,
      'milestones'                                                                             AS event_name,
      'plan'                                                                             AS stage_name,
      prep_milestone.created_at                                                                AS event_created_at,
      prep_milestone.created_date_id                                                           AS created_date_id,
        prep_milestone.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_milestone.dim_project_id                                     AS parent_id,
        prep_milestone.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_milestone.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        NULL                                                                                                   AS dim_user_id,
        NULL                                                                                                   AS user_created_at,
        NULL                                                                                                   AS user_created_date,
        NULL                                                                                                   AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_milestone.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_milestone.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_milestone
    LEFT JOIN dim_project 
      ON prep_milestone.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_milestone.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_milestone.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_milestone.created_at) = 2023
      AND DATE_PART('month', prep_milestone.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(action_monthly_active_users_design_management_source.dim_action_id || '-' || 'action_monthly_active_users_design_management')   AS event_id,
      'action_monthly_active_users_design_management'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      action_monthly_active_users_design_management_source.created_at                                                                AS event_created_at,
      action_monthly_active_users_design_management_source.created_date_id                                                           AS created_date_id,
        action_monthly_active_users_design_management_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        action_monthly_active_users_design_management_source.dim_project_id                                     AS parent_id,
        action_monthly_active_users_design_management_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(action_monthly_active_users_design_management_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        action_monthly_active_users_design_management_source.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                action_monthly_active_users_design_management_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                action_monthly_active_users_design_management_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                action_monthly_active_users_design_management_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM action_monthly_active_users_design_management_source
    LEFT JOIN dim_project 
      ON action_monthly_active_users_design_management_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON action_monthly_active_users_design_management_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON action_monthly_active_users_design_management_source.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON action_monthly_active_users_design_management_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', action_monthly_active_users_design_management_source.created_at) = 2023
      AND DATE_PART('month', action_monthly_active_users_design_management_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_pipeline_schedule.dim_ci_pipeline_schedule_id || '-' || 'ci_pipeline_schedules')   AS event_id,
      'ci_pipeline_schedules'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      prep_ci_pipeline_schedule.created_at                                                                AS event_created_at,
      prep_ci_pipeline_schedule.created_date_id                                                           AS created_date_id,
        prep_ci_pipeline_schedule.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_pipeline_schedule.dim_project_id                                     AS parent_id,
        prep_ci_pipeline_schedule.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_pipeline_schedule.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_ci_pipeline_schedule.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_ci_pipeline_schedule.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_pipeline_schedule.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_pipeline_schedule.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_pipeline_schedule
    LEFT JOIN dim_project 
      ON prep_ci_pipeline_schedule.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_pipeline_schedule.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_ci_pipeline_schedule.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_pipeline_schedule.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_pipeline_schedule.created_at) = 2023
      AND DATE_PART('month', prep_ci_pipeline_schedule.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_snippet.dim_snippet_id || '-' || 'snippets')   AS event_id,
      'snippets'                                                                             AS event_name,
      'create'                                                                             AS stage_name,
      prep_snippet.created_at                                                                AS event_created_at,
      prep_snippet.created_date_id                                                           AS created_date_id,
        prep_snippet.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_snippet.dim_project_id                                     AS parent_id,
        prep_snippet.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_snippet.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_snippet.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_snippet.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_snippet.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_snippet.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_snippet
    LEFT JOIN dim_project 
      ON prep_snippet.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_snippet.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_snippet.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_snippet.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_snippet.created_at) = 2023
      AND DATE_PART('month', prep_snippet.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(project_prometheus_source.dim_project_id || '-' || 'projects_prometheus_active')   AS event_id,
      'projects_prometheus_active'                                                                             AS event_name,
      'monitor'                                                                             AS stage_name,
      project_prometheus_source.created_at                                                                AS event_created_at,
      project_prometheus_source.created_date_id                                                           AS created_date_id,
        project_prometheus_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        project_prometheus_source.dim_project_id                                     AS parent_id,
        project_prometheus_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(project_prometheus_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        project_prometheus_source.dim_user_id_creator                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                project_prometheus_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                project_prometheus_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                project_prometheus_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM project_prometheus_source
    LEFT JOIN dim_project 
      ON project_prometheus_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON project_prometheus_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON project_prometheus_source.dim_user_id_creator = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON project_prometheus_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', project_prometheus_source.created_at) = 2023
      AND DATE_PART('month', project_prometheus_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_ci_trigger.dim_ci_trigger_id || '-' || 'ci_triggers')   AS event_id,
      'ci_triggers'                                                                             AS event_name,
      'verify'                                                                             AS stage_name,
      prep_ci_trigger.created_at                                                                AS event_created_at,
      prep_ci_trigger.created_date_id                                                           AS created_date_id,
        prep_ci_trigger.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_ci_trigger.dim_project_id                                     AS parent_id,
        prep_ci_trigger.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_ci_trigger.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_ci_trigger.owner_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_ci_trigger.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_ci_trigger.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_ci_trigger.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_ci_trigger
    LEFT JOIN dim_project 
      ON prep_ci_trigger.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_ci_trigger.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_ci_trigger.owner_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_ci_trigger.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_ci_trigger.created_at) = 2023
      AND DATE_PART('month', prep_ci_trigger.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(incident_labeled_issues_source.dim_issue_id || '-' || 'incident_labeled_issues')   AS event_id,
      'incident_labeled_issues'                                                                             AS event_name,
      'monitor'                                                                             AS stage_name,
      incident_labeled_issues_source.created_at                                                                AS event_created_at,
      incident_labeled_issues_source.created_date_id                                                           AS created_date_id,
        incident_labeled_issues_source.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        incident_labeled_issues_source.dim_project_id                                     AS parent_id,
        incident_labeled_issues_source.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(incident_labeled_issues_source.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        incident_labeled_issues_source.author_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                incident_labeled_issues_source.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                incident_labeled_issues_source.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                incident_labeled_issues_source.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM incident_labeled_issues_source
    LEFT JOIN dim_project 
      ON incident_labeled_issues_source.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON incident_labeled_issues_source.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON incident_labeled_issues_source.author_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON incident_labeled_issues_source.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', incident_labeled_issues_source.created_at) = 2023
      AND DATE_PART('month', incident_labeled_issues_source.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(api_fuzzing_jobs.dim_ci_build_id || '-' || 'api_fuzzing_build_run')   AS event_id,
      'api_fuzzing_build_run'                                                                             AS event_name,
      'secure'                                                                             AS stage_name,
      api_fuzzing_jobs.created_at                                                                AS event_created_at,
      api_fuzzing_jobs.created_date_id                                                           AS created_date_id,
        api_fuzzing_jobs.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        api_fuzzing_jobs.dim_project_id                                     AS parent_id,
        api_fuzzing_jobs.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(api_fuzzing_jobs.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        api_fuzzing_jobs.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                api_fuzzing_jobs.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                api_fuzzing_jobs.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                api_fuzzing_jobs.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM api_fuzzing_jobs
    LEFT JOIN dim_project 
      ON api_fuzzing_jobs.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON api_fuzzing_jobs.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON api_fuzzing_jobs.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON api_fuzzing_jobs.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', api_fuzzing_jobs.created_at) = 2023
      AND DATE_PART('month', api_fuzzing_jobs.created_at) = 07
    
    UNION ALL
    

    SELECT
      MD5(prep_cluster_agent.cluster_agent_id || '-' || 'kubernetes_with_agent')   AS event_id,
      'kubernetes_with_agent'                                                                             AS event_name,
      'configure'                                                                             AS stage_name,
      prep_cluster_agent.created_at                                                                AS event_created_at,
      prep_cluster_agent.created_date_id                                                           AS created_date_id,
        prep_cluster_agent.dim_project_id                                     AS dim_project_id,
        'project'                                                                                              AS parent_type,
        prep_cluster_agent.dim_project_id                                     AS parent_id,
        prep_cluster_agent.ultimate_parent_namespace_id                                            AS ultimate_parent_namespace_id,
        COALESCE(prep_cluster_agent.dim_plan_id, 34)                                               AS plan_id_at_event_timestamp,
        COALESCE(prep_plan.plan_name, 'free')                                                                  AS plan_name_at_event_timestamp,
        COALESCE(prep_plan.plan_is_paid, FALSE)                                                                AS plan_was_paid_at_event_timestamp,
        prep_cluster_agent.dim_user_id                                        AS dim_user_id,
        prep_user.created_at                                                                                   AS user_created_at,
        TO_DATE(prep_user.created_at)                                                                          AS user_created_date,
        FLOOR(
        DATEDIFF('day',
                prep_user.created_at::DATE,
                prep_cluster_agent.created_at::DATE))                                              AS days_since_user_creation_at_event_date,
        prep_namespace.created_at                                                                              AS namespace_created_at,
        TO_DATE(prep_namespace.created_at)                                                                     AS namespace_created_date,
        IFNULL(blocked_user.is_blocked_user, FALSE)                                                            AS is_blocked_namespace_creator,
        prep_namespace.namespace_is_internal                                                                   AS namespace_is_internal,
        FLOOR(
        DATEDIFF('day',
                prep_namespace.created_at::DATE,
                prep_cluster_agent.created_at::DATE))                                              AS days_since_namespace_creation_at_event_date,
        FLOOR(
        DATEDIFF('day',
                dim_project.created_at::DATE,
                prep_cluster_agent.created_at::DATE))                                              AS days_since_project_creation_at_event_date, 
        IFNULL(dim_project.is_imported, FALSE)                                                                 AS project_is_imported,
        dim_project.is_learn_gitlab                                                                            AS project_is_learn_gitlab                                                                       
    FROM prep_cluster_agent
    LEFT JOIN dim_project 
      ON prep_cluster_agent.dim_project_id = dim_project.dim_project_id
    LEFT JOIN prep_namespace
      ON prep_cluster_agent.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_user AS blocked_user
      ON prep_namespace.creator_id = blocked_user.dim_user_id
    LEFT JOIN prep_user
      ON prep_cluster_agent.dim_user_id = prep_user.dim_user_id
    LEFT JOIN prep_plan
      ON prep_cluster_agent.dim_plan_id = prep_plan.dim_plan_id
    WHERE DATE_PART('year', prep_cluster_agent.created_at) = 2023
      AND DATE_PART('month', prep_cluster_agent.created_at) = 07
    

)

SELECT *
FROM data1a:T2e83,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
    ('epic', 'gitlab_dotcom_epics_source'),
    ('map_namespace_internal', 'map_namespace_internal'),
    ('prep_namespace', 'prep_namespace'),
    ('zendesk_ticket', 'zendesk_tickets_source'),
    ('zendesk_organization', 'zendesk_organizations_source'),
    ('sfdc_opportunity_source', 'sfdc_opportunity_source')
]) }}

, epic_notes AS (

    SELECT
      noteable_id AS epic_id,
      *
    FROM {{ ref('gitlab_dotcom_notes_source') }}
    WHERE noteable_type = 'Epic'
      AND system = FALSE

), epic_extended AS (

    SELECT
      prep_namespace.ultimate_parent_namespace_id AS dim_namespace_ultimate_parent_id,
      epic.*
    FROM epic
    INNER JOIN prep_namespace
      ON epic.group_id = prep_namespace.dim_namespace_id
    WHERE prep_namespace.ultimate_parent_namespace_id = 9970 -- Gitlab-org group namespace id

),  gitlab_epic_description_parsing AS (

    SELECT
      epic_id,
      "{{this.database}}".{{target.schema}}.regexp_to_array(epic_description, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "{{this.database}}".{{target.schema}}.regexp_to_array(epic_description, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(epic_description, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      IFNULL(epic_last_edited_at, created_at)                                                                                              AS updated_at
    FROM epic_extended
    WHERE epic_description IS NOT NULL
      AND NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), epic_notes_extended AS (

    SELECT epic_notes.*
    FROM epic_notes
    INNER JOIN epic_extended
      ON epic_notes.epic_id = epic_extended.epic_id

), gitlab_epic_notes_parsing AS (

    SELECT
      note_id,
      epic_id,
      "{{this.database}}".{{target.schema}}.regexp_to_array(note, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "{{this.database}}".{{target.schema}}.regexp_to_array(note, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(note, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      created_at                                                                                                               AS note_created_at,
      updated_at                                                                                                               AS note_updated_at
    FROM epic_notes_extended
    WHERE NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), gitlab_epic_notes_sfdc_links AS (

    SELECT
      note_id,
      epic_id,
      "{{this.database}}".{{target.schema}}.id15to18(f.value::VARCHAR)    AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                        AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                                 AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                    AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)                AS dim_crm_opportunity_id,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_epic_notes_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_epic_notes_sfdc_links_with_account AS (

    SELECT
      gitlab_epic_notes_sfdc_links.epic_id,
      gitlab_epic_notes_sfdc_links.sfdc_id_18char,
      gitlab_epic_notes_sfdc_links.sfdc_id_prefix,
      gitlab_epic_notes_sfdc_links.link_type,
      IFNULL(gitlab_epic_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_epic_notes_sfdc_links.dim_crm_opportunity_id,
      gitlab_epic_notes_sfdc_links.request_priority,
      gitlab_epic_notes_sfdc_links.note_created_at,
      gitlab_epic_notes_sfdc_links.note_updated_at
    FROM gitlab_epic_notes_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_epic_notes_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_epic_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_epic_description_sfdc_links AS (

    SELECT
      epic_id,
      "{{this.database}}".{{target.schema}}.id15to18(f.value::VARCHAR)  AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                      AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                               AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                  AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)              AS dim_crm_opportunity_id,
      request_priority,
      updated_at
    FROM gitlab_epic_description_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_epic_description_sfdc_links_with_account AS (

    SELECT
      gitlab_epic_description_sfdc_links.epic_id,
      gitlab_epic_description_sfdc_links.sfdc_id_18char,
      gitlab_epic_description_sfdc_links.sfdc_id_prefix,
      gitlab_epic_description_sfdc_links.link_type,
      IFNULL(gitlab_epic_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_epic_description_sfdc_links.dim_crm_opportunity_id,
      gitlab_epic_description_sfdc_links.request_priority,
      gitlab_epic_description_sfdc_links.updated_at
    FROM gitlab_epic_description_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_epic_description_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_epic_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_epic_notes_zendesk_link AS (

    SELECT
      note_id,
      epic_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_epic_notes_parsing, 
      TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_epic_notes_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_epic_notes_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_epic_notes_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_epic_notes_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), gitlab_epic_description_zendesk_link AS (

    SELECT
      epic_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      gitlab_epic_description_parsing.updated_at
    FROM gitlab_epic_description_parsing, 
        TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_epic_description_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_epic_description_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_epic_description_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_epic_description_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), union_links AS (

    SELECT
      epic_id AS dim_epic_id,
      link_type,
      dim_crm_opportunity_id,
      dim_crm_account_id,
      NULL AS dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER        AS request_priority,
      note_updated_at                            AS link_last_updated_at
    FROM gitlab_epic_notes_sfdc_links_with_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY epic_id, sfdc_id_18char ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      epic_id,
      link_type,
      NULL dim_crm_opportunity_id,
      dim_crm_account_id,
      dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER        AS request_priority,
      note_updated_at                            AS last_updated_at
    FROM gitlab_epic_notes_zendesk_with_sfdc_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY epic_id, dim_ticket_id ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      gitlab_epic_description_sfdc_links_with_account.epic_id,
      gitlab_epic_description_sfdc_links_with_account.link_type,
      gitlab_epic_description_sfdc_links_with_account.dim_crm_opportunity_id,
      gitlab_epic_description_sfdc_links_with_account.dim_crm_account_id,
      NULL AS dim_ticket_id,
      IFF(gitlab_epic_description_sfdc_links_with_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_epic_description_sfdc_links_with_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_epic_description_sfdc_links_with_account.updated_at
    FROM gitlab_epic_description_sfdc_links_with_account
    LEFT JOIN gitlab_epic_notes_sfdc_links_with_account
      ON gitlab_epic_description_sfdc_links_with_account.epic_id = gitlab_epic_notes_sfdc_links_with_account.epic_id
      AND gitlab_epic_description_sfdc_links_with_account.sfdc_id_18char = gitlab_epic_notes_sfdc_links_with_account.sfdc_id_18char
    WHERE gitlab_epic_notes_sfdc_links_with_account.epic_id IS NULL

    UNION

    SELECT
      gitlab_epic_description_zendesk_with_sfdc_account.epic_id,
      gitlab_epic_description_zendesk_with_sfdc_account.link_type,
      NULL dim_crm_opportunity_id,
      dim_crm_account_id,
      gitlab_epic_description_zendesk_with_sfdc_account.dim_ticket_id,
      IFF(gitlab_epic_description_zendesk_with_sfdc_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_epic_description_zendesk_with_sfdc_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_epic_description_zendesk_with_sfdc_account.updated_at
    FROM gitlab_epic_description_zendesk_with_sfdc_account
    LEFT JOIN gitlab_epic_notes_zendesk_link
      ON gitlab_epic_description_zendesk_with_sfdc_account.epic_id = gitlab_epic_notes_zendesk_link.epic_id
      AND gitlab_epic_description_zendesk_with_sfdc_account.dim_ticket_id = gitlab_epic_notes_zendesk_link.dim_ticket_id
    WHERE gitlab_epic_notes_zendesk_link.epic_id IS NULL

), final AS (

    SELECT
      dim_epic_id,
      link_type,
      {{ get_keyed_nulls('dim_crm_opportunity_id') }}    AS dim_crm_opportunity_id,
      dim_crm_account_id,
      IFNULL(dim_ticket_id, -1)::NUMBER                  AS dim_ticket_id,
      request_priority,
      is_request_priority_empty,
      link_last_updated_at
    FROM union_links

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@jpeguero",
    updated_by="@jpeguero",
    created_date="2021-10-12",
    updated_date="2023-03-14"
) }}1b:T2fb7,



WITH epic AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_epics_source

), map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), zendesk_ticket AS (

    SELECT * 
    FROM "PREP".zendesk.zendesk_tickets_source

), zendesk_organization AS (

    SELECT * 
    FROM "PREP".zendesk.zendesk_organizations_source

), sfdc_opportunity_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_opportunity_source

)

, epic_notes AS (

    SELECT
      noteable_id AS epic_id,
      *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_notes_source
    WHERE noteable_type = 'Epic'
      AND system = FALSE

), epic_extended AS (

    SELECT
      prep_namespace.ultimate_parent_namespace_id AS dim_namespace_ultimate_parent_id,
      epic.*
    FROM epic
    INNER JOIN prep_namespace
      ON epic.group_id = prep_namespace.dim_namespace_id
    WHERE prep_namespace.ultimate_parent_namespace_id = 9970 -- Gitlab-org group namespace id

),  gitlab_epic_description_parsing AS (

    SELECT
      epic_id,
      "PROD".preparation.regexp_to_array(epic_description, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "PROD".preparation.regexp_to_array(epic_description, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(epic_description, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      IFNULL(epic_last_edited_at, created_at)                                                                                              AS updated_at
    FROM epic_extended
    WHERE epic_description IS NOT NULL
      AND NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), epic_notes_extended AS (

    SELECT epic_notes.*
    FROM epic_notes
    INNER JOIN epic_extended
      ON epic_notes.epic_id = epic_extended.epic_id

), gitlab_epic_notes_parsing AS (

    SELECT
      note_id,
      epic_id,
      "PROD".preparation.regexp_to_array(note, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "PROD".preparation.regexp_to_array(note, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(note, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      created_at                                                                                                               AS note_created_at,
      updated_at                                                                                                               AS note_updated_at
    FROM epic_notes_extended
    WHERE NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), gitlab_epic_notes_sfdc_links AS (

    SELECT
      note_id,
      epic_id,
      "PROD".preparation.id15to18(f.value::VARCHAR)    AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                        AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                                 AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                    AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)                AS dim_crm_opportunity_id,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_epic_notes_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_epic_notes_sfdc_links_with_account AS (

    SELECT
      gitlab_epic_notes_sfdc_links.epic_id,
      gitlab_epic_notes_sfdc_links.sfdc_id_18char,
      gitlab_epic_notes_sfdc_links.sfdc_id_prefix,
      gitlab_epic_notes_sfdc_links.link_type,
      IFNULL(gitlab_epic_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_epic_notes_sfdc_links.dim_crm_opportunity_id,
      gitlab_epic_notes_sfdc_links.request_priority,
      gitlab_epic_notes_sfdc_links.note_created_at,
      gitlab_epic_notes_sfdc_links.note_updated_at
    FROM gitlab_epic_notes_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_epic_notes_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_epic_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_epic_description_sfdc_links AS (

    SELECT
      epic_id,
      "PROD".preparation.id15to18(f.value::VARCHAR)  AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                      AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                               AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                  AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)              AS dim_crm_opportunity_id,
      request_priority,
      updated_at
    FROM gitlab_epic_description_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_epic_description_sfdc_links_with_account AS (

    SELECT
      gitlab_epic_description_sfdc_links.epic_id,
      gitlab_epic_description_sfdc_links.sfdc_id_18char,
      gitlab_epic_description_sfdc_links.sfdc_id_prefix,
      gitlab_epic_description_sfdc_links.link_type,
      IFNULL(gitlab_epic_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_epic_description_sfdc_links.dim_crm_opportunity_id,
      gitlab_epic_description_sfdc_links.request_priority,
      gitlab_epic_description_sfdc_links.updated_at
    FROM gitlab_epic_description_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_epic_description_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_epic_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_epic_notes_zendesk_link AS (

    SELECT
      note_id,
      epic_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_epic_notes_parsing, 
      TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_epic_notes_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_epic_notes_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_epic_notes_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_epic_notes_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), gitlab_epic_description_zendesk_link AS (

    SELECT
      epic_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      gitlab_epic_description_parsing.updated_at
    FROM gitlab_epic_description_parsing, 
        TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_epic_description_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_epic_description_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_epic_description_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_epic_description_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), union_links AS (

    SELECT
      epic_id AS dim_epic_id,
      link_type,
      dim_crm_opportunity_id,
      dim_crm_account_id,
      NULL AS dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER        AS request_priority,
      note_updated_at                            AS link_last_updated_at
    FROM gitlab_epic_notes_sfdc_links_with_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY epic_id, sfdc_id_18char ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      epic_id,
      link_type,
      NULL dim_crm_opportunity_id,
      dim_crm_account_id,
      dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER        AS request_priority,
      note_updated_at                            AS last_updated_at
    FROM gitlab_epic_notes_zendesk_with_sfdc_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY epic_id, dim_ticket_id ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      gitlab_epic_description_sfdc_links_with_account.epic_id,
      gitlab_epic_description_sfdc_links_with_account.link_type,
      gitlab_epic_description_sfdc_links_with_account.dim_crm_opportunity_id,
      gitlab_epic_description_sfdc_links_with_account.dim_crm_account_id,
      NULL AS dim_ticket_id,
      IFF(gitlab_epic_description_sfdc_links_with_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_epic_description_sfdc_links_with_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_epic_description_sfdc_links_with_account.updated_at
    FROM gitlab_epic_description_sfdc_links_with_account
    LEFT JOIN gitlab_epic_notes_sfdc_links_with_account
      ON gitlab_epic_description_sfdc_links_with_account.epic_id = gitlab_epic_notes_sfdc_links_with_account.epic_id
      AND gitlab_epic_description_sfdc_links_with_account.sfdc_id_18char = gitlab_epic_notes_sfdc_links_with_account.sfdc_id_18char
    WHERE gitlab_epic_notes_sfdc_links_with_account.epic_id IS NULL

    UNION

    SELECT
      gitlab_epic_description_zendesk_with_sfdc_account.epic_id,
      gitlab_epic_description_zendesk_with_sfdc_account.link_type,
      NULL dim_crm_opportunity_id,
      dim_crm_account_id,
      gitlab_epic_description_zendesk_with_sfdc_account.dim_ticket_id,
      IFF(gitlab_epic_description_zendesk_with_sfdc_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_epic_description_zendesk_with_sfdc_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_epic_description_zendesk_with_sfdc_account.updated_at
    FROM gitlab_epic_description_zendesk_with_sfdc_account
    LEFT JOIN gitlab_epic_notes_zendesk_link
      ON gitlab_epic_description_zendesk_with_sfdc_account.epic_id = gitlab_epic_notes_zendesk_link.epic_id
      AND gitlab_epic_description_zendesk_with_sfdc_account.dim_ticket_id = gitlab_epic_notes_zendesk_link.dim_ticket_id
    WHERE gitlab_epic_notes_zendesk_link.epic_id IS NULL

), final AS (

    SELECT
      dim_epic_id,
      link_type,
      

  COALESCE(dim_crm_opportunity_id, MD5(-1)) 

    AS dim_crm_opportunity_id,
      dim_crm_account_id,
      IFNULL(dim_ticket_id, -1)::NUMBER                  AS dim_ticket_id,
      request_priority,
      is_request_priority_empty,
      link_last_updated_at
    FROM union_links

)

SELECT
      *,
      '@jpeguero'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-10-12'::DATE        AS model_created_date,
      '2023-03-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1c:Ta7c,{{ simple_cte([
    ('ptpt_scores', 'ptpt_scores_source'),
    ('prep_namespace', 'prep_namespace'),
    ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source')
    ])
}}

, score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpt_scores_last AS (

    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpt_scores_last_2 AS (
  
    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpt_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last.namespace_id,
      ptpt_scores_last.score,
      ptpt_scores_last.score_group,
      ptpt_scores_last.insights,
      ptpt_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last
      ON prep_namespace.dim_namespace_id = ptpt_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpt_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last_2.insights,
      ptpt_scores_last_2.score_group,
      ptpt_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpt_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  {{ dbt_utils.surrogate_key(['namespace_creator_ptpt_score.email_address']) }} AS dim_marketing_contact_id,
  namespace_creator_ptpt_score.namespace_id,
  namespace_creator_ptpt_score.score,
  namespace_creator_ptpt_score.score_group,
  namespace_creator_ptpt_score.insights,
  namespace_creator_ptpt_score.score_date,
  namespace_creator_ptpt_score_last_2.insights          AS past_insights,
  namespace_creator_ptpt_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpt_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpt_score
LEFT JOIN namespace_creator_ptpt_score_last_2
  ON namespace_creator_ptpt_score.email_address = namespace_creator_ptpt_score_last_2.email_address1d:Tb02,

WITH ptpt_scores AS (

    SELECT * 
    FROM "PREP".data_science.ptpt_scores_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

)

, score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpt_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpt_scores_last AS (

    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpt_scores_last_2 AS (
  
    SELECT *
    FROM ptpt_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpt_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last.namespace_id,
      ptpt_scores_last.score,
      ptpt_scores_last.score_group,
      ptpt_scores_last.insights,
      ptpt_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last
      ON prep_namespace.dim_namespace_id = ptpt_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpt_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpt_scores_last_2.insights,
      ptpt_scores_last_2.score_group,
      ptpt_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpt_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpt_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  md5(cast(coalesce(cast(namespace_creator_ptpt_score.email_address as 
    varchar
), '') as 
    varchar
)) AS dim_marketing_contact_id,
  namespace_creator_ptpt_score.namespace_id,
  namespace_creator_ptpt_score.score,
  namespace_creator_ptpt_score.score_group,
  namespace_creator_ptpt_score.insights,
  namespace_creator_ptpt_score.score_date,
  namespace_creator_ptpt_score_last_2.insights          AS past_insights,
  namespace_creator_ptpt_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpt_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpt_score
LEFT JOIN namespace_creator_ptpt_score_last_2
  ON namespace_creator_ptpt_score.email_address = namespace_creator_ptpt_score_last_2.email_address1e:Ta97,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_requirement_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('prep_namespace_plan_hist', 'prep_namespace_plan_hist'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('prep_namespace', 'prep_namespace'),
    ('prep_project', 'prep_project'),
]) }}

, gitlab_dotcom_requirements_dedupe_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_requirements_dedupe_source') }} 
    {% if is_incremental() %}

    WHERE updated_at >= (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      gitlab_dotcom_requirements_dedupe_source.id::NUMBER                                  AS dim_requirement_id,
      gitlab_dotcom_requirements_dedupe_source.project_id::NUMBER                          AS dim_project_id,
      prep_project.ultimate_parent_namespace_id::NUMBER                                    AS ultimate_parent_namespace_id,
      dim_date.date_id::NUMBER                                                             AS created_date_id,
      IFNULL(prep_namespace_plan_hist.dim_plan_id, 34)::NUMBER                             AS dim_plan_id,
      gitlab_dotcom_requirements_dedupe_source.author_id::NUMBER                           AS author_id,
      iid::NUMBER                                                                          AS requirement_internal_id,
      state::VARCHAR                                                                       AS requirement_state_id,
      gitlab_dotcom_requirements_dedupe_source.created_at::TIMESTAMP                       AS created_at,
      gitlab_dotcom_requirements_dedupe_source.updated_at::TIMESTAMP                       AS updated_at
    FROM gitlab_dotcom_requirements_dedupe_source
    LEFT JOIN prep_project ON gitlab_dotcom_requirements_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN prep_namespace ON prep_project.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
        AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_namespace_plan_hist ON prep_project.ultimate_parent_namespace_id = prep_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_requirements_dedupe_source.created_at >= prep_namespace_plan_hist.valid_from
        AND gitlab_dotcom_requirements_dedupe_source.created_at < COALESCE(prep_namespace_plan_hist.valid_to, '2099-01-01')
    LEFT JOIN dim_date ON TO_DATE(gitlab_dotcom_requirements_dedupe_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@mpeychet_",
    updated_by="@chrissharp",
    created_date="2021-08-10",
    updated_date="2022-05-30"
) }}1f:Tbcb,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), prep_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_plan_hist

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), prep_project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

)

, gitlab_dotcom_requirements_dedupe_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_requirements_dedupe_source 
    

    WHERE updated_at >= (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_requirement)

    

), joined AS (

    SELECT 
      gitlab_dotcom_requirements_dedupe_source.id::NUMBER                                  AS dim_requirement_id,
      gitlab_dotcom_requirements_dedupe_source.project_id::NUMBER                          AS dim_project_id,
      prep_project.ultimate_parent_namespace_id::NUMBER                                    AS ultimate_parent_namespace_id,
      dim_date.date_id::NUMBER                                                             AS created_date_id,
      IFNULL(prep_namespace_plan_hist.dim_plan_id, 34)::NUMBER                             AS dim_plan_id,
      gitlab_dotcom_requirements_dedupe_source.author_id::NUMBER                           AS author_id,
      iid::NUMBER                                                                          AS requirement_internal_id,
      state::VARCHAR                                                                       AS requirement_state_id,
      gitlab_dotcom_requirements_dedupe_source.created_at::TIMESTAMP                       AS created_at,
      gitlab_dotcom_requirements_dedupe_source.updated_at::TIMESTAMP                       AS updated_at
    FROM gitlab_dotcom_requirements_dedupe_source
    LEFT JOIN prep_project ON gitlab_dotcom_requirements_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN prep_namespace ON prep_project.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
        AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_namespace_plan_hist ON prep_project.ultimate_parent_namespace_id = prep_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_requirements_dedupe_source.created_at >= prep_namespace_plan_hist.valid_from
        AND gitlab_dotcom_requirements_dedupe_source.created_at < COALESCE(prep_namespace_plan_hist.valid_to, '2099-01-01')
    LEFT JOIN dim_date ON TO_DATE(gitlab_dotcom_requirements_dedupe_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-08-10'::DATE        AS model_created_date,
      '2022-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined20:Td3a,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_deployment_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('prep_namespace_plan_hist', 'prep_namespace_plan_hist'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('prep_namespace', 'prep_namespace'),
    ('prep_project', 'prep_project'),
]) }}

, gitlab_dotcom_deployments_dedupe_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_deployments_dedupe_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      gitlab_dotcom_deployments_dedupe_source.id::NUMBER                                      AS dim_deployment_id,
      gitlab_dotcom_deployments_dedupe_source.project_id::NUMBER                              AS dim_project_id,
      prep_project.ultimate_parent_namespace_id::NUMBER                                       AS ultimate_parent_namespace_id,
      dim_date.date_id::NUMBER                                                                AS created_date_id,
      IFNULL(prep_namespace_plan_hist.dim_plan_id, 34)::NUMBER                                AS dim_plan_id,
      gitlab_dotcom_deployments_dedupe_source.user_id::NUMBER                                 AS dim_user_id,
      gitlab_dotcom_deployments_dedupe_source.iid::NUMBER                                     AS deployment_internal_id,
      gitlab_dotcom_deployments_dedupe_source.environment_id::NUMBER                          AS environment_id,
      gitlab_dotcom_deployments_dedupe_source.cluster_id::NUMBER                              AS cluster_id,
      gitlab_dotcom_deployments_dedupe_source.deployable_id::NUMBER                           AS deployable_id,
      gitlab_dotcom_deployments_dedupe_source.deployable_type::VARCHAR                        AS deployable_type,
      gitlab_dotcom_deployments_dedupe_source.created_at::TIMESTAMP                           AS created_at,
      gitlab_dotcom_deployments_dedupe_source.updated_at::TIMESTAMP                           AS updated_at,
      gitlab_dotcom_deployments_dedupe_source.on_stop::VARCHAR                                AS on_stop,
      gitlab_dotcom_deployments_dedupe_source.finished_at::TIMESTAMP                          AS finished_at,
      gitlab_dotcom_deployments_dedupe_source.status::NUMBER                                  AS status_id
    FROM gitlab_dotcom_deployments_dedupe_source
    LEFT JOIN prep_project ON gitlab_dotcom_deployments_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN prep_namespace ON prep_project.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
        AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_namespace_plan_hist ON prep_project.ultimate_parent_namespace_id = prep_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_deployments_dedupe_source.created_at >= prep_namespace_plan_hist.valid_from
        AND gitlab_dotcom_deployments_dedupe_source.created_at < COALESCE(prep_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(gitlab_dotcom_deployments_dedupe_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@mpeychet_",
    updated_by="@chrissharp",
    created_date="2021-07-26",
    updated_date="2022-05-30"
) }}21:Te6e,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), prep_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_plan_hist

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), prep_project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

)

, gitlab_dotcom_deployments_dedupe_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_deployments_dedupe_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_deployment)

    

), joined AS (

    SELECT 
      gitlab_dotcom_deployments_dedupe_source.id::NUMBER                                      AS dim_deployment_id,
      gitlab_dotcom_deployments_dedupe_source.project_id::NUMBER                              AS dim_project_id,
      prep_project.ultimate_parent_namespace_id::NUMBER                                       AS ultimate_parent_namespace_id,
      dim_date.date_id::NUMBER                                                                AS created_date_id,
      IFNULL(prep_namespace_plan_hist.dim_plan_id, 34)::NUMBER                                AS dim_plan_id,
      gitlab_dotcom_deployments_dedupe_source.user_id::NUMBER                                 AS dim_user_id,
      gitlab_dotcom_deployments_dedupe_source.iid::NUMBER                                     AS deployment_internal_id,
      gitlab_dotcom_deployments_dedupe_source.environment_id::NUMBER                          AS environment_id,
      gitlab_dotcom_deployments_dedupe_source.cluster_id::NUMBER                              AS cluster_id,
      gitlab_dotcom_deployments_dedupe_source.deployable_id::NUMBER                           AS deployable_id,
      gitlab_dotcom_deployments_dedupe_source.deployable_type::VARCHAR                        AS deployable_type,
      gitlab_dotcom_deployments_dedupe_source.created_at::TIMESTAMP                           AS created_at,
      gitlab_dotcom_deployments_dedupe_source.updated_at::TIMESTAMP                           AS updated_at,
      gitlab_dotcom_deployments_dedupe_source.on_stop::VARCHAR                                AS on_stop,
      gitlab_dotcom_deployments_dedupe_source.finished_at::TIMESTAMP                          AS finished_at,
      gitlab_dotcom_deployments_dedupe_source.status::NUMBER                                  AS status_id
    FROM gitlab_dotcom_deployments_dedupe_source
    LEFT JOIN prep_project ON gitlab_dotcom_deployments_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN prep_namespace ON prep_project.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
        AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_namespace_plan_hist ON prep_project.ultimate_parent_namespace_id = prep_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_deployments_dedupe_source.created_at >= prep_namespace_plan_hist.valid_from
        AND gitlab_dotcom_deployments_dedupe_source.created_at < COALESCE(prep_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(gitlab_dotcom_deployments_dedupe_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-07-26'::DATE        AS model_created_date,
      '2022-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined22:T29ca,{{ config(
    tags=["mnpi_exception"]
) }}

{{ config({
    "materialized": "table"
    })
}}

{{ simple_cte([
    ('versions', 'customers_db_versions_source'),
    ('current_orders', 'customers_db_orders_source'),
    ('dim_date', 'dim_date'),
    ('namespaces', 'prep_namespace'),
    ('subscriptions', 'dim_subscription'),
    ('billing_accounts', 'dim_billing_account')
]) }}

, customers_db_versions AS (

    SELECT *
    FROM versions
    -- selecting only orders
    WHERE item_type = 'Order'
      AND object IS NOT NULL

), flattened_object AS (

    -- objects look like a yaml table, splitting the object into rows at each linebreak
    -- column keys will be turned into column names and populated by the associated column values
    -- column values are all strings, some wrapped in extra quotations, some containing multiple colons 
    SELECT
      *,
      SPLIT_PART(value, ': ', 1)                                                          AS column_key,
      NULLIF(TRIM(SPLIT_PART(value, column_key || ': ', 2), ''''),'')                     AS column_value
    FROM customers_db_versions,
    LATERAL SPLIT_TO_TABLE(object, '\n')

), cleaned AS (

    -- this CTE attempts to further clean up column values
    -- namespace id: messy data from source, uses regular expression to remove all non-numeric characters
    -- boolean column: set NULL equal to FALSE
    -- timestamp columns: can come with 3-4 additional rows in the original object
    --   when the associated column_value for each timestamp column_key is not a timestamp the 3rd or 4th
    --   row following contains the actual timestamp value
    --   additionally, the created_at column sometimes contained '&1 ' before the timestamp value
    SELECT
      version_id,
      item_id                                                                             AS order_id,
      created_at                                                                          AS valid_to,
      IFF(column_key = 'customer_id', column_value::NUMBER, NULL)                         AS customer_id,
      IFF(column_key = 'product_rate_plan_id', column_value, NULL)                        AS product_rate_plan_id,
      IFF(column_key = 'subscription_id', column_value, NULL)                             AS subscription_id,
      IFF(column_key = 'subscription_name', column_value, NULL)                           AS subscription_name,
      IFF(column_key = 'start_date', column_value::DATE, NULL)                            AS order_start_date,
      IFF(column_key = 'end_date', column_value::DATE, NULL)                              AS order_end_date,
      IFF(column_key = 'quantity', column_value::NUMBER, NULL)                            AS order_quantity,
      IFF(column_key = 'created_at',
          COALESCE(TRY_TO_TIMESTAMP(LTRIM(column_value, '&1 ')),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_created_at,
      IFF(column_key = 'updated_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_updated_at,
      IFF(column_key = 'gl_namespace_id',
          TRY_TO_NUMBER(REGEXP_REPLACE(column_value, '[^0-9]+', '')),
          NULL)                                                                           AS gitlab_namespace_id,
      IFF(column_key = 'gl_namespace_name', column_value, NULL)                           AS gitlab_namespace_name,
      IFF(column_key = 'amendment_type', column_value, NULL)                              AS amendment_type,
      IFF(column_key = 'trial', IFNULL(column_value, FALSE)::BOOLEAN, NULL)               AS order_is_trial,
      IFF(column_key = 'last_extra_ci_minutes_sync_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS last_extra_ci_minutes_sync_at,
      IFF(column_key = 'zuora_account_id', column_value, NULL)                            AS zuora_account_id,
      IFF(column_key = 'increased_billing_rate_notified_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS increased_billing_rate_notified_at
    FROM flattened_object
  
), pivoted AS (

    SELECT 
      version_id, 
      order_id,
      valid_to,
      MAX(customer_id)                                                                    AS customer_id,
      MAX(product_rate_plan_id)                                                           AS product_rate_plan_id,
      MAX(subscription_id)                                                                AS subscription_id,
      MAX(subscription_name)                                                              AS subscription_name,
      MAX(order_start_date)                                                               AS order_start_date,
      MAX(order_end_date)                                                                 AS order_end_date,
      MAX(order_quantity)                                                                 AS order_quantity,
      MAX(order_created_at)                                                               AS order_created_at,
      MAX(order_updated_at)                                                               AS order_updated_at,
      MAX(gitlab_namespace_id)                                                            AS gitlab_namespace_id,
      MAX(gitlab_namespace_name)                                                          AS gitlab_namespace_name,
      MAX(amendment_type)                                                                 AS amendment_type,
      MAX(order_is_trial)                                                                 AS order_is_trial,
      MAX(last_extra_ci_minutes_sync_at)                                                  AS last_extra_ci_minutes_sync_at,
      MAX(zuora_account_id)                                                               AS zuora_account_id,
      MAX(increased_billing_rate_notified_at)                                             AS increased_billing_rate_notified_at
    FROM cleaned
    {{ dbt_utils.group_by(n=3) }}

), unioned AS (

    SELECT 
      order_id                                                                            AS dim_order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id                                                                     AS dim_subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER                                                         AS dim_namespace_id,
      gitlab_namespace_name                                                               AS namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id                                                                    AS dim_billing_account_id,
      increased_billing_rate_notified_at,
      IFNULL(LAG(valid_to) OVER (PARTITION BY order_id ORDER BY version_id),
             order_created_at)                                                            AS valid_from,
      valid_to
    FROM pivoted
    WHERE order_created_at IS NOT NULL

    UNION ALL

    SELECT 
      order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER,
      gitlab_namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id,
      increased_billing_rate_notified_at,
      order_updated_at                                                                    AS valid_from,
      NULL                                                                                AS valid_to
    FROM current_orders

), joined AS (

    SELECT 
      unioned.dim_order_id,
      unioned.customer_id,
      unioned.product_rate_plan_id,
      unioned.order_created_at,
      start_dates.date_day                                                                AS order_start_date,
      end_dates.date_day                                                                  AS order_end_date,
      unioned.order_quantity,
      subscriptions.dim_subscription_id,
      subscriptions.subscription_name,
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      billing_accounts.dim_billing_account_id,
      unioned.amendment_type,
      unioned.order_is_trial,
      unioned.last_extra_ci_minutes_sync_at,
      unioned.increased_billing_rate_notified_at,
      unioned.valid_from,
      unioned.valid_to
    FROM unioned
    LEFT JOIN subscriptions
      ON unioned.dim_subscription_id = subscriptions.dim_subscription_id
    LEFT JOIN namespaces
      ON unioned.dim_namespace_id = namespaces.dim_namespace_id
    LEFT JOIN billing_accounts
      ON unioned.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN dim_date AS start_dates
      ON unioned.order_start_date = start_dates.date_day
    LEFT JOIN dim_date AS end_dates
      ON unioned.order_end_date = end_dates.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@ischweickartDD",
    created_date="2021-07-07",
    updated_date="2021-07-07"
) }}23:T2b1e,





WITH versions AS (

    SELECT * 
    FROM "PREP".sensitive.customers_db_versions_source

), current_orders AS (

    SELECT * 
    FROM "PREP".customers.customers_db_orders_source

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), namespaces AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), subscriptions AS (

    SELECT * 
    FROM "PROD".common.dim_subscription

), billing_accounts AS (

    SELECT * 
    FROM "PROD".common.dim_billing_account

)

, customers_db_versions AS (

    SELECT *
    FROM versions
    -- selecting only orders
    WHERE item_type = 'Order'
      AND object IS NOT NULL

), flattened_object AS (

    -- objects look like a yaml table, splitting the object into rows at each linebreak
    -- column keys will be turned into column names and populated by the associated column values
    -- column values are all strings, some wrapped in extra quotations, some containing multiple colons 
    SELECT
      *,
      SPLIT_PART(value, ': ', 1)                                                          AS column_key,
      NULLIF(TRIM(SPLIT_PART(value, column_key || ': ', 2), ''''),'')                     AS column_value
    FROM customers_db_versions,
    LATERAL SPLIT_TO_TABLE(object, '\n')

), cleaned AS (

    -- this CTE attempts to further clean up column values
    -- namespace id: messy data from source, uses regular expression to remove all non-numeric characters
    -- boolean column: set NULL equal to FALSE
    -- timestamp columns: can come with 3-4 additional rows in the original object
    --   when the associated column_value for each timestamp column_key is not a timestamp the 3rd or 4th
    --   row following contains the actual timestamp value
    --   additionally, the created_at column sometimes contained '&1 ' before the timestamp value
    SELECT
      version_id,
      item_id                                                                             AS order_id,
      created_at                                                                          AS valid_to,
      IFF(column_key = 'customer_id', column_value::NUMBER, NULL)                         AS customer_id,
      IFF(column_key = 'product_rate_plan_id', column_value, NULL)                        AS product_rate_plan_id,
      IFF(column_key = 'subscription_id', column_value, NULL)                             AS subscription_id,
      IFF(column_key = 'subscription_name', column_value, NULL)                           AS subscription_name,
      IFF(column_key = 'start_date', column_value::DATE, NULL)                            AS order_start_date,
      IFF(column_key = 'end_date', column_value::DATE, NULL)                              AS order_end_date,
      IFF(column_key = 'quantity', column_value::NUMBER, NULL)                            AS order_quantity,
      IFF(column_key = 'created_at',
          COALESCE(TRY_TO_TIMESTAMP(LTRIM(column_value, '&1 ')),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_created_at,
      IFF(column_key = 'updated_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS order_updated_at,
      IFF(column_key = 'gl_namespace_id',
          TRY_TO_NUMBER(REGEXP_REPLACE(column_value, '[^0-9]+', '')),
          NULL)                                                                           AS gitlab_namespace_id,
      IFF(column_key = 'gl_namespace_name', column_value, NULL)                           AS gitlab_namespace_name,
      IFF(column_key = 'amendment_type', column_value, NULL)                              AS amendment_type,
      IFF(column_key = 'trial', IFNULL(column_value, FALSE)::BOOLEAN, NULL)               AS order_is_trial,
      IFF(column_key = 'last_extra_ci_minutes_sync_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS last_extra_ci_minutes_sync_at,
      IFF(column_key = 'zuora_account_id', column_value, NULL)                            AS zuora_account_id,
      IFF(column_key = 'increased_billing_rate_notified_at',
          COALESCE(TRY_TO_TIMESTAMP(column_value),
                   TRY_TO_TIMESTAMP(LAG(column_value, 3)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC)),
                   TRY_TO_TIMESTAMP(LAG(column_value, 4)
                     OVER (PARTITION BY version_id, item_id, seq ORDER BY index DESC))),
          NULL)                                                                           AS increased_billing_rate_notified_at
    FROM flattened_object
  
), pivoted AS (

    SELECT 
      version_id, 
      order_id,
      valid_to,
      MAX(customer_id)                                                                    AS customer_id,
      MAX(product_rate_plan_id)                                                           AS product_rate_plan_id,
      MAX(subscription_id)                                                                AS subscription_id,
      MAX(subscription_name)                                                              AS subscription_name,
      MAX(order_start_date)                                                               AS order_start_date,
      MAX(order_end_date)                                                                 AS order_end_date,
      MAX(order_quantity)                                                                 AS order_quantity,
      MAX(order_created_at)                                                               AS order_created_at,
      MAX(order_updated_at)                                                               AS order_updated_at,
      MAX(gitlab_namespace_id)                                                            AS gitlab_namespace_id,
      MAX(gitlab_namespace_name)                                                          AS gitlab_namespace_name,
      MAX(amendment_type)                                                                 AS amendment_type,
      MAX(order_is_trial)                                                                 AS order_is_trial,
      MAX(last_extra_ci_minutes_sync_at)                                                  AS last_extra_ci_minutes_sync_at,
      MAX(zuora_account_id)                                                               AS zuora_account_id,
      MAX(increased_billing_rate_notified_at)                                             AS increased_billing_rate_notified_at
    FROM cleaned
    group by 1,2,3

), unioned AS (

    SELECT 
      order_id                                                                            AS dim_order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id                                                                     AS dim_subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER                                                         AS dim_namespace_id,
      gitlab_namespace_name                                                               AS namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id                                                                    AS dim_billing_account_id,
      increased_billing_rate_notified_at,
      IFNULL(LAG(valid_to) OVER (PARTITION BY order_id ORDER BY version_id),
             order_created_at)                                                            AS valid_from,
      valid_to
    FROM pivoted
    WHERE order_created_at IS NOT NULL

    UNION ALL

    SELECT 
      order_id,
      customer_id,
      product_rate_plan_id,
      subscription_id,
      subscription_name,
      order_start_date,
      order_end_date,
      order_quantity,
      order_created_at,
      gitlab_namespace_id::NUMBER,
      gitlab_namespace_name,
      amendment_type,
      order_is_trial,
      last_extra_ci_minutes_sync_at,
      zuora_account_id,
      increased_billing_rate_notified_at,
      order_updated_at                                                                    AS valid_from,
      NULL                                                                                AS valid_to
    FROM current_orders

), joined AS (

    SELECT 
      unioned.dim_order_id,
      unioned.customer_id,
      unioned.product_rate_plan_id,
      unioned.order_created_at,
      start_dates.date_day                                                                AS order_start_date,
      end_dates.date_day                                                                  AS order_end_date,
      unioned.order_quantity,
      subscriptions.dim_subscription_id,
      subscriptions.subscription_name,
      namespaces.dim_namespace_id,
      namespaces.namespace_name,
      billing_accounts.dim_billing_account_id,
      unioned.amendment_type,
      unioned.order_is_trial,
      unioned.last_extra_ci_minutes_sync_at,
      unioned.increased_billing_rate_notified_at,
      unioned.valid_from,
      unioned.valid_to
    FROM unioned
    LEFT JOIN subscriptions
      ON unioned.dim_subscription_id = subscriptions.dim_subscription_id
    LEFT JOIN namespaces
      ON unioned.dim_namespace_id = namespaces.dim_namespace_id
    LEFT JOIN billing_accounts
      ON unioned.dim_billing_account_id = billing_accounts.dim_billing_account_id
    LEFT JOIN dim_date AS start_dates
      ON unioned.order_start_date = start_dates.date_day
    LEFT JOIN dim_date AS end_dates
      ON unioned.order_end_date = end_dates.date_day

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@ischweickartDD'::VARCHAR       AS updated_by,
      '2021-07-07'::DATE        AS model_created_date,
      '2021-07-07'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined24:T33ae,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
    ('issue', 'gitlab_dotcom_issues_source'),
    ('map_namespace_internal', 'map_namespace_internal'),
    ('prep_namespace', 'prep_namespace'),
    ('project', 'gitlab_dotcom_projects_source'),
    ('zendesk_ticket', 'zendesk_tickets_source'),
    ('zendesk_organization', 'zendesk_organizations_source'),
    ('map_moved_duplicated_issue', 'map_moved_duplicated_issue'),
    ('sfdc_opportunity_source', 'sfdc_opportunity_source')
]) }}

, issue_notes AS (

    SELECT
      noteable_id AS issue_id,
      *
    FROM {{ ref('gitlab_dotcom_notes_source') }}
    WHERE noteable_type = 'Issue'
      AND system = FALSE

), issue_extended AS (

    SELECT
      prep_namespace.ultimate_parent_namespace_id AS dim_namespace_ultimate_parent_id,
      issue.*
    FROM issue
    INNER JOIN project
      ON project.project_id = issue.project_id
    INNER JOIN prep_namespace
      ON project.namespace_id = prep_namespace.dim_namespace_id
    WHERE prep_namespace.ultimate_parent_namespace_id = 9970 -- Gitlab-org group namespace id

),  gitlab_issue_description_parsing AS (

    SELECT
      issue_id,
      "{{this.database}}".{{target.schema}}.regexp_to_array(issue_description, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "{{this.database}}".{{target.schema}}.regexp_to_array(issue_description, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(issue_description, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      IFNULL(issue_last_edited_at, created_at)                                                                                              AS issue_last_edited_at
    FROM issue_extended
    WHERE issue_description IS NOT NULL
      AND NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), issue_notes_extended AS (

    SELECT issue_notes.*
    FROM issue_notes
    INNER JOIN issue_extended
      ON issue_notes.issue_id = issue_extended.issue_id

), gitlab_issue_notes_parsing AS (

    SELECT
      note_id,
      issue_id,
      "{{this.database}}".{{target.schema}}.regexp_to_array(note, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "{{this.database}}".{{target.schema}}.regexp_to_array(note, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(note, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      created_at                                                                                                               AS note_created_at,
      updated_at                                                                                                               AS note_updated_at
    FROM issue_notes_extended
    WHERE NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), gitlab_issue_notes_sfdc_links AS (

    SELECT
      note_id,
      issue_id,
      "{{this.database}}".{{target.schema}}.id15to18(f.value::VARCHAR)    AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                        AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                                 AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                    AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)                AS dim_crm_opportunity_id,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_issue_notes_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_issue_notes_sfdc_links_with_account AS (

    SELECT
      gitlab_issue_notes_sfdc_links.issue_id,
      gitlab_issue_notes_sfdc_links.sfdc_id_18char,
      gitlab_issue_notes_sfdc_links.sfdc_id_prefix,
      gitlab_issue_notes_sfdc_links.link_type,
      IFNULL(gitlab_issue_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_issue_notes_sfdc_links.dim_crm_opportunity_id,
      gitlab_issue_notes_sfdc_links.request_priority,
      gitlab_issue_notes_sfdc_links.note_created_at,
      gitlab_issue_notes_sfdc_links.note_updated_at
    FROM gitlab_issue_notes_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_issue_notes_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_issue_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_issue_description_sfdc_links AS (

    SELECT
      issue_id,
      "{{this.database}}".{{target.schema}}.id15to18(f.value::VARCHAR) AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                     AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                              AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                 AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)             AS dim_crm_opportunity_id,
      request_priority,
      issue_last_edited_at
    FROM gitlab_issue_description_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_issue_description_sfdc_links_with_account AS (

    SELECT
      gitlab_issue_description_sfdc_links.issue_id,
      gitlab_issue_description_sfdc_links.sfdc_id_18char,
      gitlab_issue_description_sfdc_links.sfdc_id_prefix,
      gitlab_issue_description_sfdc_links.link_type,
      IFNULL(gitlab_issue_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_issue_description_sfdc_links.dim_crm_opportunity_id,
      gitlab_issue_description_sfdc_links.request_priority,
      gitlab_issue_description_sfdc_links.issue_last_edited_at
    FROM gitlab_issue_description_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_issue_description_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_issue_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_issue_notes_zendesk_link AS (

    SELECT
      note_id,
      issue_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_issue_notes_parsing, 
      TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_issue_notes_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_issue_notes_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_issue_notes_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_issue_notes_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), gitlab_issue_description_zendesk_link AS (

    SELECT
      issue_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      issue_last_edited_at
    FROM gitlab_issue_description_parsing, 
      TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_issue_description_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_issue_description_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_issue_description_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_issue_description_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), union_links AS (

    SELECT
      issue_id                                   AS dim_issue_id,
      link_type,
      dim_crm_opportunity_id,
      dim_crm_account_id,
      NULL                                       AS dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER        AS request_priority,
      note_updated_at                            AS link_last_updated_at
    FROM gitlab_issue_notes_sfdc_links_with_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY issue_id, sfdc_id_18char ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      issue_id,
      link_type,
      NULL dim_crm_opportunity_id,
      dim_crm_account_id,
      dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE)  AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER         AS request_priority,
      note_updated_at
    FROM gitlab_issue_notes_zendesk_with_sfdc_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY issue_id, dim_ticket_id ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      gitlab_issue_description_sfdc_links_with_account.issue_id,
      gitlab_issue_description_sfdc_links_with_account.link_type,
      gitlab_issue_description_sfdc_links_with_account.dim_crm_opportunity_id,
      gitlab_issue_description_sfdc_links_with_account.dim_crm_account_id,
      NULL AS dim_ticket_id,
      IFF(gitlab_issue_description_sfdc_links_with_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_issue_description_sfdc_links_with_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_issue_description_sfdc_links_with_account.issue_last_edited_at
    FROM gitlab_issue_description_sfdc_links_with_account
    LEFT JOIN gitlab_issue_notes_sfdc_links
      ON gitlab_issue_description_sfdc_links_with_account.issue_id = gitlab_issue_notes_sfdc_links.issue_id
      AND gitlab_issue_description_sfdc_links_with_account.sfdc_id_18char = gitlab_issue_notes_sfdc_links.sfdc_id_18char
    WHERE gitlab_issue_notes_sfdc_links.issue_id IS NULL

    UNION

    SELECT
      gitlab_issue_description_zendesk_with_sfdc_account.issue_id,
      gitlab_issue_description_zendesk_with_sfdc_account.link_type,
      NULL dim_crm_opportunity_id,
      gitlab_issue_description_zendesk_with_sfdc_account.dim_crm_account_id,
      gitlab_issue_description_zendesk_with_sfdc_account.dim_ticket_id,
      IFF(gitlab_issue_description_zendesk_with_sfdc_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_issue_description_zendesk_with_sfdc_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_issue_description_zendesk_with_sfdc_account.issue_last_edited_at
    FROM gitlab_issue_description_zendesk_with_sfdc_account
    LEFT JOIN gitlab_issue_notes_zendesk_link
      ON gitlab_issue_description_zendesk_with_sfdc_account.issue_id = gitlab_issue_notes_zendesk_link.issue_id
      AND gitlab_issue_description_zendesk_with_sfdc_account.dim_ticket_id = gitlab_issue_notes_zendesk_link.dim_ticket_id
    WHERE gitlab_issue_notes_zendesk_link.issue_id IS NULL

), union_links_mapped_issues AS (

    SELECT
      map_moved_duplicated_issue.dim_issue_id,
      union_links.link_type,
      {{ get_keyed_nulls('union_links.dim_crm_opportunity_id')  }}     AS dim_crm_opportunity_id,
      union_links.dim_crm_account_id,
      IFNULL(union_links.dim_ticket_id, -1)::NUMBER                    AS dim_ticket_id,
      union_links.request_priority,
      union_links.is_request_priority_empty,
      union_links.link_last_updated_at
    FROM union_links
    INNER JOIN map_moved_duplicated_issue
      ON map_moved_duplicated_issue.issue_id = union_links.dim_issue_id

), final AS (

    -- Take the latest update of the issue||SFDC/Zendesk link combination.
    -- This could happen if a issue link combination appears in an issue that was moved/duplicated
    -- to other and in that other issue the same link is also posted.
    -- And those links could have different priorities 

    SELECT
      dim_issue_id,
      link_type,
      dim_crm_opportunity_id,
      dim_crm_account_id,
      dim_ticket_id,
      request_priority,
      is_request_priority_empty,
      link_last_updated_at
    FROM union_links_mapped_issues
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id, dim_crm_opportunity_id, dim_crm_account_id, dim_ticket_id ORDER BY link_last_updated_at DESC) = 1

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@jpeguero",
    updated_by="@jpeguero",
    created_date="2021-10-12",
    updated_date="2023-03-14"
) }}25:T3536,



WITH issue AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_issues_source

), map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), project AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), zendesk_ticket AS (

    SELECT * 
    FROM "PREP".zendesk.zendesk_tickets_source

), zendesk_organization AS (

    SELECT * 
    FROM "PREP".zendesk.zendesk_organizations_source

), map_moved_duplicated_issue AS (

    SELECT * 
    FROM "PROD".common_mapping.map_moved_duplicated_issue

), sfdc_opportunity_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_opportunity_source

)

, issue_notes AS (

    SELECT
      noteable_id AS issue_id,
      *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_notes_source
    WHERE noteable_type = 'Issue'
      AND system = FALSE

), issue_extended AS (

    SELECT
      prep_namespace.ultimate_parent_namespace_id AS dim_namespace_ultimate_parent_id,
      issue.*
    FROM issue
    INNER JOIN project
      ON project.project_id = issue.project_id
    INNER JOIN prep_namespace
      ON project.namespace_id = prep_namespace.dim_namespace_id
    WHERE prep_namespace.ultimate_parent_namespace_id = 9970 -- Gitlab-org group namespace id

),  gitlab_issue_description_parsing AS (

    SELECT
      issue_id,
      "PROD".preparation.regexp_to_array(issue_description, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "PROD".preparation.regexp_to_array(issue_description, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(issue_description, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      IFNULL(issue_last_edited_at, created_at)                                                                                              AS issue_last_edited_at
    FROM issue_extended
    WHERE issue_description IS NOT NULL
      AND NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), issue_notes_extended AS (

    SELECT issue_notes.*
    FROM issue_notes
    INNER JOIN issue_extended
      ON issue_notes.issue_id = issue_extended.issue_id

), gitlab_issue_notes_parsing AS (

    SELECT
      note_id,
      issue_id,
      "PROD".preparation.regexp_to_array(note, '(?<=(gitlab.my.|na34.)salesforce.com\/)[0-9a-zA-Z]{15,18}') AS sfdc_link_array,
      "PROD".preparation.regexp_to_array(note, '(?<=gitlab.zendesk.com\/agent\/tickets\/)[0-9]{1,18}')      AS zendesk_link_array,
      SPLIT_PART(REGEXP_SUBSTR(note, '~"customer priority::[0-9]{1,2}'), '::', -1)::NUMBER                                     AS request_priority,
      created_at                                                                                                               AS note_created_at,
      updated_at                                                                                                               AS note_updated_at
    FROM issue_notes_extended
    WHERE NOT (ARRAY_SIZE(sfdc_link_array) = 0 AND ARRAY_SIZE(zendesk_link_array) = 0)

), gitlab_issue_notes_sfdc_links AS (

    SELECT
      note_id,
      issue_id,
      "PROD".preparation.id15to18(f.value::VARCHAR)    AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                        AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                                 AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                    AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)                AS dim_crm_opportunity_id,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_issue_notes_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_issue_notes_sfdc_links_with_account AS (

    SELECT
      gitlab_issue_notes_sfdc_links.issue_id,
      gitlab_issue_notes_sfdc_links.sfdc_id_18char,
      gitlab_issue_notes_sfdc_links.sfdc_id_prefix,
      gitlab_issue_notes_sfdc_links.link_type,
      IFNULL(gitlab_issue_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_issue_notes_sfdc_links.dim_crm_opportunity_id,
      gitlab_issue_notes_sfdc_links.request_priority,
      gitlab_issue_notes_sfdc_links.note_created_at,
      gitlab_issue_notes_sfdc_links.note_updated_at
    FROM gitlab_issue_notes_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_issue_notes_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_issue_notes_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_issue_description_sfdc_links AS (

    SELECT
      issue_id,
      "PROD".preparation.id15to18(f.value::VARCHAR) AS sfdc_id_18char,
      SUBSTR(sfdc_id_18char, 0, 3)                                     AS sfdc_id_prefix,
      CASE
        WHEN sfdc_id_prefix = '001' THEN 'Account'
        WHEN sfdc_id_prefix = '003' THEN 'Contact'
        WHEN sfdc_id_prefix = '00Q' THEN 'Lead'
        WHEN sfdc_id_prefix = '006' THEN 'Opportunity'
        ELSE NULL
      END                                                              AS link_type,
      IFF(link_type = 'Account', sfdc_id_18char, NULL)                 AS dim_crm_account_id,
      IFF(link_type = 'Opportunity', sfdc_id_18char, NULL)             AS dim_crm_opportunity_id,
      request_priority,
      issue_last_edited_at
    FROM gitlab_issue_description_parsing, 
      TABLE(FLATTEN(sfdc_link_array)) f
    WHERE link_type IN ('Account', 'Opportunity')

), gitlab_issue_description_sfdc_links_with_account AS (

    SELECT
      gitlab_issue_description_sfdc_links.issue_id,
      gitlab_issue_description_sfdc_links.sfdc_id_18char,
      gitlab_issue_description_sfdc_links.sfdc_id_prefix,
      gitlab_issue_description_sfdc_links.link_type,
      IFNULL(gitlab_issue_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) AS dim_crm_account_id,
      gitlab_issue_description_sfdc_links.dim_crm_opportunity_id,
      gitlab_issue_description_sfdc_links.request_priority,
      gitlab_issue_description_sfdc_links.issue_last_edited_at
    FROM gitlab_issue_description_sfdc_links
    LEFT JOIN sfdc_opportunity_source
      ON sfdc_opportunity_source.opportunity_id = gitlab_issue_description_sfdc_links.dim_crm_opportunity_id
    WHERE IFNULL(gitlab_issue_description_sfdc_links.dim_crm_account_id, sfdc_opportunity_source.account_id) IS NOT NULL

), gitlab_issue_notes_zendesk_link AS (

    SELECT
      note_id,
      issue_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      note_created_at,
      note_updated_at
    FROM gitlab_issue_notes_parsing, 
      TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_issue_notes_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_issue_notes_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_issue_notes_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_issue_notes_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), gitlab_issue_description_zendesk_link AS (

    SELECT
      issue_id,
      REPLACE(f.value, '"', '')                      AS dim_ticket_id,
      'Zendesk Ticket'                               AS link_type,
      request_priority,
      issue_last_edited_at
    FROM gitlab_issue_description_parsing, 
      TABLE(FLATTEN(zendesk_link_array)) f

), gitlab_issue_description_zendesk_with_sfdc_account AS (

    SELECT
      gitlab_issue_description_zendesk_link.*,
      zendesk_organization.sfdc_account_id AS dim_crm_account_id
    FROM gitlab_issue_description_zendesk_link
    LEFT JOIN zendesk_ticket
      ON zendesk_ticket.ticket_id = gitlab_issue_description_zendesk_link.dim_ticket_id
    LEFT JOIN zendesk_organization
      ON zendesk_organization.organization_id = zendesk_ticket.organization_id
    WHERE zendesk_organization.sfdc_account_id IS NOT NULL

), union_links AS (

    SELECT
      issue_id                                   AS dim_issue_id,
      link_type,
      dim_crm_opportunity_id,
      dim_crm_account_id,
      NULL                                       AS dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER        AS request_priority,
      note_updated_at                            AS link_last_updated_at
    FROM gitlab_issue_notes_sfdc_links_with_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY issue_id, sfdc_id_18char ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      issue_id,
      link_type,
      NULL dim_crm_opportunity_id,
      dim_crm_account_id,
      dim_ticket_id,
      IFF(request_priority IS NULL, TRUE, FALSE)  AS is_request_priority_empty,
      IFNULL(request_priority, 1)::NUMBER         AS request_priority,
      note_updated_at
    FROM gitlab_issue_notes_zendesk_with_sfdc_account
    QUALIFY ROW_NUMBER() OVER(PARTITION BY issue_id, dim_ticket_id ORDER BY note_updated_at DESC) = 1

    UNION

    SELECT
      gitlab_issue_description_sfdc_links_with_account.issue_id,
      gitlab_issue_description_sfdc_links_with_account.link_type,
      gitlab_issue_description_sfdc_links_with_account.dim_crm_opportunity_id,
      gitlab_issue_description_sfdc_links_with_account.dim_crm_account_id,
      NULL AS dim_ticket_id,
      IFF(gitlab_issue_description_sfdc_links_with_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_issue_description_sfdc_links_with_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_issue_description_sfdc_links_with_account.issue_last_edited_at
    FROM gitlab_issue_description_sfdc_links_with_account
    LEFT JOIN gitlab_issue_notes_sfdc_links
      ON gitlab_issue_description_sfdc_links_with_account.issue_id = gitlab_issue_notes_sfdc_links.issue_id
      AND gitlab_issue_description_sfdc_links_with_account.sfdc_id_18char = gitlab_issue_notes_sfdc_links.sfdc_id_18char
    WHERE gitlab_issue_notes_sfdc_links.issue_id IS NULL

    UNION

    SELECT
      gitlab_issue_description_zendesk_with_sfdc_account.issue_id,
      gitlab_issue_description_zendesk_with_sfdc_account.link_type,
      NULL dim_crm_opportunity_id,
      gitlab_issue_description_zendesk_with_sfdc_account.dim_crm_account_id,
      gitlab_issue_description_zendesk_with_sfdc_account.dim_ticket_id,
      IFF(gitlab_issue_description_zendesk_with_sfdc_account.request_priority IS NULL, TRUE, FALSE) AS is_request_priority_empty,
      IFNULL(gitlab_issue_description_zendesk_with_sfdc_account.request_priority, 1)::NUMBER        AS request_priority,
      gitlab_issue_description_zendesk_with_sfdc_account.issue_last_edited_at
    FROM gitlab_issue_description_zendesk_with_sfdc_account
    LEFT JOIN gitlab_issue_notes_zendesk_link
      ON gitlab_issue_description_zendesk_with_sfdc_account.issue_id = gitlab_issue_notes_zendesk_link.issue_id
      AND gitlab_issue_description_zendesk_with_sfdc_account.dim_ticket_id = gitlab_issue_notes_zendesk_link.dim_ticket_id
    WHERE gitlab_issue_notes_zendesk_link.issue_id IS NULL

), union_links_mapped_issues AS (

    SELECT
      map_moved_duplicated_issue.dim_issue_id,
      union_links.link_type,
      

  COALESCE(union_links.dim_crm_opportunity_id, MD5(-1)) 

     AS dim_crm_opportunity_id,
      union_links.dim_crm_account_id,
      IFNULL(union_links.dim_ticket_id, -1)::NUMBER                    AS dim_ticket_id,
      union_links.request_priority,
      union_links.is_request_priority_empty,
      union_links.link_last_updated_at
    FROM union_links
    INNER JOIN map_moved_duplicated_issue
      ON map_moved_duplicated_issue.issue_id = union_links.dim_issue_id

), final AS (

    -- Take the latest update of the issue||SFDC/Zendesk link combination.
    -- This could happen if a issue link combination appears in an issue that was moved/duplicated
    -- to other and in that other issue the same link is also posted.
    -- And those links could have different priorities 

    SELECT
      dim_issue_id,
      link_type,
      dim_crm_opportunity_id,
      dim_crm_account_id,
      dim_ticket_id,
      request_priority,
      is_request_priority_empty,
      link_last_updated_at
    FROM union_links_mapped_issues
    QUALIFY ROW_NUMBER() OVER(PARTITION BY dim_issue_id, dim_crm_opportunity_id, dim_crm_account_id, dim_ticket_id ORDER BY link_last_updated_at DESC) = 1

)

SELECT
      *,
      '@jpeguero'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-10-12'::DATE        AS model_created_date,
      '2023-03-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final26:T988,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_release_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('prep_namespace_plan_hist', 'prep_namespace_plan_hist'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('prep_namespace', 'prep_namespace'),
    ('prep_project', 'prep_project'),
]) }}

, gitlab_dotcom_releases_dedupe_source AS (
    
    SELECT *
    FROM {{ ref('gitlab_dotcom_releases_dedupe_source') }} 
    {% if is_incremental() %}

    WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), joined AS (

    SELECT 
      gitlab_dotcom_releases_dedupe_source.id::NUMBER                                      AS dim_release_id,
      gitlab_dotcom_releases_dedupe_source.project_id::NUMBER                              AS dim_project_id,
      prep_project.ultimate_parent_namespace_id::NUMBER                                    AS ultimate_parent_namespace_id,
      dim_date.date_id::NUMBER                                                             AS created_date_id,
      IFNULL(prep_namespace_plan_hist.dim_plan_id, 34)::NUMBER                             AS dim_plan_id,
      gitlab_dotcom_releases_dedupe_source.author_id::NUMBER                               AS author_id,
      gitlab_dotcom_releases_dedupe_source.created_at::TIMESTAMP                           AS created_at,
      gitlab_dotcom_releases_dedupe_source.updated_at::TIMESTAMP                           AS updated_at
    FROM gitlab_dotcom_releases_dedupe_source
    LEFT JOIN prep_project ON gitlab_dotcom_releases_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN prep_namespace ON prep_project.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
        AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_namespace_plan_hist ON prep_project.ultimate_parent_namespace_id = prep_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_releases_dedupe_source.created_at >= prep_namespace_plan_hist.valid_from
        AND gitlab_dotcom_releases_dedupe_source.created_at < COALESCE(prep_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(gitlab_dotcom_releases_dedupe_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@mpeychet_",
    updated_by="@chrissharp",
    created_date="2021-08-10",
    updated_date="2022-05-30"
) }}27:Tabc,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), prep_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_plan_hist

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), prep_project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

)

, gitlab_dotcom_releases_dedupe_source AS (
    
    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_releases_dedupe_source 
    

    WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_release)

    

), joined AS (

    SELECT 
      gitlab_dotcom_releases_dedupe_source.id::NUMBER                                      AS dim_release_id,
      gitlab_dotcom_releases_dedupe_source.project_id::NUMBER                              AS dim_project_id,
      prep_project.ultimate_parent_namespace_id::NUMBER                                    AS ultimate_parent_namespace_id,
      dim_date.date_id::NUMBER                                                             AS created_date_id,
      IFNULL(prep_namespace_plan_hist.dim_plan_id, 34)::NUMBER                             AS dim_plan_id,
      gitlab_dotcom_releases_dedupe_source.author_id::NUMBER                               AS author_id,
      gitlab_dotcom_releases_dedupe_source.created_at::TIMESTAMP                           AS created_at,
      gitlab_dotcom_releases_dedupe_source.updated_at::TIMESTAMP                           AS updated_at
    FROM gitlab_dotcom_releases_dedupe_source
    LEFT JOIN prep_project ON gitlab_dotcom_releases_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN prep_namespace ON prep_project.ultimate_parent_namespace_id = prep_namespace.dim_namespace_id
        AND prep_namespace.is_currently_valid = TRUE
    LEFT JOIN prep_namespace_plan_hist ON prep_project.ultimate_parent_namespace_id = prep_namespace_plan_hist.dim_namespace_id
        AND gitlab_dotcom_releases_dedupe_source.created_at >= prep_namespace_plan_hist.valid_from
        AND gitlab_dotcom_releases_dedupe_source.created_at < COALESCE(prep_namespace_plan_hist.valid_to, '2099-01-01')
    INNER JOIN dim_date ON TO_DATE(gitlab_dotcom_releases_dedupe_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-08-10'::DATE        AS model_created_date,
      '2022-05-30'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM joined28:T3408,{% set bytes_to_gib_conversion = 1073741824 %} -- To convert storage (usage) sizes from bytes in source to GiB for reporting (1 GiB = 2^30 bytes = 1,073,741,824 bytes)
{% set bytes_to_mib_conversion = 1048576 %} -- To convert storage (usage) sizes from bytes in source to MiB for reporting (1 MiB = 2^20 bytes = 1,048,576 bytes)
{% set mib_to_gib_conversion = 1024 %} -- To convert storage limit sizes from GiB in "source" to MiB for reporting (1 GiB = 1024 MiB)

WITH namespace_current AS (

    SELECT dim_namespace_id
    FROM {{ ref('prep_namespace') }}
    WHERE is_currently_valid = TRUE
  
), project_statistics_snapshot_monthly_all AS (

    --project_statistics_snapshot_monthly 
    SELECT
      snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / {{bytes_to_gib_conversion}}        AS project_storage_size
    FROM {{ ref('gitlab_dotcom_project_statistic_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
      
    --project_statistics_current
    SELECT 
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / {{bytes_to_gib_conversion}}        AS project_storage_size
    FROM {{ ref('gitlab_dotcom_project_statistics_source') }}

), namespace_lineage_monthly_all AS (

    --namespace_lineage_monthly
    SELECT
      snapshot_month,
      namespace_id,
      ultimate_parent_id
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_lineage_current
    SELECT
      DATE_TRUNC('month', namespace_lineage.snapshot_day)                         AS snapshot_month,
      namespace_lineage.namespace_id                                              AS namespace_id,
      namespace_lineage.ultimate_parent_id                                        AS ultimate_parent_id
    FROM {{ ref('gitlab_dotcom_namespace_lineage_historical_daily') }} AS namespace_lineage
    INNER JOIN namespace_current -- To filter for non deleted namespaces
      ON namespace_lineage.namespace_id = namespace_current.dim_namespace_id
    WHERE namespace_lineage.snapshot_day = DATEADD('DAY', -1, CURRENT_DATE)
      AND IFF(DAY(CURRENT_DATE) = 1, FALSE, TRUE) -- If it is the first day of the month, do not return lineage as it will conflict with the statement above

), namespace_storage_statistic_monthly_all AS (

    --namespace_storage_statistic_monthly
    SELECT 
      snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM {{ ref('gitlab_dotcom_namespace_storage_statistics_historical_monthly') }}
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)
    
    UNION ALL

    --namespace_storage_statistic_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM {{ ref('gitlab_dotcom_namespace_root_storage_statistics_source') }}

), month_spine AS (

    SELECT *
    FROM {{ ref('dim_date') }}
    WHERE date_actual = first_day_of_month

), purchased_storage AS (

    SELECT
      gitlab_namespace_id::INT                                                  AS namespace_id,
      month_spine.first_day_of_month                                            AS snapshot_month,
      SUM(order_quantity * 10)                                                  AS purchased_storage_gib
    FROM {{ ref('customers_db_orders_source') }}
    INNER JOIN month_spine
      ON month_spine.first_day_of_month BETWEEN DATE_TRUNC('month', order_start_date)
                                          AND DATEADD(MONTH, -1, DATE_TRUNC('month', order_end_date))
    WHERE product_rate_plan_id = '2c92a00f7279a6f5017279d299d01cf9' --only storage rate plan, 10GiB of storage
    GROUP BY 1, 2

), top_level_namespace_storage_summary AS (

    SELECT
      namespace_lineage_monthly_all.ultimate_parent_id,                         -- Only top level namespaces
      namespace_lineage_monthly_all.snapshot_month,
      SUM(COALESCE(purchased_storage.purchased_storage_gib, 0))                 AS purchased_storage_limit,
      SUM(namespace_storage_statistic_monthly_all.billable_storage_size)        AS billable_storage_size,
      SUM(namespace_storage_statistic_monthly_all.repository_size)              AS repository_size,
      SUM(namespace_storage_statistic_monthly_all.container_registry_size)      AS container_registry_size,
      SUM(namespace_storage_statistic_monthly_all.lfs_objects_size)             AS lfs_objects_size,
      SUM(namespace_storage_statistic_monthly_all.build_artifacts_size)         AS build_artifacts_size,
      SUM(namespace_storage_statistic_monthly_all.packages_size)                AS packages_size,
      SUM(namespace_storage_statistic_monthly_all.wiki_size)                    AS wiki_size,
      SUM(namespace_storage_statistic_monthly_all.storage_size)                 AS storage_size
    FROM namespace_lineage_monthly_all
    LEFT JOIN namespace_storage_statistic_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = namespace_storage_statistic_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = namespace_storage_statistic_monthly_all.snapshot_month
    LEFT JOIN purchased_storage
      ON namespace_lineage_monthly_all.namespace_id = purchased_storage.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = purchased_storage.snapshot_month
    GROUP BY 1, 2

), repository_level_statistics AS (

    SELECT DISTINCT
      namespace_lineage_monthly_all.snapshot_month,
      namespace_lineage_monthly_all.ultimate_parent_id,
      project_statistics_snapshot_monthly_all.project_id,
      COALESCE(project_statistics_snapshot_monthly_all.project_storage_size, 0) AS repository_storage_size,
      IFF(namespace_lineage_monthly_all.ultimate_parent_id = 6543, 0, 10)       AS repository_size_limit,
      top_level_namespace_storage_summary.purchased_storage_limit,
      IFF(repository_storage_size < repository_size_limit
            OR repository_size_limit = 0,
          FALSE, TRUE)                                                          AS is_free_storage_used_up,
      IFF(NOT is_free_storage_used_up
            OR purchased_storage_limit = 0,
          repository_storage_size, repository_size_limit)                       AS free_storage_size,
      repository_storage_size - free_storage_size                               AS purchased_storage_size,
      SUM(purchased_storage_size)
        OVER(
             PARTITION BY
               namespace_lineage_monthly_all.ultimate_parent_id,
               namespace_lineage_monthly_all.snapshot_month
            )                                                                   AS total_purchased_storage_size,
      IFF(is_free_storage_used_up
            AND (purchased_storage_limit = 0
                  OR total_purchased_storage_size >= purchased_storage_limit),
          TRUE, FALSE)                                                          AS is_repository_capped
    FROM namespace_lineage_monthly_all
    LEFT JOIN top_level_namespace_storage_summary
      ON namespace_lineage_monthly_all.ultimate_parent_id = top_level_namespace_storage_summary.ultimate_parent_id
      AND namespace_lineage_monthly_all.snapshot_month = top_level_namespace_storage_summary.snapshot_month
    LEFT JOIN project_statistics_snapshot_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = project_statistics_snapshot_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = project_statistics_snapshot_monthly_all.snapshot_month

), namespace_repository_storage_usage_summary AS (

    SELECT
      ultimate_parent_id,                           -- Only top level namespaces
      snapshot_month,
      MAX(repository_storage_size)                  AS largest_repository_size,
      SUM(purchased_storage_size)                   AS purchased_storage,
      SUM(repository_size_limit)                    AS free_limit,
      SUM(free_storage_size)                        AS free_storage,
      SUM(IFF(is_free_storage_used_up, 1, 0))       AS repositories_above_free_limit_count,
      SUM(IFF(is_repository_capped, 1, 0))          AS capped_repositories_count
    FROM repository_level_statistics
    GROUP BY 1, 2
    
), joined AS (
    
    SELECT
      repository.snapshot_month,
      repository.ultimate_parent_id                                             AS dim_namespace_id,
      repository.ultimate_parent_id                                             AS ultimate_parent_namespace_id,
      repository.largest_repository_size                                        AS largest_repository_size_gib,
      repository.free_limit                                                     AS total_free_storage_limit_gib,
      namespace.purchased_storage_limit                                         AS total_purchased_storage_limit_gib,
      IFF(repository.repositories_above_free_limit_count = 0, FALSE, TRUE)      AS has_repositories_above_free_limit,
      repository.repositories_above_free_limit_count,
      IFF(repository.capped_repositories_count = 0, FALSE, TRUE)                AS has_capped_repositories,
      repository.capped_repositories_count,
      repository.free_storage * {{bytes_to_gib_conversion}}                     AS total_free_storage_bytes,
      repository.purchased_storage * {{bytes_to_gib_conversion}}                AS total_purchased_storage_bytes,
      namespace.billable_storage_size                                           AS billable_storage_bytes,
      namespace.repository_size                                                 AS repository_bytes,
      namespace.container_registry_size                                         AS container_registry_bytes,
      namespace.lfs_objects_size                                                AS lfs_objects_bytes,
      namespace.build_artifacts_size                                            AS build_artifacts_bytes,
      namespace.packages_size                                                   AS packages_bytes,
      namespace.wiki_size                                                       AS wiki_bytes,
      namespace.storage_size                                                    AS storage_bytes,
      repository.free_storage * {{mib_to_gib_conversion}}                       AS total_free_storage_mib,
      repository.purchased_storage * {{mib_to_gib_conversion}}                  AS total_purchased_storage_mib,
      namespace.billable_storage_size / {{bytes_to_mib_conversion}}             AS billable_storage_mib,
      namespace.repository_size / {{bytes_to_mib_conversion}}                   AS repository_mib,
      namespace.lfs_objects_size / {{bytes_to_mib_conversion}}                  AS lfs_objects_mib,
      namespace.build_artifacts_size / {{bytes_to_mib_conversion}}              AS build_artifacts_mib,
      namespace.packages_size / {{bytes_to_mib_conversion}}                     AS packages_mib,
      namespace.wiki_size / {{bytes_to_mib_conversion}}                         AS wiki_mib,
      namespace.storage_size / {{bytes_to_mib_conversion}}                      AS storage_mib,
      repository.free_storage                                                   AS total_free_storage_gib,
      repository.purchased_storage                                              AS total_purchased_storage_gib,
      namespace.billable_storage_size / {{bytes_to_gib_conversion}}             AS billable_storage_gib,
      namespace.repository_size / {{bytes_to_gib_conversion}}                   AS repository_gib,
      namespace.lfs_objects_size / {{bytes_to_gib_conversion}}                  AS lfs_objects_gib,
      namespace.build_artifacts_size / {{bytes_to_gib_conversion}}              AS build_artifacts_gib,
      namespace.packages_size / {{bytes_to_gib_conversion}}                     AS packages_gib,
      namespace.wiki_size / {{bytes_to_gib_conversion}}                         AS wiki_gib,
      namespace.storage_size / {{bytes_to_gib_conversion}}                      AS storage_gib
    FROM namespace_repository_storage_usage_summary repository
    LEFT JOIN top_level_namespace_storage_summary namespace
      ON repository.ultimate_parent_id = namespace.ultimate_parent_id
      AND repository.snapshot_month = namespace.snapshot_month

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@ischweickartDD",
    created_date="2021-01-29",
    updated_date="2021-06-17"
) }}29:T676,This table replicates the Gitlab UI logic that generates the Storage Usage Quotas for top level group namespaces. The logic used to build this model is explained in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/4237). The specific front end logic is described [here](https://gitlab.com/groups/gitlab-org/-/epics/4237#note_400257377).

Storage usage is reported in bytes in source and this is reflected in the `_size` columns. These sizes are then converted into GiB (1 GiB = 2^30 bytes = 1,073,741,824 bytes), and MiB (1 MiB = 2^20 bytes = 1,048,576 bytes), which is most often displayed in the UI. Since storage limits are allocated in GiB, they were left as such in the `_limit` columns.

Since this table reports at the top level namespace grain, aggregation of the individual underlying repositories is required. To increase visibility of the underlying repositories, two count columns (and their associated flags) are added that aren't calculated in the UI: which are `repositories_above_free_limit_count` and `capped_repositories_count`. These columns can serve as helpful indicators for when a customer will likely need to purchase extra storage.

For the purpose of this table, all child namespaces under a top level namespace with unlimited storage are also assumed to have unlimited storage. Also, storage sizes are converted to MiB and GiB in this table because these are the values being reported under the hood, even though on a project page storage is reported as "MB" or "GB".

Information on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)2a:T333e, -- To convert storage (usage) sizes from bytes in source to GiB for reporting (1 GiB = 2^30 bytes = 1,073,741,824 bytes)
 -- To convert storage (usage) sizes from bytes in source to MiB for reporting (1 MiB = 2^20 bytes = 1,048,576 bytes)
 -- To convert storage limit sizes from GiB in "source" to MiB for reporting (1 GiB = 1024 MiB)

WITH namespace_current AS (

    SELECT dim_namespace_id
    FROM "PROD".common_prep.prep_namespace
    WHERE is_currently_valid = TRUE
  
), project_statistics_snapshot_monthly_all AS (

    --project_statistics_snapshot_monthly 
    SELECT
      snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / 1073741824        AS project_storage_size
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_project_statistic_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
      
    --project_statistics_current
    SELECT 
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      project_id,
      namespace_id,
      (repository_size + lfs_objects_size) / 1073741824        AS project_storage_size
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_project_statistics_source

), namespace_lineage_monthly_all AS (

    --namespace_lineage_monthly
    SELECT
      snapshot_month,
      namespace_id,
      ultimate_parent_id
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)

    UNION ALL
    
    --namespace_lineage_current
    SELECT
      DATE_TRUNC('month', namespace_lineage.snapshot_day)                         AS snapshot_month,
      namespace_lineage.namespace_id                                              AS namespace_id,
      namespace_lineage.ultimate_parent_id                                        AS ultimate_parent_id
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily AS namespace_lineage
    INNER JOIN namespace_current -- To filter for non deleted namespaces
      ON namespace_lineage.namespace_id = namespace_current.dim_namespace_id
    WHERE namespace_lineage.snapshot_day = DATEADD('DAY', -1, CURRENT_DATE)
      AND IFF(DAY(CURRENT_DATE) = 1, FALSE, TRUE) -- If it is the first day of the month, do not return lineage as it will conflict with the statement above

), namespace_storage_statistic_monthly_all AS (

    --namespace_storage_statistic_monthly
    SELECT 
      snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM "PREP".preparation.gitlab_dotcom_namespace_storage_statistics_historical_monthly
    WHERE snapshot_month >= '2020-07-01'
      AND snapshot_month < DATE_TRUNC('month', CURRENT_DATE)
    
    UNION ALL

    --namespace_storage_statistic_current
    SELECT
      DATE_TRUNC('month', CURRENT_DATE)                                         AS snapshot_month,
      namespace_id,
      storage_size,
      repository_size,
      container_registry_size,
      lfs_objects_size,
      build_artifacts_size,
      packages_size,
      wiki_size,
      repository_size + lfs_objects_size                                        AS billable_storage_size
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_root_storage_statistics_source

), month_spine AS (

    SELECT *
    FROM "PROD".common.dim_date
    WHERE date_actual = first_day_of_month

), purchased_storage AS (

    SELECT
      gitlab_namespace_id::INT                                                  AS namespace_id,
      month_spine.first_day_of_month                                            AS snapshot_month,
      SUM(order_quantity * 10)                                                  AS purchased_storage_gib
    FROM "PREP".customers.customers_db_orders_source
    INNER JOIN month_spine
      ON month_spine.first_day_of_month BETWEEN DATE_TRUNC('month', order_start_date)
                                          AND DATEADD(MONTH, -1, DATE_TRUNC('month', order_end_date))
    WHERE product_rate_plan_id = '2c92a00f7279a6f5017279d299d01cf9' --only storage rate plan, 10GiB of storage
    GROUP BY 1, 2

), top_level_namespace_storage_summary AS (

    SELECT
      namespace_lineage_monthly_all.ultimate_parent_id,                         -- Only top level namespaces
      namespace_lineage_monthly_all.snapshot_month,
      SUM(COALESCE(purchased_storage.purchased_storage_gib, 0))                 AS purchased_storage_limit,
      SUM(namespace_storage_statistic_monthly_all.billable_storage_size)        AS billable_storage_size,
      SUM(namespace_storage_statistic_monthly_all.repository_size)              AS repository_size,
      SUM(namespace_storage_statistic_monthly_all.container_registry_size)      AS container_registry_size,
      SUM(namespace_storage_statistic_monthly_all.lfs_objects_size)             AS lfs_objects_size,
      SUM(namespace_storage_statistic_monthly_all.build_artifacts_size)         AS build_artifacts_size,
      SUM(namespace_storage_statistic_monthly_all.packages_size)                AS packages_size,
      SUM(namespace_storage_statistic_monthly_all.wiki_size)                    AS wiki_size,
      SUM(namespace_storage_statistic_monthly_all.storage_size)                 AS storage_size
    FROM namespace_lineage_monthly_all
    LEFT JOIN namespace_storage_statistic_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = namespace_storage_statistic_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = namespace_storage_statistic_monthly_all.snapshot_month
    LEFT JOIN purchased_storage
      ON namespace_lineage_monthly_all.namespace_id = purchased_storage.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = purchased_storage.snapshot_month
    GROUP BY 1, 2

), repository_level_statistics AS (

    SELECT DISTINCT
      namespace_lineage_monthly_all.snapshot_month,
      namespace_lineage_monthly_all.ultimate_parent_id,
      project_statistics_snapshot_monthly_all.project_id,
      COALESCE(project_statistics_snapshot_monthly_all.project_storage_size, 0) AS repository_storage_size,
      IFF(namespace_lineage_monthly_all.ultimate_parent_id = 6543, 0, 10)       AS repository_size_limit,
      top_level_namespace_storage_summary.purchased_storage_limit,
      IFF(repository_storage_size < repository_size_limit
            OR repository_size_limit = 0,
          FALSE, TRUE)                                                          AS is_free_storage_used_up,
      IFF(NOT is_free_storage_used_up
            OR purchased_storage_limit = 0,
          repository_storage_size, repository_size_limit)                       AS free_storage_size,
      repository_storage_size - free_storage_size                               AS purchased_storage_size,
      SUM(purchased_storage_size)
        OVER(
             PARTITION BY
               namespace_lineage_monthly_all.ultimate_parent_id,
               namespace_lineage_monthly_all.snapshot_month
            )                                                                   AS total_purchased_storage_size,
      IFF(is_free_storage_used_up
            AND (purchased_storage_limit = 0
                  OR total_purchased_storage_size >= purchased_storage_limit),
          TRUE, FALSE)                                                          AS is_repository_capped
    FROM namespace_lineage_monthly_all
    LEFT JOIN top_level_namespace_storage_summary
      ON namespace_lineage_monthly_all.ultimate_parent_id = top_level_namespace_storage_summary.ultimate_parent_id
      AND namespace_lineage_monthly_all.snapshot_month = top_level_namespace_storage_summary.snapshot_month
    LEFT JOIN project_statistics_snapshot_monthly_all
      ON namespace_lineage_monthly_all.namespace_id = project_statistics_snapshot_monthly_all.namespace_id
      AND namespace_lineage_monthly_all.snapshot_month = project_statistics_snapshot_monthly_all.snapshot_month

), namespace_repository_storage_usage_summary AS (

    SELECT
      ultimate_parent_id,                           -- Only top level namespaces
      snapshot_month,
      MAX(repository_storage_size)                  AS largest_repository_size,
      SUM(purchased_storage_size)                   AS purchased_storage,
      SUM(repository_size_limit)                    AS free_limit,
      SUM(free_storage_size)                        AS free_storage,
      SUM(IFF(is_free_storage_used_up, 1, 0))       AS repositories_above_free_limit_count,
      SUM(IFF(is_repository_capped, 1, 0))          AS capped_repositories_count
    FROM repository_level_statistics
    GROUP BY 1, 2
    
), joined AS (
    
    SELECT
      repository.snapshot_month,
      repository.ultimate_parent_id                                             AS dim_namespace_id,
      repository.ultimate_parent_id                                             AS ultimate_parent_namespace_id,
      repository.largest_repository_size                                        AS largest_repository_size_gib,
      repository.free_limit                                                     AS total_free_storage_limit_gib,
      namespace.purchased_storage_limit                                         AS total_purchased_storage_limit_gib,
      IFF(repository.repositories_above_free_limit_count = 0, FALSE, TRUE)      AS has_repositories_above_free_limit,
      repository.repositories_above_free_limit_count,
      IFF(repository.capped_repositories_count = 0, FALSE, TRUE)                AS has_capped_repositories,
      repository.capped_repositories_count,
      repository.free_storage * 1073741824                     AS total_free_storage_bytes,
      repository.purchased_storage * 1073741824                AS total_purchased_storage_bytes,
      namespace.billable_storage_size                                           AS billable_storage_bytes,
      namespace.repository_size                                                 AS repository_bytes,
      namespace.container_registry_size                                         AS container_registry_bytes,
      namespace.lfs_objects_size                                                AS lfs_objects_bytes,
      namespace.build_artifacts_size                                            AS build_artifacts_bytes,
      namespace.packages_size                                                   AS packages_bytes,
      namespace.wiki_size                                                       AS wiki_bytes,
      namespace.storage_size                                                    AS storage_bytes,
      repository.free_storage * 1024                       AS total_free_storage_mib,
      repository.purchased_storage * 1024                  AS total_purchased_storage_mib,
      namespace.billable_storage_size / 1048576             AS billable_storage_mib,
      namespace.repository_size / 1048576                   AS repository_mib,
      namespace.lfs_objects_size / 1048576                  AS lfs_objects_mib,
      namespace.build_artifacts_size / 1048576              AS build_artifacts_mib,
      namespace.packages_size / 1048576                     AS packages_mib,
      namespace.wiki_size / 1048576                         AS wiki_mib,
      namespace.storage_size / 1048576                      AS storage_mib,
      repository.free_storage                                                   AS total_free_storage_gib,
      repository.purchased_storage                                              AS total_purchased_storage_gib,
      namespace.billable_storage_size / 1073741824             AS billable_storage_gib,
      namespace.repository_size / 1073741824                   AS repository_gib,
      namespace.lfs_objects_size / 1073741824                  AS lfs_objects_gib,
      namespace.build_artifacts_size / 1073741824              AS build_artifacts_gib,
      namespace.packages_size / 1073741824                     AS packages_gib,
      namespace.wiki_size / 1073741824                         AS wiki_gib,
      namespace.storage_size / 1073741824                      AS storage_gib
    FROM namespace_repository_storage_usage_summary repository
    LEFT JOIN top_level_namespace_storage_summary namespace
      ON repository.ultimate_parent_id = namespace.ultimate_parent_id
      AND repository.snapshot_month = namespace.snapshot_month

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@ischweickartDD'::VARCHAR       AS updated_by,
      '2021-01-29'::DATE        AS model_created_date,
      '2021-06-17'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined2b:T28ce,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('namespaces', 'prep_namespace'),
    ('subscriptions', 'prep_subscription'),
    ('orders', 'customers_db_orders_source'),
    ('product_tiers', 'prep_product_tier'),
    ('product_details', 'dim_product_detail'),
    ('fct_mrr_with_zero_dollar_charges', 'fct_mrr_with_zero_dollar_charges'),
    ('trial_histories', 'customers_db_trial_histories_source'),
    ('subscription_delivery_types', 'bdg_subscription_product_rate_plan')
]) }}

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id,
      product_details.product_rate_plan_id,
      product_details.dim_product_tier_id
    FROM fct_mrr_with_zero_dollar_charges 
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
      AND product_details.product_deployment_type = 'GitLab.com'
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = {{ get_date_id("DATE_TRUNC('month', CURRENT_DATE)") }}
      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      product_tiers.dim_product_tier_id                                 AS dim_product_tier_id_namespace,
      product_tiers.product_tier_name                                   AS product_tier_name_namespace,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND product_tier_name_namespace = 'SaaS - Trial: Ultimate'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    LEFT JOIN product_tiers
      ON namespaces.dim_product_tier_id = product_tiers.dim_product_tier_id
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      COUNT(*) OVER(PARTITION BY subscriptions.dim_subscription_id)     AS count_of_tiers_per_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON saas_subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), order_list AS (

    SELECT
      orders.order_id,
      orders.customer_id,
      COALESCE(trial_tiers.dim_product_tier_id,
               product_rate_plans.dim_product_tier_id)                  AS dim_product_tier_id_with_trial,
      COALESCE(trial_tiers.product_tier_name,
               product_rate_plans.product_tier_name)                    AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders.subscription_id                                            AS subscription_id_order,
      orders.subscription_name                                          AS subscription_name_order,
      orders.subscription_name_slugify                                  AS subscription_name_slugify_order,
      orders.order_start_date,
      orders.order_end_date,
      orders.gitlab_namespace_id                                        AS namespace_id_order,
      orders.order_is_trial,
      IFF(IFNULL(orders.order_end_date, CURRENT_DATE) >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders
    LEFT JOIN product_rate_plans
      ON orders.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders.order_is_trial = TRUE
    WHERE orders.order_start_date IS NOT NULL
      AND (product_rate_plans.product_rate_plan_id IS NOT NULL
          OR orders.product_rate_plan_id IN ('premium-saas-trial-plan-id', 'ultimate-saas-trial-plan-id', 'free-plan-id')
          )

), final AS (

    SELECT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.order_id,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.dim_product_tier_id_namespace,
      namespace_list.product_tier_name_namespace,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.count_of_tiers_per_subscription,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription 
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-01-14",
    updated_date="2023-06-22"
) }}2c:T580,The purpose of this table is two-fold:
1. Connect **Ultimate Parent** Namespace ID to Subscription (and hence Zuora billing account and CRM Account)
2. Connect Customer DB Customer ID to Subscription for self managed purchases. This helps with marketing efforts.

This table expands the functionality of the orders by improving the join to ultimate parent namespaces and subscriptions. Namespaces are listed in this table with prior trials and currently paid plans. Subscriptions listed in this table are all SaaS (determined by the `product_rate_plan_id` from `zuora_rate_plan_source`) and the `is_active_subscription` column can be used to filter to subscription that are currently active (status is Active or Cancelled with a recurring charge in the current month). Orders in this table are all SaaS (determined by the `product_rate_plan_id` from `customers_db_orders_source`) and the `is_active_order` column can be used to filter to orders that are currently active (`order_end_date` is NULL or greater than the date that this table was refreshed).

The tier(s) connected to the subscription are determined using the underlying Zuora recurring charges. This view uses a `FULL OUTER JOIN` to show all three sides of the Venn diagram. (namespace, orders, subscriptions)
In doing so exceptions are noted within `namespace_order_subscription_match_status` to identify rows that do not match between systems.2d:T2ac3,



WITH namespaces AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), subscriptions AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), orders AS (

    SELECT * 
    FROM "PREP".customers.customers_db_orders_source

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), product_details AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), fct_mrr_with_zero_dollar_charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr_all

), trial_histories AS (

    SELECT * 
    FROM "PREP".customers.customers_db_trial_histories_source

), subscription_delivery_types AS (

    SELECT * 
    FROM "PROD".common.bdg_subscription_product_rate_plan

)

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id,
      product_details.product_rate_plan_id,
      product_details.dim_product_tier_id
    FROM fct_mrr_with_zero_dollar_charges 
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
      AND product_details.product_deployment_type = 'GitLab.com'
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = 

  TO_NUMBER(TO_CHAR(DATE_TRUNC('month', CURRENT_DATE)::DATE,'YYYYMMDD'),'99999999')


      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      product_tiers.dim_product_tier_id                                 AS dim_product_tier_id_namespace,
      product_tiers.product_tier_name                                   AS product_tier_name_namespace,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND product_tier_name_namespace = 'SaaS - Trial: Ultimate'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    LEFT JOIN product_tiers
      ON namespaces.dim_product_tier_id = product_tiers.dim_product_tier_id
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      COUNT(*) OVER(PARTITION BY subscriptions.dim_subscription_id)     AS count_of_tiers_per_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON saas_subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), order_list AS (

    SELECT
      orders.order_id,
      orders.customer_id,
      COALESCE(trial_tiers.dim_product_tier_id,
               product_rate_plans.dim_product_tier_id)                  AS dim_product_tier_id_with_trial,
      COALESCE(trial_tiers.product_tier_name,
               product_rate_plans.product_tier_name)                    AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders.subscription_id                                            AS subscription_id_order,
      orders.subscription_name                                          AS subscription_name_order,
      orders.subscription_name_slugify                                  AS subscription_name_slugify_order,
      orders.order_start_date,
      orders.order_end_date,
      orders.gitlab_namespace_id                                        AS namespace_id_order,
      orders.order_is_trial,
      IFF(IFNULL(orders.order_end_date, CURRENT_DATE) >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders
    LEFT JOIN product_rate_plans
      ON orders.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders.order_is_trial = TRUE
    WHERE orders.order_start_date IS NOT NULL
      AND (product_rate_plans.product_rate_plan_id IS NOT NULL
          OR orders.product_rate_plan_id IN ('premium-saas-trial-plan-id', 'ultimate-saas-trial-plan-id', 'free-plan-id')
          )

), final AS (

    SELECT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.order_id,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.dim_product_tier_id_namespace,
      namespace_list.product_tier_name_namespace,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.count_of_tiers_per_subscription,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription 
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-14'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final2e:Tbb6,{{ simple_cte([
    ('prep_namespace', 'prep_namespace'),
    ('gitlab_dotcom_users_source', 'gitlab_dotcom_users_source')
    ])
}}

, ptpf_scores AS (

    SELECT
      namespace_id,
      score_date,
      score,
      decile,
      score_group,
      insights,
      days_since_trial_start
    FROM {{ ref('ptpf_scores_source') }}

), score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpf_scores_last AS (

    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpf_scores_last_2 AS (
  
    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpf_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last.namespace_id,
      ptpf_scores_last.score,
      ptpf_scores_last.insights,
      ptpf_scores_last.days_since_trial_start,
      ptpf_scores_last.score_group,
      ptpf_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last
      ON prep_namespace.dim_namespace_id = ptpf_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpf_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last_2.insights,
      ptpf_scores_last_2.score_group,
      ptpf_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpf_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  {{ dbt_utils.surrogate_key(['namespace_creator_ptpf_score.email_address']) }} AS dim_marketing_contact_id,
  namespace_creator_ptpf_score.namespace_id,
  namespace_creator_ptpf_score.score,
  namespace_creator_ptpf_score.insights,
  namespace_creator_ptpf_score.score_group,
  namespace_creator_ptpf_score.score_date,
  namespace_creator_ptpf_score.days_since_trial_start,
  namespace_creator_ptpf_score_last_2.insights          AS past_insights,
  namespace_creator_ptpf_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpf_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpf_score
LEFT JOIN namespace_creator_ptpf_score_last_2
  ON namespace_creator_ptpf_score.email_address = namespace_creator_ptpf_score_last_2.email_address
WHERE namespace_creator_ptpf_score.score_group >= 42f:Tc1a,

WITH prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), gitlab_dotcom_users_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

)

, ptpf_scores AS (

    SELECT
      namespace_id,
      score_date,
      score,
      decile,
      score_group,
      insights,
      days_since_trial_start
    FROM "PREP".data_science.ptpf_scores_source

), score_dates AS (
    
    SELECT DISTINCT score_date
    FROM ptpf_scores
  
), last_dates AS (
  
    SELECT
      FIRST_VALUE(score_date) OVER(ORDER BY score_date DESC)  AS last_score_date,
      NTH_VALUE(score_date, 2) OVER(ORDER BY score_date DESC) AS after_last_score_date
    FROM score_dates
    LIMIT 1

), ptpf_scores_last AS (

    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT last_score_date FROM last_dates)
  
), ptpf_scores_last_2 AS (
  
    SELECT *
    FROM ptpf_scores
    WHERE score_date IN (SELECT after_last_score_date FROM last_dates)

), namespace_creator_ptpf_score AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last.namespace_id,
      ptpf_scores_last.score,
      ptpf_scores_last.insights,
      ptpf_scores_last.days_since_trial_start,
      ptpf_scores_last.score_group,
      ptpf_scores_last.score_date::DATE                    AS score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last
      ON prep_namespace.dim_namespace_id = ptpf_scores_last.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

), namespace_creator_ptpf_score_last_2 AS (

    SELECT
      COALESCE(users.notification_email, users.email) AS email_address,
      ptpf_scores_last_2.insights,
      ptpf_scores_last_2.score_group,
      ptpf_scores_last_2.score_date
    FROM prep_namespace
    INNER JOIN gitlab_dotcom_users_source users
      ON prep_namespace.creator_id = users.user_id
    INNER JOIN ptpf_scores_last_2
      ON prep_namespace.dim_namespace_id = ptpf_scores_last_2.namespace_id
    QUALIFY ROW_NUMBER() OVER(PARTITION BY email_address ORDER BY score DESC) = 1

)

SELECT
  md5(cast(coalesce(cast(namespace_creator_ptpf_score.email_address as 
    varchar
), '') as 
    varchar
)) AS dim_marketing_contact_id,
  namespace_creator_ptpf_score.namespace_id,
  namespace_creator_ptpf_score.score,
  namespace_creator_ptpf_score.insights,
  namespace_creator_ptpf_score.score_group,
  namespace_creator_ptpf_score.score_date,
  namespace_creator_ptpf_score.days_since_trial_start,
  namespace_creator_ptpf_score_last_2.insights          AS past_insights,
  namespace_creator_ptpf_score_last_2.score_group       AS past_score_group,
  namespace_creator_ptpf_score_last_2.score_date::DATE  AS past_score_date
FROM namespace_creator_ptpf_score
LEFT JOIN namespace_creator_ptpf_score_last_2
  ON namespace_creator_ptpf_score.email_address = namespace_creator_ptpf_score_last_2.email_address
WHERE namespace_creator_ptpf_score.score_group >= 430:T58e,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('prep_namespace', 'prep_namespace')
]) }},

final AS (

  SELECT
    dim_namespace_id,
    namespace_is_internal,
    namespace_is_ultimate_parent,
    namespace_name,
    namespace_path,
    owner_id,
    namespace_type,
    has_avatar,
    created_at,
    updated_at,
    is_membership_locked,
    has_request_access_enabled,
    has_share_with_group_locked,
    is_setup_for_company,
    visibility_level,
    ldap_sync_status,
    ldap_sync_error,
    ldap_sync_last_update_at,
    ldap_sync_last_successful_update_at,
    ldap_sync_last_sync_at,
    lfs_enabled,
    parent_id,
    shared_runners_enabled,
    shared_runners_minutes_limit,
    extra_shared_runners_minutes_limit,
    repository_size_limit,
    does_require_two_factor_authentication,
    two_factor_grace_period,
    project_creation_level,
    push_rule_id,
    creator_id,
    namespace_creator_is_blocked,
    ultimate_parent_namespace_id,
    gitlab_plan_id,
    gitlab_plan_title,
    gitlab_plan_is_paid,
    dim_product_tier_id,
    namespace_member_count  AS current_member_count,
    namespace_project_count AS current_project_count,
    has_code_suggestions_enabled
  FROM prep_namespace
  WHERE is_currently_valid = TRUE

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@cbraza",
    created_date="2020-12-29",
    updated_date="2023-05-18"
) }}31:T674,



WITH prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

),

final AS (

  SELECT
    dim_namespace_id,
    namespace_is_internal,
    namespace_is_ultimate_parent,
    namespace_name,
    namespace_path,
    owner_id,
    namespace_type,
    has_avatar,
    created_at,
    updated_at,
    is_membership_locked,
    has_request_access_enabled,
    has_share_with_group_locked,
    is_setup_for_company,
    visibility_level,
    ldap_sync_status,
    ldap_sync_error,
    ldap_sync_last_update_at,
    ldap_sync_last_successful_update_at,
    ldap_sync_last_sync_at,
    lfs_enabled,
    parent_id,
    shared_runners_enabled,
    shared_runners_minutes_limit,
    extra_shared_runners_minutes_limit,
    repository_size_limit,
    does_require_two_factor_authentication,
    two_factor_grace_period,
    project_creation_level,
    push_rule_id,
    creator_id,
    namespace_creator_is_blocked,
    ultimate_parent_namespace_id,
    gitlab_plan_id,
    gitlab_plan_title,
    gitlab_plan_is_paid,
    dim_product_tier_id,
    namespace_member_count  AS current_member_count,
    namespace_project_count AS current_project_count,
    has_code_suggestions_enabled
  FROM prep_namespace
  WHERE is_currently_valid = TRUE

)

SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@cbraza'::VARCHAR       AS updated_by,
      '2020-12-29'::DATE        AS model_created_date,
      '2023-05-18'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final32:T1b0f,{% set sensitive_fields = ['project_description', 'project_import_source', 'project_issues_template', 'project_build_coverage_regex',
                           'project_name', 'project_path', 'project_import_url', 'project_merge_requests_template'] %}

{{ simple_cte([

    ('dim_date', 'dim_date'),
    ('gitlab_subscriptions', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('members_source', 'gitlab_dotcom_members_source'),
    ('namespace_lineage_historical', 'gitlab_dotcom_namespace_lineage_historical_daily'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('prep_namespace', 'prep_namespace'),
    ('projects_source', 'gitlab_dotcom_projects_source'),
    ('prep_product_tier', 'prep_product_tier'),

]) }}

, active_services AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_integrations_source')}}
    WHERE is_active = True

), namespace_lineage AS (

    SELECT
      namespace_lineage_historical.*,
      IFF(ROW_NUMBER() OVER (
        PARTITION BY namespace_lineage_historical.namespace_id
        ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1, TRUE, FALSE)    AS is_current,
      namespace_lineage_historical.snapshot_day = CURRENT_DATE                        AS ultimate_parent_is_current,
      plans.plan_title                                                                AS ultimate_parent_plan_title,
      plans.plan_is_paid                                                              AS ultimate_parent_plan_is_paid,
      plans.plan_name                                                                 AS ultimate_parent_plan_name
    FROM namespace_lineage_historical
    INNER JOIN plans
      ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

), joined AS (

    SELECT
      projects_source.project_id                                     AS dim_project_id,
      projects_source.namespace_id                                   AS dim_namespace_id,
      namespace_lineage.ultimate_parent_id                           AS ultimate_parent_namespace_id,
      projects_source.creator_id                                     AS dim_user_id_creator,
      dim_date.date_id                                               AS dim_date_id,

      -- plan/product tier metadata at creation
      prep_namespace.dim_product_tier_id                             AS dim_product_tier_id_at_creation,
      prep_namespace.gitlab_plan_id                                  AS dim_plan_id,
      -- projects metadata
      projects_source.created_at                                     AS created_at,
      projects_source.updated_at                                     AS updated_at,
      projects_source.last_activity_at,
      projects_source.visibility_level,
      projects_source.archived                                       AS is_archived,
      projects_source.has_avatar,
      projects_source.project_star_count,
      projects_source.merge_requests_rebase_enabled,
      projects_source.import_type,
      IFF(projects_source.import_type IS NOT NULL, TRUE, FALSE)      AS is_imported,
      projects_source.approvals_before_merge,
      projects_source.reset_approvals_on_push,
      projects_source.merge_requests_ff_only_enabled,
      projects_source.mirror,
      projects_source.mirror_user_id,
      projects_source.shared_runners_enabled,
      projects_source.build_allow_git_fetch,
      projects_source.build_timeout,
      projects_source.mirror_trigger_builds,
      projects_source.pending_delete,
      projects_source.public_builds,
      projects_source.last_repository_check_failed,
      projects_source.last_repository_check_at,
      projects_source.container_registry_enabled,
      projects_source.only_allow_merge_if_pipeline_succeeds,
      projects_source.has_external_issue_tracker,
      projects_source.repository_storage,
      projects_source.repository_read_only,
      projects_source.request_access_enabled,
      projects_source.has_external_wiki,
      projects_source.ci_config_path,
      projects_source.lfs_enabled,
      projects_source.only_allow_merge_if_all_discussions_are_resolved,
      projects_source.repository_size_limit,
      projects_source.printing_merge_request_link_enabled,
      projects_source.has_auto_canceling_pending_pipelines,
      projects_source.service_desk_enabled,
      projects_source.delete_error,
      projects_source.last_repository_updated_at,
      projects_source.storage_version,
      projects_source.resolve_outdated_diff_discussions,
      projects_source.disable_overriding_approvers_per_merge_request,
      projects_source.remote_mirror_available_overridden,
      projects_source.only_mirror_protected_branches,
      projects_source.pull_mirror_available_overridden,
      projects_source.mirror_overwrites_diverged_branches,
      -- namespace metadata

      IFNULL(prep_namespace.namespace_is_internal, FALSE)            AS namespace_is_internal,

      {% for field in sensitive_fields %}
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE {{field}}
      END                                                            AS {{field}},
      {% endfor %}
      IFF(projects_source.import_type='gitlab_project' AND projects_source.project_path='learn-gitlab',  
        TRUE, 
        FALSE)                                                       AS is_learn_gitlab,
      ARRAYAGG(active_services.service_type)                         AS active_service_types_array,

      IFNULL(COUNT(DISTINCT members_source.member_id), 0)            AS member_count
    FROM projects_source
    INNER JOIN dim_date
      ON TO_DATE(projects_source.created_at) = dim_date.date_day
    LEFT JOIN prep_namespace
      ON projects_source.namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid
    LEFT JOIN members_source
      ON projects_source.project_id = members_source.source_id
      AND members_source.member_source_type = 'Project'
    LEFT JOIN namespace_lineage
      ON prep_namespace.dim_namespace_id = namespace_lineage.namespace_id
      AND namespace_lineage.is_current = TRUE
    LEFT JOIN gitlab_subscriptions
      ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects_source.created_at >= gitlab_subscriptions.valid_from AND projects_source.created_at < {{ coalesce_to_infinity("gitlab_subscriptions.valid_to") }}
    LEFT JOIN active_services
      ON projects_source.project_id = active_services.project_id
    {{ dbt_utils.group_by(n=63) }}

)

SELECT *
FROM joined33:T23f4,



WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), gitlab_subscriptions AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), namespace_lineage_historical AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), projects_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), prep_product_tier AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

)

, active_services AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_integrations_source
    WHERE is_active = True

), namespace_lineage AS (

    SELECT
      namespace_lineage_historical.*,
      IFF(ROW_NUMBER() OVER (
        PARTITION BY namespace_lineage_historical.namespace_id
        ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1, TRUE, FALSE)    AS is_current,
      namespace_lineage_historical.snapshot_day = CURRENT_DATE                        AS ultimate_parent_is_current,
      plans.plan_title                                                                AS ultimate_parent_plan_title,
      plans.plan_is_paid                                                              AS ultimate_parent_plan_is_paid,
      plans.plan_name                                                                 AS ultimate_parent_plan_name
    FROM namespace_lineage_historical
    INNER JOIN plans
      ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

), joined AS (

    SELECT
      projects_source.project_id                                     AS dim_project_id,
      projects_source.namespace_id                                   AS dim_namespace_id,
      namespace_lineage.ultimate_parent_id                           AS ultimate_parent_namespace_id,
      projects_source.creator_id                                     AS dim_user_id_creator,
      dim_date.date_id                                               AS dim_date_id,

      -- plan/product tier metadata at creation
      prep_namespace.dim_product_tier_id                             AS dim_product_tier_id_at_creation,
      prep_namespace.gitlab_plan_id                                  AS dim_plan_id,
      -- projects metadata
      projects_source.created_at                                     AS created_at,
      projects_source.updated_at                                     AS updated_at,
      projects_source.last_activity_at,
      projects_source.visibility_level,
      projects_source.archived                                       AS is_archived,
      projects_source.has_avatar,
      projects_source.project_star_count,
      projects_source.merge_requests_rebase_enabled,
      projects_source.import_type,
      IFF(projects_source.import_type IS NOT NULL, TRUE, FALSE)      AS is_imported,
      projects_source.approvals_before_merge,
      projects_source.reset_approvals_on_push,
      projects_source.merge_requests_ff_only_enabled,
      projects_source.mirror,
      projects_source.mirror_user_id,
      projects_source.shared_runners_enabled,
      projects_source.build_allow_git_fetch,
      projects_source.build_timeout,
      projects_source.mirror_trigger_builds,
      projects_source.pending_delete,
      projects_source.public_builds,
      projects_source.last_repository_check_failed,
      projects_source.last_repository_check_at,
      projects_source.container_registry_enabled,
      projects_source.only_allow_merge_if_pipeline_succeeds,
      projects_source.has_external_issue_tracker,
      projects_source.repository_storage,
      projects_source.repository_read_only,
      projects_source.request_access_enabled,
      projects_source.has_external_wiki,
      projects_source.ci_config_path,
      projects_source.lfs_enabled,
      projects_source.only_allow_merge_if_all_discussions_are_resolved,
      projects_source.repository_size_limit,
      projects_source.printing_merge_request_link_enabled,
      projects_source.has_auto_canceling_pending_pipelines,
      projects_source.service_desk_enabled,
      projects_source.delete_error,
      projects_source.last_repository_updated_at,
      projects_source.storage_version,
      projects_source.resolve_outdated_diff_discussions,
      projects_source.disable_overriding_approvers_per_merge_request,
      projects_source.remote_mirror_available_overridden,
      projects_source.only_mirror_protected_branches,
      projects_source.pull_mirror_available_overridden,
      projects_source.mirror_overwrites_diverged_branches,
      -- namespace metadata

      IFNULL(prep_namespace.namespace_is_internal, FALSE)            AS namespace_is_internal,

      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_description
      END                                                            AS project_description,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_source
      END                                                            AS project_import_source,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_issues_template
      END                                                            AS project_issues_template,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_build_coverage_regex
      END                                                            AS project_build_coverage_regex,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_name
      END                                                            AS project_name,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_path
      END                                                            AS project_path,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_import_url
      END                                                            AS project_import_url,
      
      CASE
        WHEN projects_source.visibility_level != 'public' AND NOT namespace_lineage.namespace_is_internal
          THEN 'project is private/internal'
        ELSE project_merge_requests_template
      END                                                            AS project_merge_requests_template,
      
      IFF(projects_source.import_type='gitlab_project' AND projects_source.project_path='learn-gitlab',  
        TRUE, 
        FALSE)                                                       AS is_learn_gitlab,
      ARRAYAGG(active_services.service_type)                         AS active_service_types_array,

      IFNULL(COUNT(DISTINCT members_source.member_id), 0)            AS member_count
    FROM projects_source
    INNER JOIN dim_date
      ON TO_DATE(projects_source.created_at) = dim_date.date_day
    LEFT JOIN prep_namespace
      ON projects_source.namespace_id = prep_namespace.dim_namespace_id
      AND prep_namespace.is_currently_valid
    LEFT JOIN members_source
      ON projects_source.project_id = members_source.source_id
      AND members_source.member_source_type = 'Project'
    LEFT JOIN namespace_lineage
      ON prep_namespace.dim_namespace_id = namespace_lineage.namespace_id
      AND namespace_lineage.is_current = TRUE
    LEFT JOIN gitlab_subscriptions
      ON namespace_lineage.ultimate_parent_id  = gitlab_subscriptions.namespace_id
        AND projects_source.created_at >= gitlab_subscriptions.valid_from AND projects_source.created_at < COALESCE( gitlab_subscriptions.valid_to, '9999-12-31'::TIMESTAMP)
    LEFT JOIN active_services
      ON projects_source.project_id = active_services.project_id
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63

)

SELECT *
FROM joined34:T330b,{{ config(
    tags=["product", "mnpi_exception"]
) }}

{{ simple_cte([
    ('namespaces', 'prep_namespace'),
    ('subscriptions', 'prep_subscription'),
    ('orders_historical', 'dim_order_hist'),
    ('dates', 'dim_date'),
    ('product_tiers', 'prep_product_tier'),
    ('product_details', 'dim_product_detail'),
    ('fct_mrr_with_zero_dollar_charges', 'fct_mrr_with_zero_dollar_charges'),
    ('trial_histories', 'customers_db_trial_histories_source'),
    ('subscription_delivery_types', 'bdg_subscription_product_rate_plan')
]) }}

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id
    FROM fct_mrr_with_zero_dollar_charges
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = {{ get_date_id("DATE_TRUNC('month', CURRENT_DATE)") }}
      AND product_details.product_deployment_type = 'GitLab.com'
      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      dates.first_day_of_month                                          AS namespace_snapshot_month,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND namespaces.gitlab_plan_title = 'Ultimate Trial'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    INNER JOIN dates
      ON dates.date_actual BETWEEN namespaces.created_at AND CURRENT_DATE
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      subscriptions.subscription_version,
      dates.first_day_of_month                                          AS subscription_snapshot_month,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN dates
      ON dates.date_actual BETWEEN subscriptions.subscription_start_date
                            AND IFNULL(subscriptions.subscription_end_date, CURRENT_DATE)
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), orders AS (
    /*
    This CTE transforms orders from the historical orders table in two significant ways:
      1. It corrects for erroneous order start/end dates by substituting in the valid_from/valid_to columns
          when changes are made to the order (generally remapping to renewed subscriptions, new namespaces)
        a. See term_start_date and term_end_date (identifiers borrowed from the Zuora subscription model)
      2. It smooths over same day updates to the namespace linked to a given order,
          which would otherwise result in multiple rows for an order in a given month
        a. See QUALIFY statement below. This gets the last update to an order on a given day
        b. NOTE: This does remove some order-namespace links that existed in the historical orders table
            at one point in time, but a judgement call was made to assume that if the namespace needed
            to be updated within 24 hours it is likely that the previous namespace was incorrect
    */
    SELECT
      orders_historical.dim_order_id,
      orders_historical.customer_id,
      IFNULL(trial_tiers.dim_product_tier_id,
              product_rate_plans.dim_product_tier_id)                   AS dim_product_tier_id_with_trial,
      IFNULL(trial_tiers.product_tier_name,
              product_rate_plans.product_tier_name)                     AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders_historical.dim_subscription_id                             AS subscription_id_order,
      orders_historical.dim_namespace_id                                AS namespace_id_order,
      MIN(orders_historical.order_start_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_start_date,
      MAX(orders_historical.order_end_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_end_date,
      MIN(orders_historical.valid_from) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_start_date,
      MAX(IFNULL(orders_historical.valid_to, CURRENT_DATE)) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_end_date,
      orders_historical.order_is_trial,
      IFF(order_end_date >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders_historical
    INNER JOIN product_rate_plans
      ON orders_historical.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders_historical.order_is_trial = TRUE
    WHERE order_start_date IS NOT NULL 
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        orders_historical.dim_order_id,
        orders_historical.valid_from::DATE
      ORDER BY orders_historical.valid_from DESC
    ) = 1

), order_list AS (
  
    SELECT
      orders.*,
      dates.first_day_of_month                                          AS order_snapshot_month
    FROM orders
    INNER JOIN dates
      ON dates.date_actual BETWEEN IFF(orders.term_start_date < orders.order_start_date,
                                       orders.order_start_date, orders.term_start_date)
                            AND IFF(orders.term_end_date > orders.order_end_date,
                                    orders.order_end_date, orders.term_end_date)
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY 
        orders.dim_order_id,
        dates.first_day_of_month
      ORDER BY orders.term_end_date DESC
    ) = 1

), final AS (

    SELECT DISTINCT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.dim_order_id,
      COALESCE(order_list.order_snapshot_month,
               subscription_list.subscription_snapshot_month,
               namespace_list.namespace_snapshot_month
              )                                                         AS snapshot_month,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.subscription_version,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.dim_order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription
      AND order_list.order_snapshot_month = subscription_list.subscription_snapshot_month
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id
      AND order_list.order_snapshot_month = namespace_list.namespace_snapshot_month

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-06-02",
    updated_date="2022-06-22"
) }}35:T5c1,The purpose of this table is three-fold:
1. Connect **Ultimate Parent** Namespace ID to Subscription (and hence Zuora billing account and CRM Account)
2. Connect Customer DB Customer ID to Subscription for self managed purchases. This helps with marketing efforts.
3. Provide a historical record the above connections by month.

This table expands the functionality of the orders by improving the join to ultimate parent namespaces and subscriptions. Namespaces are listed in this table with prior trials and currently paid plans. Subscriptions listed in this table are all SaaS (determined by the `product_rate_plan_id` from `zuora_rate_plan_source`) and the `is_active_subscription` column can be used to filter to subscription that are currently active (status is Active or Cancelled with a recurring charge in the current month). Orders in this table are all SaaS (determined by the `product_rate_plan_id` from `customers_db_orders_source`) and the `is_active_order` column can be used to filter to orders that are currently active (`order_end_date` is NULL or greater than the date that this table was refreshed).

The tier(s) connected to the subscription are determined using the underlying Zuora recurring charges. This view uses a `FULL OUTER JOIN` to show all three sides of the Venn diagram. (namespace, orders, subscriptions)
In doing so exceptions are noted within `namespace_order_subscription_match_status` to identify rows that do not match between systems.36:T3520,



WITH namespaces AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), subscriptions AS (

    SELECT * 
    FROM "PROD".common_prep.prep_subscription

), orders_historical AS (

    SELECT * 
    FROM "PROD".common.dim_order_hist

), dates AS (

    SELECT * 
    FROM "PROD".common.dim_date

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), product_details AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), fct_mrr_with_zero_dollar_charges AS (

    SELECT * 
    FROM "PROD".restricted_safe_common.fct_mrr_all

), trial_histories AS (

    SELECT * 
    FROM "PREP".customers.customers_db_trial_histories_source

), subscription_delivery_types AS (

    SELECT * 
    FROM "PROD".common.bdg_subscription_product_rate_plan

)

, product_rate_plans AS (

    SELECT DISTINCT
      product_rate_plan_id,
      dim_product_tier_id,
      product_tier_name
    FROM product_details
    WHERE product_deployment_type = 'GitLab.com'

), saas_subscriptions AS (

    SELECT DISTINCT
      dim_subscription_id,
      product_rate_plan_id,
      dim_product_tier_id
    FROM subscription_delivery_types
    WHERE product_deployment_type = 'GitLab.com'

), trial_tiers AS (

    SELECT
      dim_product_tier_id,
      product_tier_name
    FROM product_tiers
    WHERE product_tier_name = 'SaaS - Trial: Ultimate'

), current_recurring AS (

    SELECT DISTINCT
      fct_mrr_with_zero_dollar_charges.dim_subscription_id
    FROM fct_mrr_with_zero_dollar_charges
    INNER JOIN product_details
      ON fct_mrr_with_zero_dollar_charges.dim_product_detail_id = product_details.dim_product_detail_id
    WHERE fct_mrr_with_zero_dollar_charges.dim_date_id = 

  TO_NUMBER(TO_CHAR(DATE_TRUNC('month', CURRENT_DATE)::DATE,'YYYYMMDD'),'99999999')


      AND product_details.product_deployment_type = 'GitLab.com'
      AND subscription_status IN ('Active', 'Cancelled')

), namespace_list AS (

    SELECT DISTINCT
      namespaces.dim_namespace_id,
      namespaces.namespace_type,
      namespaces.ultimate_parent_namespace_id,
      namespaces.gitlab_plan_id,
      dates.first_day_of_month                                          AS namespace_snapshot_month,
      trial_histories.start_date                                        AS saas_trial_start_date,
      trial_histories.expired_on                                        AS saas_trial_expired_on,
      IFF(trial_histories.gl_namespace_id IS NOT NULL
            OR (namespaces.dim_namespace_id = ultimate_parent_namespace_id
                AND namespaces.gitlab_plan_title = 'Ultimate Trial'),
          TRUE, FALSE)                                                  AS namespace_was_trial,
      namespaces.is_currently_valid                                     AS is_namespace_active
    FROM namespaces
    INNER JOIN dates
      ON dates.date_actual BETWEEN namespaces.created_at AND CURRENT_DATE
    LEFT JOIN trial_histories
      ON namespaces.dim_namespace_id = trial_histories.gl_namespace_id

), subscription_list AS (
  
    SELECT DISTINCT
      subscriptions.dim_subscription_id,
      subscriptions.dim_subscription_id_original,
      subscriptions.dim_subscription_id_previous,
      subscriptions.subscription_name,
      subscriptions.subscription_name_slugify,
      subscriptions.dim_billing_account_id,
      subscriptions.dim_crm_account_id,
      subscriptions.subscription_start_date,
      subscriptions.subscription_end_date,
      subscriptions.subscription_version,
      dates.first_day_of_month                                          AS subscription_snapshot_month,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_subscription,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_subscription,
      product_rate_plans.product_tier_name                              AS product_tier_name_subscription,
      IFF(current_recurring.dim_subscription_id IS NOT NULL,
          TRUE, FALSE)                                                  AS is_subscription_active
    FROM subscriptions
    INNER JOIN dates
      ON dates.date_actual BETWEEN subscriptions.subscription_start_date
                            AND IFNULL(subscriptions.subscription_end_date, CURRENT_DATE)
    INNER JOIN saas_subscriptions
      ON subscriptions.dim_subscription_id = saas_subscriptions.dim_subscription_id
    INNER JOIN product_rate_plans
      ON saas_subscriptions.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN current_recurring
      ON subscriptions.dim_subscription_id = current_recurring.dim_subscription_id

), orders AS (
    /*
    This CTE transforms orders from the historical orders table in two significant ways:
      1. It corrects for erroneous order start/end dates by substituting in the valid_from/valid_to columns
          when changes are made to the order (generally remapping to renewed subscriptions, new namespaces)
        a. See term_start_date and term_end_date (identifiers borrowed from the Zuora subscription model)
      2. It smooths over same day updates to the namespace linked to a given order,
          which would otherwise result in multiple rows for an order in a given month
        a. See QUALIFY statement below. This gets the last update to an order on a given day
        b. NOTE: This does remove some order-namespace links that existed in the historical orders table
            at one point in time, but a judgement call was made to assume that if the namespace needed
            to be updated within 24 hours it is likely that the previous namespace was incorrect
    */
    SELECT
      orders_historical.dim_order_id,
      orders_historical.customer_id,
      IFNULL(trial_tiers.dim_product_tier_id,
              product_rate_plans.dim_product_tier_id)                   AS dim_product_tier_id_with_trial,
      IFNULL(trial_tiers.product_tier_name,
              product_rate_plans.product_tier_name)                     AS product_tier_name_with_trial,
      product_rate_plans.dim_product_tier_id                            AS dim_product_tier_id_order,
      product_rate_plans.product_rate_plan_id                           AS product_rate_plan_id_order,
      product_rate_plans.product_tier_name                              AS product_tier_name_order,
      orders_historical.dim_subscription_id                             AS subscription_id_order,
      orders_historical.dim_namespace_id                                AS namespace_id_order,
      MIN(orders_historical.order_start_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_start_date,
      MAX(orders_historical.order_end_date) OVER(
        PARTITION BY orders_historical.dim_order_id)                    AS order_end_date,
      MIN(orders_historical.valid_from) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_start_date,
      MAX(IFNULL(orders_historical.valid_to, CURRENT_DATE)) OVER (
        PARTITION BY
          orders_historical.dim_order_id,
          orders_historical.dim_subscription_id,
          orders_historical.dim_namespace_id)                           AS term_end_date,
      orders_historical.order_is_trial,
      IFF(order_end_date >= CURRENT_DATE,
          TRUE, FALSE)                                                  AS is_order_active
    FROM orders_historical
    INNER JOIN product_rate_plans
      ON orders_historical.product_rate_plan_id = product_rate_plans.product_rate_plan_id
    LEFT JOIN trial_tiers
      ON orders_historical.order_is_trial = TRUE
    WHERE order_start_date IS NOT NULL 
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        orders_historical.dim_order_id,
        orders_historical.valid_from::DATE
      ORDER BY orders_historical.valid_from DESC
    ) = 1

), order_list AS (
  
    SELECT
      orders.*,
      dates.first_day_of_month                                          AS order_snapshot_month
    FROM orders
    INNER JOIN dates
      ON dates.date_actual BETWEEN IFF(orders.term_start_date < orders.order_start_date,
                                       orders.order_start_date, orders.term_start_date)
                            AND IFF(orders.term_end_date > orders.order_end_date,
                                    orders.order_end_date, orders.term_end_date)
    QUALIFY ROW_NUMBER() OVER (
      PARTITION BY 
        orders.dim_order_id,
        dates.first_day_of_month
      ORDER BY orders.term_end_date DESC
    ) = 1

), final AS (

    SELECT DISTINCT
      namespace_list.dim_namespace_id,
      subscription_list.dim_subscription_id,
      order_list.dim_order_id,
      COALESCE(order_list.order_snapshot_month,
               subscription_list.subscription_snapshot_month,
               namespace_list.namespace_snapshot_month
              )                                                         AS snapshot_month,
      order_list.namespace_id_order,
      order_list.subscription_id_order,
      namespace_list.ultimate_parent_namespace_id,
      namespace_list.namespace_type,
      namespace_list.is_namespace_active,
      namespace_list.namespace_was_trial,
      namespace_list.saas_trial_start_date,
      namespace_list.saas_trial_expired_on,
      order_list.customer_id,
      order_list.product_rate_plan_id_order,
      order_list.dim_product_tier_id_order,
      order_list.product_tier_name_order,
      order_list.is_order_active,
      order_list.order_start_date,
      order_list.order_end_date,
      order_list.order_is_trial,
      order_list.dim_product_tier_id_with_trial,
      order_list.product_tier_name_with_trial,
      subscription_list.subscription_name,
      subscription_list.subscription_name_slugify,
      subscription_list.dim_subscription_id_original,
      subscription_list.dim_subscription_id_previous,
      subscription_list.dim_billing_account_id,
      subscription_list.dim_crm_account_id,
      subscription_list.is_subscription_active,
      subscription_list.subscription_start_date,
      subscription_list.subscription_end_date,
      subscription_list.product_rate_plan_id_subscription,
      subscription_list.dim_product_tier_id_subscription,
      subscription_list.product_tier_name_subscription,
      subscription_list.subscription_version,
      CASE
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Trial Namespace Missing Order' 
        WHEN order_list.namespace_id_order != namespace_list.ultimate_parent_namespace_id
          AND namespace_list.is_namespace_active = TRUE
          THEN 'Order Linked to Non-Ultimate Parent Namespace'
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Namespace Missing Order' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND order_list.subscription_id_order IS NULL
          THEN 'Paid Namespace Missing Order Subscription' 
        WHEN namespace_list.gitlab_plan_id NOT IN (102, 103)
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Namespace Missing Zuora Subscription' 
        WHEN order_list.subscription_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Paid Order Missing Namespace Assignment'
        WHEN order_list.subscription_id_order IS NOT NULL
          AND order_list.product_rate_plan_id_order IS NOT NULL
          AND subscription_list.dim_subscription_id IS NULL
          THEN 'Paid Order Product Rate Plan Misaligned with Zuora'
        WHEN order_list.dim_order_id IS NOT NULL
          AND order_list.namespace_id_order IS NULL
          THEN 'Free Order Missing Namespace Assignment' 
        WHEN order_list.namespace_id_order IS NOT NULL
          AND namespace_list.dim_namespace_id IS NULL
          THEN 'Order Namespace Not Found'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND order_list.dim_order_id IS NULL
          THEN 'Paid Subscription Missing Order'
        WHEN subscription_list.dim_subscription_id IS NOT NULL
          AND namespace_list.dim_namespace_id IS NOT NULL
          THEN 'Paid All Matching'
        WHEN namespace_list.gitlab_plan_id IN (102, 103)
          AND order_list.dim_order_id IS NOT NULL
          THEN 'Trial All Matching'
      END                                                               AS namespace_order_subscription_match_status
    FROM order_list
    FULL OUTER JOIN subscription_list
      ON order_list.subscription_id_order = subscription_list.dim_subscription_id
      AND order_list.product_rate_plan_id_order = subscription_list.product_rate_plan_id_subscription
      AND order_list.order_snapshot_month = subscription_list.subscription_snapshot_month
    FULL OUTER JOIN namespace_list
      ON order_list.namespace_id_order = namespace_list.dim_namespace_id
      AND order_list.order_snapshot_month = namespace_list.namespace_snapshot_month

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-06-02'::DATE        AS model_created_date,
      '2022-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final37:Ta21,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "incremental",
    "unique_key": "dim_package_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('dim_namespace_plan_hist', 'dim_namespace_plan_hist'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('prep_namespace', 'prep_namespace'),
    ('prep_project', 'prep_project')
]) }}

, gitlab_dotcom_packages_packages_dedupe_source AS (

    SELECT *
    FROM {{ ref('gitlab_dotcom_packages_packages_dedupe_source')}}
    {% if is_incremental() %}

      WHERE updated_at > (SELECT MAX(updated_at) FROM {{this}})

    {% endif %}

), renamed AS (
  
    SELECT
      id::NUMBER                                                          AS dim_package_id,
      
      -- FOREIGN KEYS
      prep_project.dim_project_id                                         AS dim_project_id,
      prep_namespace.dim_namespace_id,
      prep_namespace.ultimate_parent_namespace_id,
      dim_date.date_id                                                    AS created_date_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                     AS dim_plan_id,
      gitlab_dotcom_packages_packages_dedupe_source.creator_id            AS creator_id,
      prep_project.namespace_is_internal,
      version::VARCHAR                                                    AS package_version,
      package_type::VARCHAR                                               AS package_type,
      gitlab_dotcom_packages_packages_dedupe_source.created_at::TIMESTAMP AS created_at,
      gitlab_dotcom_packages_packages_dedupe_source.updated_at::TIMESTAMP AS updated_at

    FROM gitlab_dotcom_packages_packages_dedupe_source
    LEFT JOIN prep_project 
      ON gitlab_dotcom_packages_packages_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON prep_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND gitlab_dotcom_packages_packages_dedupe_source.created_at >= dim_namespace_plan_hist.valid_from
      AND gitlab_dotcom_packages_packages_dedupe_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    LEFT JOIN prep_namespace
      ON prep_project.dim_namespace_id = prep_namespace.dim_namespace_id
      AND is_currently_valid = TRUE
    INNER JOIN dim_date 
      ON TO_DATE(gitlab_dotcom_packages_packages_dedupe_source.created_at) = dim_date.date_day

)

{{ dbt_audit(
    cte_ref="renamed",
    created_by="@mpeychet_",
    updated_by="@mpeychet_",
    created_date="2021-08-05",
    updated_date="2022-06-01"
) }}38:Tb52,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), dim_namespace_plan_hist AS (

    SELECT * 
    FROM "PROD".common.dim_namespace_plan_hist

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

), prep_project AS (

    SELECT * 
    FROM "PROD".common_prep.prep_project

)

, gitlab_dotcom_packages_packages_dedupe_source AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_packages_packages_dedupe_source
    

      WHERE updated_at > (SELECT MAX(updated_at) FROM "PROD".common_prep.prep_package)

    

), renamed AS (
  
    SELECT
      id::NUMBER                                                          AS dim_package_id,
      
      -- FOREIGN KEYS
      prep_project.dim_project_id                                         AS dim_project_id,
      prep_namespace.dim_namespace_id,
      prep_namespace.ultimate_parent_namespace_id,
      dim_date.date_id                                                    AS created_date_id,
      IFNULL(dim_namespace_plan_hist.dim_plan_id, 34)                     AS dim_plan_id,
      gitlab_dotcom_packages_packages_dedupe_source.creator_id            AS creator_id,
      prep_project.namespace_is_internal,
      version::VARCHAR                                                    AS package_version,
      package_type::VARCHAR                                               AS package_type,
      gitlab_dotcom_packages_packages_dedupe_source.created_at::TIMESTAMP AS created_at,
      gitlab_dotcom_packages_packages_dedupe_source.updated_at::TIMESTAMP AS updated_at

    FROM gitlab_dotcom_packages_packages_dedupe_source
    LEFT JOIN prep_project 
      ON gitlab_dotcom_packages_packages_dedupe_source.project_id = prep_project.dim_project_id
    LEFT JOIN dim_namespace_plan_hist 
      ON prep_project.ultimate_parent_namespace_id = dim_namespace_plan_hist.dim_namespace_id
      AND gitlab_dotcom_packages_packages_dedupe_source.created_at >= dim_namespace_plan_hist.valid_from
      AND gitlab_dotcom_packages_packages_dedupe_source.created_at < COALESCE(dim_namespace_plan_hist.valid_to, '2099-01-01')
    LEFT JOIN prep_namespace
      ON prep_project.dim_namespace_id = prep_namespace.dim_namespace_id
      AND is_currently_valid = TRUE
    INNER JOIN dim_date 
      ON TO_DATE(gitlab_dotcom_packages_packages_dedupe_source.created_at) = dim_date.date_day

)

SELECT
      *,
      '@mpeychet_'::VARCHAR       AS created_by,
      '@mpeychet_'::VARCHAR       AS updated_by,
      '2021-08-05'::DATE        AS model_created_date,
      '2022-06-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

                CURRENT_TIMESTAMP()               AS dbt_created_at

            

        
    
    

    FROM renamed39:Tb31,{{ config({
    "materialized": "incremental",
    "unique_key": "snapshot_day_namespace_id"
    })
}}

{{ simple_cte([
    ('map_namespace_internal', 'map_namespace_internal'),
    ('namespace_subscription_snapshots', 'gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base'),
    ('namespace_lineage','gitlab_dotcom_namespace_lineage_scd'),
    ('prep_gitlab_dotcom_plan','prep_gitlab_dotcom_plan')
]) }}
,

dates AS (
  SELECT *
  FROM {{ ref('dim_date') }} --prod.common.dim_date
  WHERE date_actual <= CURRENT_DATE()
  {% if is_incremental() -%}
  AND date_actual >= (SELECT MAX(snapshot_day) FROM {{ this }})
  {%- endif %}
),
namespace_lineage_daily AS (
SELECT
  dates.date_actual AS snapshot_day,
  namespace_lineage.namespace_id,
  namespace_lineage.parent_id,
  namespace_lineage.upstream_lineage,
  namespace_lineage.ultimate_parent_id 
FROM namespace_lineage
INNER JOIN dates
  ON dates.date_actual BETWEEN date_trunc('day',namespace_lineage.lineage_valid_from) AND date_trunc('day',namespace_lineage.lineage_valid_to)
QUALIFY ROW_NUMBER() OVER (PARTITION BY dates.date_actual,namespace_id ORDER BY namespace_lineage.lineage_valid_to DESC) = 1
),

with_plans AS (

    SELECT
      namespace_lineage_daily.*,
      IFNULL(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL, FALSE)  AS namespace_is_internal,
      --Please see dbt docs for a description of this column transformation.
      CASE 
        WHEN namespace_subscription_snapshots.is_trial = TRUE AND LOWER(prep_gitlab_dotcom_plan.plan_name_modified) = 'ultimate' THEN 102
        WHEN namespace_subscription_snapshots.plan_id IS NULL THEN 34
        ELSE prep_gitlab_dotcom_plan.plan_id_modified
      END AS ultimate_parent_plan_id,
      namespace_subscription_snapshots.seats,
      namespace_subscription_snapshots.seats_in_use,
      namespace_subscription_snapshots.max_seats_used
    FROM namespace_lineage_daily
    LEFT JOIN map_namespace_internal
      ON namespace_lineage_daily.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
    LEFT JOIN namespace_subscription_snapshots
      ON namespace_lineage_daily.ultimate_parent_id = namespace_subscription_snapshots.namespace_id
      AND namespace_lineage_daily.snapshot_day BETWEEN namespace_subscription_snapshots.valid_from::DATE
                                               AND IFNULL(namespace_subscription_snapshots.valid_to::DATE, CURRENT_DATE)
    LEFT JOIN prep_gitlab_dotcom_plan
      ON namespace_subscription_snapshots.plan_id = prep_gitlab_dotcom_plan.dim_plan_id
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        namespace_lineage_daily.namespace_id,
        snapshot_day
      ORDER BY valid_from DESC
      ) = 1

)

SELECT
  {{ dbt_utils.surrogate_key(['snapshot_day', 'namespace_id'] ) }}                    AS snapshot_day_namespace_id,
  *
FROM with_plans3a:Tbae,



WITH map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), namespace_subscription_snapshots AS (

    SELECT * 
    FROM "PROD".legacy.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id

), namespace_lineage AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_scd

), prep_gitlab_dotcom_plan AS (

    SELECT * 
    FROM "PROD".common_prep.prep_gitlab_dotcom_plan

)
,

dates AS (
  SELECT *
  FROM "PROD".common.dim_date --prod.common.dim_date
  WHERE date_actual <= CURRENT_DATE()
  AND date_actual >= (SELECT MAX(snapshot_day) FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily)
),
namespace_lineage_daily AS (
SELECT
  dates.date_actual AS snapshot_day,
  namespace_lineage.namespace_id,
  namespace_lineage.parent_id,
  namespace_lineage.upstream_lineage,
  namespace_lineage.ultimate_parent_id 
FROM namespace_lineage
INNER JOIN dates
  ON dates.date_actual BETWEEN date_trunc('day',namespace_lineage.lineage_valid_from) AND date_trunc('day',namespace_lineage.lineage_valid_to)
QUALIFY ROW_NUMBER() OVER (PARTITION BY dates.date_actual,namespace_id ORDER BY namespace_lineage.lineage_valid_to DESC) = 1
),

with_plans AS (

    SELECT
      namespace_lineage_daily.*,
      IFNULL(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL, FALSE)  AS namespace_is_internal,
      --Please see dbt docs for a description of this column transformation.
      CASE 
        WHEN namespace_subscription_snapshots.is_trial = TRUE AND LOWER(prep_gitlab_dotcom_plan.plan_name_modified) = 'ultimate' THEN 102
        WHEN namespace_subscription_snapshots.plan_id IS NULL THEN 34
        ELSE prep_gitlab_dotcom_plan.plan_id_modified
      END AS ultimate_parent_plan_id,
      namespace_subscription_snapshots.seats,
      namespace_subscription_snapshots.seats_in_use,
      namespace_subscription_snapshots.max_seats_used
    FROM namespace_lineage_daily
    LEFT JOIN map_namespace_internal
      ON namespace_lineage_daily.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
    LEFT JOIN namespace_subscription_snapshots
      ON namespace_lineage_daily.ultimate_parent_id = namespace_subscription_snapshots.namespace_id
      AND namespace_lineage_daily.snapshot_day BETWEEN namespace_subscription_snapshots.valid_from::DATE
                                               AND IFNULL(namespace_subscription_snapshots.valid_to::DATE, CURRENT_DATE)
    LEFT JOIN prep_gitlab_dotcom_plan
      ON namespace_subscription_snapshots.plan_id = prep_gitlab_dotcom_plan.dim_plan_id
    QUALIFY ROW_NUMBER() OVER(
      PARTITION BY
        namespace_lineage_daily.namespace_id,
        snapshot_day
      ORDER BY valid_from DESC
      ) = 1

)

SELECT
  md5(cast(coalesce(cast(snapshot_day as 
    varchar
), '') || '-' || coalesce(cast(namespace_id as 
    varchar
), '') as 
    varchar
))                    AS snapshot_day_namespace_id,
  *
FROM with_plans3b:T5a7,{{ config({
        "materialized": "table"
        })
}}
    
WITH
{{ distinct_source(source=source('gitlab_dotcom', 'members'))}}

, renamed AS (

    SELECT

      id::NUMBER                                    AS member_id,
      access_level::NUMBER                          AS access_level,
      source_id::NUMBER                             AS source_id,
      source_type                                    AS member_source_type,
      user_id::NUMBER                               AS user_id,
      notification_level::NUMBER                    AS notification_level,
      type                                           AS member_type,
      created_at::TIMESTAMP                          AS invite_created_at,
      created_at::TIMESTAMP                          AS created_at,
      created_by_id::NUMBER                         AS created_by_id,
      invite_accepted_at::TIMESTAMP                  AS invite_accepted_at,
      requested_at::TIMESTAMP                        AS requested_at,
      expires_at::TIMESTAMP                          AS expires_at,
      ldap::BOOLEAN                                  AS has_ldap,
      override::BOOLEAN                              AS has_override,
      member_role_id,
      invite_token::VARCHAR AS invite_token,
      valid_from -- Column was added in distinct_source CTE

    FROM distinct_source

)

{{ scd_type_2(
    primary_key_renamed='member_id',
    primary_key_raw='id'
) }}3c:Tced,
    
WITH
distinct_source AS (

    SELECT
      "ID",
  "ACCESS_LEVEL",
  "SOURCE_ID",
  "SOURCE_TYPE",
  "USER_ID",
  "NOTIFICATION_LEVEL",
  "TYPE",
  "CREATED_AT",
  "CREATED_BY_ID",
  "INVITE_EMAIL",
  "INVITE_ACCEPTED_AT",
  "INVITE_TOKEN",
  "REQUESTED_AT",
  "EXPIRES_AT",
  "LDAP",
  "OVERRIDE",
  "MEMBER_ROLE_ID",
      MIN(DATEADD('sec', _uploaded_at, '1970-01-01'))::TIMESTAMP  AS valid_from,
      MAX(DATEADD('sec', _uploaded_at, '1970-01-01'))::TIMESTAMP  AS max_uploaded_at,
      MAX(TO_DATE(RIGHT(_task_instance,8), 'YYYYMMDD'))           AS max_task_instance
    FROM "RAW".tap_postgres.gitlab_db_members
    GROUP BY "ID",
  "ACCESS_LEVEL",
  "SOURCE_ID",
  "SOURCE_TYPE",
  "USER_ID",
  "NOTIFICATION_LEVEL",
  "TYPE",
  "CREATED_AT",
  "CREATED_BY_ID",
  "INVITE_EMAIL",
  "INVITE_ACCEPTED_AT",
  "INVITE_TOKEN",
  "REQUESTED_AT",
  "EXPIRES_AT",
  "LDAP",
  "OVERRIDE",
  "MEMBER_ROLE_ID"

)

, renamed AS (

    SELECT

      id::NUMBER                                    AS member_id,
      access_level::NUMBER                          AS access_level,
      source_id::NUMBER                             AS source_id,
      source_type                                    AS member_source_type,
      user_id::NUMBER                               AS user_id,
      notification_level::NUMBER                    AS notification_level,
      type                                           AS member_type,
      created_at::TIMESTAMP                          AS invite_created_at,
      created_at::TIMESTAMP                          AS created_at,
      created_by_id::NUMBER                         AS created_by_id,
      invite_accepted_at::TIMESTAMP                  AS invite_accepted_at,
      requested_at::TIMESTAMP                        AS requested_at,
      expires_at::TIMESTAMP                          AS expires_at,
      ldap::BOOLEAN                                  AS has_ldap,
      override::BOOLEAN                              AS has_override,
      member_role_id,
      invite_token::VARCHAR AS invite_token,
      valid_from -- Column was added in distinct_source CTE

    FROM distinct_source

)

, max_by_primary_key AS (
  
    SELECT
      id AS primary_key,
      MAX(
        IFF(max_task_instance IN ( 
              SELECT MAX(max_task_instance) 
              FROM distinct_source 
            ), 1, 0)
      )                     AS is_in_most_recent_task,
      MAX(max_uploaded_at)  AS max_timestamp
    FROM distinct_source
    GROUP BY 1

)

, windowed AS (
  
    SELECT
      renamed.*,

      COALESCE( -- First, look for the row immediately following by PK and subtract one millisecond from its timestamp.
        DATEADD('millisecond', -1, LEAD(valid_from) OVER (
          PARTITION BY renamed.member_id
          ORDER BY valid_from)
        ),
        -- If row has no following rows, check when it's valid until (NULL if it appeared in latest task instance.)
          IFF(is_in_most_recent_task = FALSE, max_by_primary_key.max_timestamp, NULL)
      )                                  AS valid_to,
      IFF(valid_to IS NULL, True, False) AS is_currently_valid

    FROM renamed
    LEFT JOIN max_by_primary_key
      ON renamed.member_id = max_by_primary_key.primary_key
    ORDER BY valid_from, valid_to

)

SELECT *
FROM windowed3d:Ta5d,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_namespaces_dedupe_source') }}
  
), renamed AS (

    SELECT 
      id::NUMBER                                                    AS namespace_id,
      name::VARCHAR                                                 AS namespace_name,
      path::VARCHAR                                                 AS namespace_path,
      owner_id::NUMBER                                              AS owner_id,
      type                                                          AS namespace_type,
      IFF(avatar IS NULL, FALSE, TRUE)                              AS has_avatar,
      created_at::TIMESTAMP                                         AS created_at,
      updated_at::TIMESTAMP                                         AS updated_at,
      membership_lock::BOOLEAN                                      AS is_membership_locked,
      request_access_enabled::BOOLEAN                               AS has_request_access_enabled,
      share_with_group_lock::BOOLEAN                                AS has_share_with_group_locked,
      CASE
        WHEN visibility_level = '20' THEN 'public'
        WHEN visibility_level = '10' THEN 'internal'
        ELSE 'private'
      END::VARCHAR                                                  AS visibility_level,
      ldap_sync_status,
      ldap_sync_error,
      ldap_sync_last_update_at::TIMESTAMP                           AS ldap_sync_last_update_at,
      ldap_sync_last_successful_update_at::TIMESTAMP                AS ldap_sync_last_successful_update_at,
      ldap_sync_last_sync_at::TIMESTAMP                             AS ldap_sync_last_sync_at,
      lfs_enabled::BOOLEAN                                          AS lfs_enabled,
      parent_id::NUMBER                                             AS parent_id,
      shared_runners_minutes_limit::NUMBER                          AS shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit::NUMBER                    AS extra_shared_runners_minutes_limit,
      repository_size_limit::NUMBER                                 AS repository_size_limit,
      require_two_factor_authentication::BOOLEAN                    AS does_require_two_factor_authentication,
      two_factor_grace_period::NUMBER                               AS two_factor_grace_period,
      project_creation_level::NUMBER                                AS project_creation_level,
      push_rule_id::INTEGER                                         AS push_rule_id, 
      shared_runners_enabled:BOOLEAN                                AS shared_runners_enabled
    FROM source

)

SELECT *
FROM renamed3e:Ta65,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source
  
), renamed AS (

    SELECT 
      id::NUMBER                                                    AS namespace_id,
      name::VARCHAR                                                 AS namespace_name,
      path::VARCHAR                                                 AS namespace_path,
      owner_id::NUMBER                                              AS owner_id,
      type                                                          AS namespace_type,
      IFF(avatar IS NULL, FALSE, TRUE)                              AS has_avatar,
      created_at::TIMESTAMP                                         AS created_at,
      updated_at::TIMESTAMP                                         AS updated_at,
      membership_lock::BOOLEAN                                      AS is_membership_locked,
      request_access_enabled::BOOLEAN                               AS has_request_access_enabled,
      share_with_group_lock::BOOLEAN                                AS has_share_with_group_locked,
      CASE
        WHEN visibility_level = '20' THEN 'public'
        WHEN visibility_level = '10' THEN 'internal'
        ELSE 'private'
      END::VARCHAR                                                  AS visibility_level,
      ldap_sync_status,
      ldap_sync_error,
      ldap_sync_last_update_at::TIMESTAMP                           AS ldap_sync_last_update_at,
      ldap_sync_last_successful_update_at::TIMESTAMP                AS ldap_sync_last_successful_update_at,
      ldap_sync_last_sync_at::TIMESTAMP                             AS ldap_sync_last_sync_at,
      lfs_enabled::BOOLEAN                                          AS lfs_enabled,
      parent_id::NUMBER                                             AS parent_id,
      shared_runners_minutes_limit::NUMBER                          AS shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit::NUMBER                    AS extra_shared_runners_minutes_limit,
      repository_size_limit::NUMBER                                 AS repository_size_limit,
      require_two_factor_authentication::BOOLEAN                    AS does_require_two_factor_authentication,
      two_factor_grace_period::NUMBER                               AS two_factor_grace_period,
      project_creation_level::NUMBER                                AS project_creation_level,
      push_rule_id::INTEGER                                         AS push_rule_id, 
      shared_runners_enabled:BOOLEAN                                AS shared_runners_enabled
    FROM source

)

SELECT *
FROM renamed3f:T64c,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_namespace_settings_dedupe_source') }}

), renamed AS (

    SELECT
      created_at::TIMESTAMP                               AS created_at,
      updated_at::TIMESTAMP                               AS updated_at,
      namespace_id::NUMBER                                AS namespace_id,
      prevent_forking_outside_group::BOOLEAN              AS prevent_forking_outside_group,
      allow_mfa_for_subgroups::BOOLEAN                    AS allow_mfa_for_subgroups,
      default_branch_name::VARCHAR                        AS default_branch_name,
      repository_read_only::BOOLEAN                       AS repository_read_only,
      delayed_project_removal::BOOLEAN                    AS delayed_project_removal,
      resource_access_token_creation_allowed::BOOLEAN     AS resource_access_token_creation_allowed,
      lock_delayed_project_removal::BOOLEAN               AS lock_delayed_project_removal,
      prevent_sharing_groups_outside_hierarchy::BOOLEAN   AS prevent_sharing_groups_outside_hierarchy,
      new_user_signups_cap::NUMBER                        AS new_signups_cap,
      setup_for_company::BOOLEAN                          AS is_setup_for_company,
      jobs_to_be_done::NUMBER                             AS jobs_to_be_done,
      experiment_features_enabled::BOOLEAN                AS experiment_features_enabled,
      third_party_ai_features_enabled::BOOLEAN            AS third_party_ai_features_enabled,
      code_suggestions::BOOLEAN                           AS code_suggestions
    FROM source

)

SELECT *
FROM renamed40:T654,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_settings_dedupe_source

), renamed AS (

    SELECT
      created_at::TIMESTAMP                               AS created_at,
      updated_at::TIMESTAMP                               AS updated_at,
      namespace_id::NUMBER                                AS namespace_id,
      prevent_forking_outside_group::BOOLEAN              AS prevent_forking_outside_group,
      allow_mfa_for_subgroups::BOOLEAN                    AS allow_mfa_for_subgroups,
      default_branch_name::VARCHAR                        AS default_branch_name,
      repository_read_only::BOOLEAN                       AS repository_read_only,
      delayed_project_removal::BOOLEAN                    AS delayed_project_removal,
      resource_access_token_creation_allowed::BOOLEAN     AS resource_access_token_creation_allowed,
      lock_delayed_project_removal::BOOLEAN               AS lock_delayed_project_removal,
      prevent_sharing_groups_outside_hierarchy::BOOLEAN   AS prevent_sharing_groups_outside_hierarchy,
      new_user_signups_cap::NUMBER                        AS new_signups_cap,
      setup_for_company::BOOLEAN                          AS is_setup_for_company,
      jobs_to_be_done::NUMBER                             AS jobs_to_be_done,
      experiment_features_enabled::BOOLEAN                AS experiment_features_enabled,
      third_party_ai_features_enabled::BOOLEAN            AS third_party_ai_features_enabled,
      code_suggestions::BOOLEAN                           AS code_suggestions
    FROM source

)

SELECT *
FROM renamed41:Tff8,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_users_dedupe_source') }}

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    {{ user_role_mapping(user_role='role') }}::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    {{ it_job_title_hierarchy('role') }}
  FROM renamed

)

SELECT *
FROM add_job_hierarchy42:T1bb4,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_dedupe_source

),

renamed AS (

  SELECT
    id::NUMBER AS user_id,
    remember_created_at::TIMESTAMP AS remember_created_at,
    sign_in_count::NUMBER AS sign_in_count,
    current_sign_in_at::TIMESTAMP AS current_sign_in_at,
    last_sign_in_at::TIMESTAMP AS last_sign_in_at,
    -- current_sign_in_ip   // hidden for privacy
    -- last_sign_in_ip   // hidden for privacy
    created_at::TIMESTAMP AS created_at,
    updated_at::TIMESTAMP AS updated_at,
    admin::BOOLEAN AS is_admin,
    projects_limit::NUMBER AS projects_limit,
    failed_attempts::NUMBER AS failed_attempts,
    locked_at::TIMESTAMP AS locked_at,
    IFF(LOWER(locked_at) = 'nan', FALSE, TRUE) AS user_locked,
    can_create_group::BOOLEAN AS has_create_group_permissions,
    can_create_team::BOOLEAN AS has_create_team_permissions,
    state::VARCHAR AS state,
    color_scheme_id::NUMBER AS color_scheme_id,
    password_expires_at::TIMESTAMP AS password_expires_at,
    created_by_id::NUMBER AS created_by_id,
    last_credential_check_at::TIMESTAMP AS last_credential_check_at,
    IFF(LOWER(avatar) = 'nan', FALSE, TRUE) AS has_avatar,
    confirmed_at::TIMESTAMP AS confirmed_at,
    confirmation_sent_at::TIMESTAMP AS confirmation_sent_at,
    -- unconfirmed_email // hidden for privacy
    hide_no_ssh_key::BOOLEAN AS has_hide_no_ssh_key_enabled,
    admin_email_unsubscribed_at::TIMESTAMP AS admin_email_unsubscribed_at,
    -- Coalesced to match application behavior
    -- https://gitlab.com/gitlab-data/analytics/-/issues/12046#note_863577705
    COALESCE(notification_email, email)::VARCHAR AS notification_email,
    SPLIT_PART(COALESCE(notification_email, email), '@', 2) AS notification_email_domain,
    hide_no_password::BOOLEAN AS has_hide_no_password_enabled,
    password_automatically_set::BOOLEAN AS is_password_automatically_set,
    NULL AS location,
    email::VARCHAR AS email,
    SPLIT_PART(email, '@', 2) AS email_domain,
    public_email::VARCHAR AS public_email,
    SPLIT_PART(public_email, '@', 2) AS public_email_domain,
    commit_email::VARCHAR AS commit_email,
    IFF(SPLIT_PART(commit_email, '@', 2) = '', NULL, SPLIT_PART(commit_email, '@', 2)) AS commit_email_domain,
    email_opted_in::BOOLEAN AS is_email_opted_in,
    email_opted_in_source_id::NUMBER AS email_opted_in_source_id,
    email_opted_in_at::TIMESTAMP AS email_opted_in_at,
    dashboard::NUMBER AS dashboard,
    project_view::NUMBER AS project_view,
    consumed_timestep::NUMBER AS consumed_timestep,
    layout::NUMBER AS layout,
    hide_project_limit::BOOLEAN AS has_hide_project_limit_enabled,
    -- note // hidden for privacy
    otp_grace_period_started_at::TIMESTAMP AS otp_grace_period_started_at,
    external::BOOLEAN AS is_external_user,
    NULL AS organization,
    auditor::BOOLEAN AS auditor,
    require_two_factor_authentication_from_group::BOOLEAN AS does_require_two_factor_authentication_from_group, -- noqa:L016
    two_factor_grace_period::NUMBER AS two_factor_grace_period,
    last_activity_on::TIMESTAMP AS last_activity_on,
    notified_of_own_activity::BOOLEAN AS is_notified_of_own_activity,
    NULLIF(preferred_language, 'nan')::VARCHAR AS preferred_language,
    theme_id::NUMBER AS theme_id,
    accepted_term_id::NUMBER AS accepted_term_id,
    private_profile::BOOLEAN AS is_private_profile,
    roadmap_layout::NUMBER AS roadmap_layout,
    include_private_contributions::BOOLEAN AS include_private_contributions,
    group_view::NUMBER AS group_view,
    managing_group_id::NUMBER AS managing_group_id,
    -- bot_type::NUMBER  // removed from prod
    role::NUMBER AS role_id,
    CASE
      WHEN role = 0 THEN 'Software Developer'
      WHEN role = 1 THEN 'Development Team Lead'
      WHEN role = 2 THEN 'Devops Engineer'
      WHEN role = 3 THEN 'Systems Administrator'
      WHEN role = 4 THEN 'Security Analyst'
      WHEN role = 5 THEN 'Data Analyst'
      WHEN role = 6 THEN 'Product Manager'
      WHEN role = 7 THEN 'Product Designer'
      WHEN role = 8 THEN 'Other'
      WHEN role = 99 THEN 'Experiment Default Value - Signup Not Completed'
      ELSE NULL
    END::VARCHAR AS role, -- noqa:L029
    username::VARCHAR AS user_name,
    first_name::VARCHAR AS first_name,
    last_name::VARCHAR AS last_name,
    name::VARCHAR AS users_name,
    user_type::NUMBER AS user_type

  FROM source

),

add_job_hierarchy AS (

  SELECT
    renamed.*,
    CASE
    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%head% it%', '%vp%technology%','%director%technology%', '%director%engineer%',
      '%chief%information%', '%chief%technology%', '%president%technology%', '%vp%technology%',
      '%director%development%', '% it%director%', '%director%information%', '%director% it%',
      '%chief%engineer%', '%director%quality%', '%vp%engineer%', '%head%information%',
      '%vp%information%', '%president%information%', '%president%engineer%',
      '%president%development%', '%director% it%', '%engineer%director%', '%head%engineer%',
      '%engineer%head%', '%chief%software%', '%director%procurement%', '%procurement%director%',
      '%head%procurement%', '%procurement%head%', '%chief%procurement%', '%vp%procurement%',
      '%procurement%vp%', '%president%procurement%', '%procurement%president%', '%head%devops%'
      )
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cio'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cto'::VARIANT, SPLIT(LOWER(role), ','))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ' '))
      OR ARRAY_CONTAINS('cfo'::VARIANT, SPLIT(LOWER(role), ','))
        THEN 'IT Decision Maker'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '%manager%information%', '%manager%technology%', '%database%administrat%', '%manager%engineer%',
      '%engineer%manager%', '%information%manager%', '%technology%manager%', '%manager%development%',
      '%manager%quality%', '%manager%network%', '% it%manager%', '%manager% it%',
      '%manager%systems%', '%manager%application%', '%technical%manager%', '%manager%technical%',
      '%manager%infrastructure%', '%manager%implementation%', '%devops%manager%', '%manager%devops%',
      '%manager%software%', '%procurement%manager%', '%manager%procurement%'
      )
      AND NOT ARRAY_CONTAINS('project'::VARIANT, SPLIT(LOWER(role), ' '))
        THEN 'IT Manager'

    WHEN LOWER(INSERT(INSERT(role, 1, 0, ''), LEN(role)+2, 0, '')) LIKE ANY (
      '% it %', '% it,%', '%infrastructure%', '%engineer%',
      '%techno%', '%information%', '%developer%', '%database%',
      '%solutions architect%', '%system%', '%software%', '%technical lead%',
      '%programmer%', '%network administrat%', '%application%', '%procurement%',
      '%development%', '%tech%lead%'
      )
        THEN 'IT Individual Contributor'

    ELSE NULL

  END AS it_job_title_hierarchy
  FROM renamed

)

SELECT *
FROM add_job_hierarchy43:T18ac,WITH source AS (

  SELECT *
  FROM {{ ref('gitlab_dotcom_projects_dedupe_source') }}
  
), renamed AS (

    SELECT

      id::NUMBER                                                                 AS project_id,
      description::VARCHAR                                                        AS project_description,
      import_source::VARCHAR                                                      AS project_import_source,
      issues_template::VARCHAR                                                    AS project_issues_template,
      build_coverage_regex                                                        AS project_build_coverage_regex,      
      name::VARCHAR                                                               AS project_name,
      path::VARCHAR                                                               AS project_path,
      import_url::VARCHAR                                                         AS project_import_url,
      merge_requests_template                                                     AS project_merge_requests_template,

      created_at::TIMESTAMP                                                       AS created_at,
      updated_at::TIMESTAMP                                                       AS updated_at,

      creator_id::NUMBER                                                          AS creator_id,
      namespace_id::NUMBER                                                        AS namespace_id,

      last_activity_at::TIMESTAMP                                                 AS last_activity_at,

      CASE
        WHEN visibility_level = '20' THEN 'public'
        WHEN visibility_level = '10' THEN 'internal'
        ELSE 'private'
      END::VARCHAR                                                                AS visibility_level,

      archived::BOOLEAN                                                           AS archived,

      IFF(avatar IS NULL, FALSE, TRUE)::BOOLEAN                                   AS has_avatar,

      star_count::NUMBER                                                         AS project_star_count,
      merge_requests_rebase_enabled::BOOLEAN                                      AS merge_requests_rebase_enabled,
      IFF(LOWER(import_type) = 'nan', NULL, import_type)                          AS import_type,
      approvals_before_merge::NUMBER                                             AS approvals_before_merge,
      reset_approvals_on_push::BOOLEAN                                            AS reset_approvals_on_push,
      merge_requests_ff_only_enabled::BOOLEAN                                     AS merge_requests_ff_only_enabled,
      mirror::BOOLEAN                                                             AS mirror,
      mirror_user_id::NUMBER                                                     AS mirror_user_id,
      shared_runners_enabled::BOOLEAN                                             AS shared_runners_enabled,
      build_allow_git_fetch::BOOLEAN                                              AS build_allow_git_fetch,
      build_timeout::NUMBER                                                      AS build_timeout,
      mirror_trigger_builds::BOOLEAN                                              AS mirror_trigger_builds,
      pending_delete::BOOLEAN                                                     AS pending_delete,
      public_builds::BOOLEAN                                                      AS public_builds,
      last_repository_check_failed::BOOLEAN                                       AS last_repository_check_failed,
      last_repository_check_at::TIMESTAMP                                         AS last_repository_check_at,
      container_registry_enabled::BOOLEAN                                         AS container_registry_enabled,
      only_allow_merge_if_pipeline_succeeds::BOOLEAN                              AS only_allow_merge_if_pipeline_succeeds,
      has_external_issue_tracker::BOOLEAN                                         AS has_external_issue_tracker,
      repository_storage,
      repository_read_only::BOOLEAN                                               AS repository_read_only,
      request_access_enabled::BOOLEAN                                             AS request_access_enabled,
      has_external_wiki::BOOLEAN                                                  AS has_external_wiki,
      ci_config_path,
      lfs_enabled::BOOLEAN                                                        AS lfs_enabled,
      only_allow_merge_if_all_discussions_are_resolved::BOOLEAN                   AS only_allow_merge_if_all_discussions_are_resolved,
      repository_size_limit::NUMBER                                              AS repository_size_limit,
      printing_merge_request_link_enabled::BOOLEAN                                AS printing_merge_request_link_enabled,
      IFF(auto_cancel_pending_pipelines :: int = 1, TRUE, FALSE)                  AS has_auto_canceling_pending_pipelines,
      service_desk_enabled::BOOLEAN                                               AS service_desk_enabled,
      IFF(LOWER(delete_error) = 'nan', NULL, delete_error)                        AS delete_error,
      last_repository_updated_at::TIMESTAMP                                       AS last_repository_updated_at,
      storage_version::NUMBER                                                    AS storage_version,
      resolve_outdated_diff_discussions::BOOLEAN                                  AS resolve_outdated_diff_discussions,
      disable_overriding_approvers_per_merge_request::BOOLEAN                     AS disable_overriding_approvers_per_merge_request,
      remote_mirror_available_overridden::BOOLEAN                                 AS remote_mirror_available_overridden,
      only_mirror_protected_branches::BOOLEAN                                     AS only_mirror_protected_branches,
      pull_mirror_available_overridden::BOOLEAN                                   AS pull_mirror_available_overridden,
      mirror_overwrites_diverged_branches::BOOLEAN                                AS mirror_overwrites_diverged_branches,
      external_authorization_classification_label,
      project_namespace_id::NUMBER AS project_namespace_id
    FROM source

)

SELECT *
FROM renamed44:T18b4,WITH source AS (

  SELECT *
  FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_dedupe_source
  
), renamed AS (

    SELECT

      id::NUMBER                                                                 AS project_id,
      description::VARCHAR                                                        AS project_description,
      import_source::VARCHAR                                                      AS project_import_source,
      issues_template::VARCHAR                                                    AS project_issues_template,
      build_coverage_regex                                                        AS project_build_coverage_regex,      
      name::VARCHAR                                                               AS project_name,
      path::VARCHAR                                                               AS project_path,
      import_url::VARCHAR                                                         AS project_import_url,
      merge_requests_template                                                     AS project_merge_requests_template,

      created_at::TIMESTAMP                                                       AS created_at,
      updated_at::TIMESTAMP                                                       AS updated_at,

      creator_id::NUMBER                                                          AS creator_id,
      namespace_id::NUMBER                                                        AS namespace_id,

      last_activity_at::TIMESTAMP                                                 AS last_activity_at,

      CASE
        WHEN visibility_level = '20' THEN 'public'
        WHEN visibility_level = '10' THEN 'internal'
        ELSE 'private'
      END::VARCHAR                                                                AS visibility_level,

      archived::BOOLEAN                                                           AS archived,

      IFF(avatar IS NULL, FALSE, TRUE)::BOOLEAN                                   AS has_avatar,

      star_count::NUMBER                                                         AS project_star_count,
      merge_requests_rebase_enabled::BOOLEAN                                      AS merge_requests_rebase_enabled,
      IFF(LOWER(import_type) = 'nan', NULL, import_type)                          AS import_type,
      approvals_before_merge::NUMBER                                             AS approvals_before_merge,
      reset_approvals_on_push::BOOLEAN                                            AS reset_approvals_on_push,
      merge_requests_ff_only_enabled::BOOLEAN                                     AS merge_requests_ff_only_enabled,
      mirror::BOOLEAN                                                             AS mirror,
      mirror_user_id::NUMBER                                                     AS mirror_user_id,
      shared_runners_enabled::BOOLEAN                                             AS shared_runners_enabled,
      build_allow_git_fetch::BOOLEAN                                              AS build_allow_git_fetch,
      build_timeout::NUMBER                                                      AS build_timeout,
      mirror_trigger_builds::BOOLEAN                                              AS mirror_trigger_builds,
      pending_delete::BOOLEAN                                                     AS pending_delete,
      public_builds::BOOLEAN                                                      AS public_builds,
      last_repository_check_failed::BOOLEAN                                       AS last_repository_check_failed,
      last_repository_check_at::TIMESTAMP                                         AS last_repository_check_at,
      container_registry_enabled::BOOLEAN                                         AS container_registry_enabled,
      only_allow_merge_if_pipeline_succeeds::BOOLEAN                              AS only_allow_merge_if_pipeline_succeeds,
      has_external_issue_tracker::BOOLEAN                                         AS has_external_issue_tracker,
      repository_storage,
      repository_read_only::BOOLEAN                                               AS repository_read_only,
      request_access_enabled::BOOLEAN                                             AS request_access_enabled,
      has_external_wiki::BOOLEAN                                                  AS has_external_wiki,
      ci_config_path,
      lfs_enabled::BOOLEAN                                                        AS lfs_enabled,
      only_allow_merge_if_all_discussions_are_resolved::BOOLEAN                   AS only_allow_merge_if_all_discussions_are_resolved,
      repository_size_limit::NUMBER                                              AS repository_size_limit,
      printing_merge_request_link_enabled::BOOLEAN                                AS printing_merge_request_link_enabled,
      IFF(auto_cancel_pending_pipelines :: int = 1, TRUE, FALSE)                  AS has_auto_canceling_pending_pipelines,
      service_desk_enabled::BOOLEAN                                               AS service_desk_enabled,
      IFF(LOWER(delete_error) = 'nan', NULL, delete_error)                        AS delete_error,
      last_repository_updated_at::TIMESTAMP                                       AS last_repository_updated_at,
      storage_version::NUMBER                                                    AS storage_version,
      resolve_outdated_diff_discussions::BOOLEAN                                  AS resolve_outdated_diff_discussions,
      disable_overriding_approvers_per_merge_request::BOOLEAN                     AS disable_overriding_approvers_per_merge_request,
      remote_mirror_available_overridden::BOOLEAN                                 AS remote_mirror_available_overridden,
      only_mirror_protected_branches::BOOLEAN                                     AS only_mirror_protected_branches,
      pull_mirror_available_overridden::BOOLEAN                                   AS pull_mirror_available_overridden,
      mirror_overwrites_diverged_branches::BOOLEAN                                AS mirror_overwrites_diverged_branches,
      external_authorization_classification_label,
      project_namespace_id::NUMBER AS project_namespace_id
    FROM source

)

SELECT *
FROM renamed45:T156c,{{ config(
    tags=["product"]
) }}

{{ config({
    "materialized": "table",
    "unique_key": "dim_user_id"
    })
}}

{{ simple_cte([
    ('dim_date', 'dim_date'),
    ('source', 'gitlab_dotcom_users_source'),
    ('email_classification', 'driveload_email_domain_classification_source'),
    ('identity','gitlab_dotcom_identities_source'),
    ('gitlab_dotcom_user_preferences_source','gitlab_dotcom_user_preferences_source'),
    ('gitlab_dotcom_user_details_source','gitlab_dotcom_user_details_source'),
    ('customers_db_leads_source','customers_db_leads_source')

]) }}, 

email_classification_dedup AS (

  SELECT 
    *
  FROM email_classification
  QUALIFY ROW_NUMBER() OVER(PARTITION BY domain ORDER BY domain DESC) = 1

), 

closest_provider AS (

  SELECT
    source.user_id AS user_id,
    identity.identity_provider AS identity_provider
  FROM source                                                       
  LEFT JOIN identity 
    ON source.user_id = identity.user_id
  WHERE 
    identity.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY source.user_id 
      ORDER BY TIMEDIFF(MILLISECONDS,source.created_at,COALESCE(identity.created_at,{{var('infinity_future')}})) ASC) = 1

), 

user_preferences AS (

  SELECT 
    user_id AS user_id,
    COALESCE(setup_for_company::VARCHAR,'Unknown') AS setup_for_company
  FROM gitlab_dotcom_user_preferences_source

),

user_details AS (

  SELECT 
    user_id AS user_id,
    CASE COALESCE(registration_objective,-1)
      WHEN 0 THEN 'basics' 
      WHEN 1 THEN 'move_repository' 
      WHEN 2 THEN 'code_storage' 
      WHEN 3 THEN 'exploring' 
      WHEN 4 THEN 'ci' 
      WHEN 5 THEN 'other' 
      WHEN 6 THEN 'joining_team'
      WHEN -1 THEN 'Unknown'
    END AS jobs_to_be_done
  FROM gitlab_dotcom_user_details_source

),

customer_leads AS (

  SELECT 
    user_id AS user_id,
    COALESCE(MAX(is_for_business_use)::VARCHAR,'Unknown') AS for_business_use,
    COALESCE(MAX(employees_bucket)::VARCHAR,'Unknown') AS employee_count,
    COALESCE(MAX(country)::VARCHAR,'Unknown') AS country,
    COALESCE(MAX(state)::VARCHAR,'Unknown') AS state
  FROM customers_db_leads_source
  GROUP BY
    user_id

),


renamed AS (

  SELECT
    --surrogate_key
    {{ dbt_utils.surrogate_key(['source.user_id']) }}  AS dim_user_sk,
    
    --natural_key
    source.user_id,
    
    --legacy natural_key to be deprecated during change management plan
    source.user_id AS dim_user_id,
    
    --Other attributes
    source.remember_created_at AS remember_created_at,
    source.sign_in_count AS sign_in_count,
    source.current_sign_in_at AS current_sign_in_at,
    source.last_sign_in_at AS last_sign_in_at,
    source.created_at AS created_at,
    dim_date.date_id AS created_date_id,
    source.updated_at AS updated_at,
    source.is_admin AS is_admin,
    source.state AS user_state,
    CASE 
      WHEN source.state in ('blocked', 'banned') THEN TRUE
      ELSE FALSE 
    END AS is_blocked_user,
    source.notification_email_domain AS notification_email_domain,
    notification_email_domain.classification AS notification_email_domain_classification,
    source.email_domain AS email_domain,
    email_domain.classification AS email_domain_classification,
    source.public_email_domain AS public_email_domain,
    public_email_domain.classification AS public_email_domain_classification,
    source.commit_email_domain AS commit_email_domain,
    commit_email_domain.classification AS commit_email_domain_classification,
    closest_provider.identity_provider AS identity_provider,

    -- Expanded Attributes  (Not Found = Joined Row Not found for the Attribute)
    COALESCE(source.role,'Unknown') AS role,
    COALESCE(TO_DATE(source.last_activity_on)::VARCHAR,'Unknown') AS last_activity_date,              
    COALESCE(TO_DATE(source.last_sign_in_at)::VARCHAR,'Unknown')  AS last_sign_in_date,               
    COALESCE(user_preferences.setup_for_company,'Not Found') AS setup_for_company,               
    COALESCE(user_details.jobs_to_be_done,'Not Found') AS jobs_to_be_done,
    COALESCE(customer_leads.for_business_use,'Not Found') AS for_business_use,                 
    COALESCE(customer_leads.employee_count,'Not Found') AS employee_count,
    COALESCE(customer_leads.country,'Not Found') AS country,
    COALESCE(customer_leads.state,'Not Found') AS state

  FROM source
  LEFT JOIN dim_date
    ON TO_DATE(source.created_at) = dim_date.date_day
  LEFT JOIN email_classification_dedup AS notification_email_domain
    ON notification_email_domain.domain = source.notification_email_domain
  LEFT JOIN email_classification_dedup AS email_domain
    ON email_domain.domain = source.email_domain
  LEFT JOIN email_classification_dedup AS public_email_domain
    ON public_email_domain.domain = source.public_email_domain
  LEFT JOIN email_classification_dedup AS commit_email_domain
    ON commit_email_domain.domain = source.commit_email_domain
  LEFT JOIN closest_provider AS closest_provider
    ON source.user_id = closest_provider.user_id  
  LEFT JOIN user_preferences  AS user_preferences
    ON source.user_id = user_preferences.user_id
  LEFT JOIN user_details AS user_details
    ON source.user_id = user_details.user_id
  LEFT JOIN customer_leads AS customer_leads
    ON source.user_id = customer_leads.user_id

)

{{ dbt_audit(
    cte_ref="renamed",
    created_by="@mpeychet",
    updated_by="@tpoole",
    created_date="2021-05-31",
    updated_date="2022-08-25"
) }}46:T1719,





WITH dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

), source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), email_classification AS (

    SELECT * 
    FROM "PREP".driveload.driveload_email_domain_classification_source

), identity AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_identities_source

), gitlab_dotcom_user_preferences_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_user_preferences_source

), gitlab_dotcom_user_details_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_user_details_source

), customers_db_leads_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_leads_source

), 

email_classification_dedup AS (

  SELECT 
    *
  FROM email_classification
  QUALIFY ROW_NUMBER() OVER(PARTITION BY domain ORDER BY domain DESC) = 1

), 

closest_provider AS (

  SELECT
    source.user_id AS user_id,
    identity.identity_provider AS identity_provider
  FROM source                                                       
  LEFT JOIN identity 
    ON source.user_id = identity.user_id
  WHERE 
    identity.user_id IS NOT NULL
  QUALIFY ROW_NUMBER() OVER(PARTITION BY source.user_id 
      ORDER BY TIMEDIFF(MILLISECONDS,source.created_at,COALESCE(identity.created_at,TO_DATE('9999-12-31', 'YYYY-MM-DD'))) ASC) = 1

), 

user_preferences AS (

  SELECT 
    user_id AS user_id,
    COALESCE(setup_for_company::VARCHAR,'Unknown') AS setup_for_company
  FROM gitlab_dotcom_user_preferences_source

),

user_details AS (

  SELECT 
    user_id AS user_id,
    CASE COALESCE(registration_objective,-1)
      WHEN 0 THEN 'basics' 
      WHEN 1 THEN 'move_repository' 
      WHEN 2 THEN 'code_storage' 
      WHEN 3 THEN 'exploring' 
      WHEN 4 THEN 'ci' 
      WHEN 5 THEN 'other' 
      WHEN 6 THEN 'joining_team'
      WHEN -1 THEN 'Unknown'
    END AS jobs_to_be_done
  FROM gitlab_dotcom_user_details_source

),

customer_leads AS (

  SELECT 
    user_id AS user_id,
    COALESCE(MAX(is_for_business_use)::VARCHAR,'Unknown') AS for_business_use,
    COALESCE(MAX(employees_bucket)::VARCHAR,'Unknown') AS employee_count,
    COALESCE(MAX(country)::VARCHAR,'Unknown') AS country,
    COALESCE(MAX(state)::VARCHAR,'Unknown') AS state
  FROM customers_db_leads_source
  GROUP BY
    user_id

),


renamed AS (

  SELECT
    --surrogate_key
    md5(cast(coalesce(cast(source.user_id as 
    varchar
), '') as 
    varchar
))  AS dim_user_sk,
    
    --natural_key
    source.user_id,
    
    --legacy natural_key to be deprecated during change management plan
    source.user_id AS dim_user_id,
    
    --Other attributes
    source.remember_created_at AS remember_created_at,
    source.sign_in_count AS sign_in_count,
    source.current_sign_in_at AS current_sign_in_at,
    source.last_sign_in_at AS last_sign_in_at,
    source.created_at AS created_at,
    dim_date.date_id AS created_date_id,
    source.updated_at AS updated_at,
    source.is_admin AS is_admin,
    source.state AS user_state,
    CASE 
      WHEN source.state in ('blocked', 'banned') THEN TRUE
      ELSE FALSE 
    END AS is_blocked_user,
    source.notification_email_domain AS notification_email_domain,
    notification_email_domain.classification AS notification_email_domain_classification,
    source.email_domain AS email_domain,
    email_domain.classification AS email_domain_classification,
    source.public_email_domain AS public_email_domain,
    public_email_domain.classification AS public_email_domain_classification,
    source.commit_email_domain AS commit_email_domain,
    commit_email_domain.classification AS commit_email_domain_classification,
    closest_provider.identity_provider AS identity_provider,

    -- Expanded Attributes  (Not Found = Joined Row Not found for the Attribute)
    COALESCE(source.role,'Unknown') AS role,
    COALESCE(TO_DATE(source.last_activity_on)::VARCHAR,'Unknown') AS last_activity_date,              
    COALESCE(TO_DATE(source.last_sign_in_at)::VARCHAR,'Unknown')  AS last_sign_in_date,               
    COALESCE(user_preferences.setup_for_company,'Not Found') AS setup_for_company,               
    COALESCE(user_details.jobs_to_be_done,'Not Found') AS jobs_to_be_done,
    COALESCE(customer_leads.for_business_use,'Not Found') AS for_business_use,                 
    COALESCE(customer_leads.employee_count,'Not Found') AS employee_count,
    COALESCE(customer_leads.country,'Not Found') AS country,
    COALESCE(customer_leads.state,'Not Found') AS state

  FROM source
  LEFT JOIN dim_date
    ON TO_DATE(source.created_at) = dim_date.date_day
  LEFT JOIN email_classification_dedup AS notification_email_domain
    ON notification_email_domain.domain = source.notification_email_domain
  LEFT JOIN email_classification_dedup AS email_domain
    ON email_domain.domain = source.email_domain
  LEFT JOIN email_classification_dedup AS public_email_domain
    ON public_email_domain.domain = source.public_email_domain
  LEFT JOIN email_classification_dedup AS commit_email_domain
    ON commit_email_domain.domain = source.commit_email_domain
  LEFT JOIN closest_provider AS closest_provider
    ON source.user_id = closest_provider.user_id  
  LEFT JOIN user_preferences  AS user_preferences
    ON source.user_id = user_preferences.user_id
  LEFT JOIN user_details AS user_details
    ON source.user_id = user_details.user_id
  LEFT JOIN customer_leads AS customer_leads
    ON source.user_id = customer_leads.user_id

)

SELECT
      *,
      '@mpeychet'::VARCHAR       AS created_by,
      '@tpoole'::VARCHAR       AS updated_by,
      '2021-05-31'::DATE        AS model_created_date,
      '2022-08-25'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM renamed47:Tace,WITH snapshots AS (

    SELECT *
    FROM {{ source('snapshots', 'gitlab_dotcom_namespaces_snapshots') }}
    
), renamed as (

    SELECT
      dbt_scd_id::VARCHAR                               AS namespace_snapshot_id,
      id::NUMBER                                        AS dim_namespace_id,
      name::VARCHAR                                     AS namespace_name,
      path::VARCHAR                                     AS namespace_path,
      owner_id::NUMBER                                  AS owner_id,
      IFNULL(type, 'User')::VARCHAR                     AS namespace_type,
      IFF(avatar IS NULL, FALSE, TRUE)                  AS has_avatar,
      created_at::TIMESTAMP                             AS namespace_created_at,
      updated_at::TIMESTAMP                             AS namespace_updated_at,
      membership_lock::BOOLEAN                          AS is_membership_locked,
      request_access_enabled::BOOLEAN                   AS has_request_access_enabled,
      share_with_group_lock::BOOLEAN                    AS has_share_with_group_locked,
      CASE
        WHEN visibility_level = '20' THEN 'public'
        WHEN visibility_level = '10' THEN 'internal'
        ELSE 'private'
      END                                               AS visibility_level,
      ldap_sync_status,
      ldap_sync_error,
      ldap_sync_last_update_at::TIMESTAMP               AS ldap_sync_last_update_at,
      ldap_sync_last_successful_update_at::TIMESTAMP    AS ldap_sync_last_successful_update_at,
      ldap_sync_last_sync_at::TIMESTAMP                 AS ldap_sync_last_sync_at,
      lfs_enabled::BOOLEAN                              AS lfs_enabled,
      parent_id::NUMBER                                 AS parent_id,
      shared_runners_enabled::BOOLEAN                   AS shared_runners_enabled,
      shared_runners_minutes_limit::NUMBER              AS shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit::NUMBER        AS extra_shared_runners_minutes_limit,
      repository_size_limit::NUMBER                     AS repository_size_limit,
      require_two_factor_authentication::BOOLEAN        AS does_require_two_factor_authentication,
      two_factor_grace_period::NUMBER                   AS two_factor_grace_period,
      project_creation_level::NUMBER                    AS project_creation_level,
      push_rule_id::NUMBER                              AS push_rule_id,
      "DBT_VALID_FROM"::TIMESTAMP                       AS valid_from,
      "DBT_VALID_TO"::TIMESTAMP                         AS valid_to
    FROM snapshots
    
)

{{ dbt_audit(
    cte_ref="renamed",
    created_by="@ischweickartDD",
    updated_by="@pempey",
    created_date="2021-06-15",
    updated_date="2021-11-10"
) }}48:Tbb2,WITH snapshots AS (

    SELECT *
    FROM "RAW".snapshots.gitlab_dotcom_namespaces_snapshots
    
), renamed as (

    SELECT
      dbt_scd_id::VARCHAR                               AS namespace_snapshot_id,
      id::NUMBER                                        AS dim_namespace_id,
      name::VARCHAR                                     AS namespace_name,
      path::VARCHAR                                     AS namespace_path,
      owner_id::NUMBER                                  AS owner_id,
      IFNULL(type, 'User')::VARCHAR                     AS namespace_type,
      IFF(avatar IS NULL, FALSE, TRUE)                  AS has_avatar,
      created_at::TIMESTAMP                             AS namespace_created_at,
      updated_at::TIMESTAMP                             AS namespace_updated_at,
      membership_lock::BOOLEAN                          AS is_membership_locked,
      request_access_enabled::BOOLEAN                   AS has_request_access_enabled,
      share_with_group_lock::BOOLEAN                    AS has_share_with_group_locked,
      CASE
        WHEN visibility_level = '20' THEN 'public'
        WHEN visibility_level = '10' THEN 'internal'
        ELSE 'private'
      END                                               AS visibility_level,
      ldap_sync_status,
      ldap_sync_error,
      ldap_sync_last_update_at::TIMESTAMP               AS ldap_sync_last_update_at,
      ldap_sync_last_successful_update_at::TIMESTAMP    AS ldap_sync_last_successful_update_at,
      ldap_sync_last_sync_at::TIMESTAMP                 AS ldap_sync_last_sync_at,
      lfs_enabled::BOOLEAN                              AS lfs_enabled,
      parent_id::NUMBER                                 AS parent_id,
      shared_runners_enabled::BOOLEAN                   AS shared_runners_enabled,
      shared_runners_minutes_limit::NUMBER              AS shared_runners_minutes_limit,
      extra_shared_runners_minutes_limit::NUMBER        AS extra_shared_runners_minutes_limit,
      repository_size_limit::NUMBER                     AS repository_size_limit,
      require_two_factor_authentication::BOOLEAN        AS does_require_two_factor_authentication,
      two_factor_grace_period::NUMBER                   AS two_factor_grace_period,
      project_creation_level::NUMBER                    AS project_creation_level,
      push_rule_id::NUMBER                              AS push_rule_id,
      "DBT_VALID_FROM"::TIMESTAMP                       AS valid_from,
      "DBT_VALID_TO"::TIMESTAMP                         AS valid_to
    FROM snapshots
    
)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@pempey'::VARCHAR       AS updated_by,
      '2021-06-15'::DATE        AS model_created_date,
      '2021-11-10'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM renamed49:Te91,WITH product_tier_mapping AS (

    SELECT *
    FROM {{ ref('map_product_tier') }}

), mapping AS (

    SELECT DISTINCT 
      product_tier_historical,
      product_tier,
      product_delivery_type,
      product_deployment_type,
      product_ranking        
    FROM product_tier_mapping
    
    UNION ALL
    
    SELECT
      'SaaS - Free'                                                 AS product_tier_historical,
      'SaaS - Free'                                                 AS product_tier,
      'SaaS'                                                        AS product_delivery_type,
      'GitLab.com'                                                  AS product_deployment_type,
      0                                                             AS product_ranking
    
    UNION ALL
    
    SELECT
      'Self-Managed - Core'                                         AS product_tier_historical,
      'Self-Managed - Free'                                         AS product_tier,
      'Self-Managed'                                                AS product_delivery_type,
      'Self-Managed'                                                AS product_deployment_type,
      0                                                             AS product_ranking
  
    UNION ALL
    
    SELECT
      'SaaS - Trial: Gold'                                          AS product_tier_historical,
      'SaaS - Trial: Ultimate'                                      AS product_tier,
      'SaaS'                                                        AS product_delivery_type,
      'GitLab.com'                                                  AS product_deployment_type,
      0                                                             AS product_ranking
  
    UNION ALL
    
    SELECT
      'Self-Managed - Trial: Ultimate'                              AS product_tier_historical,
      'Self-Managed - Trial: Ultimate'                              AS product_tier,
      'Self-Managed'                                                AS product_delivery_type,
      'Self-Managed'                                                AS product_deployment_type,
      0                                                             AS product_ranking

), final AS (

  SELECT
    {{ dbt_utils.surrogate_key(['product_tier_historical']) }}      AS dim_product_tier_id,
    product_tier_historical,
    SPLIT_PART(product_tier_historical, ' - ', -1)                  AS product_tier_historical_short,
    product_tier                                                    AS product_tier_name,
    SPLIT_PART(product_tier, ' - ', -1)                             AS product_tier_name_short,
    product_delivery_type,
    product_deployment_type,
    product_ranking
  FROM mapping
  
  UNION ALL
  
  SELECT
    MD5('-1')                                                       AS dim_product_tier_id,
    '(Unknown Historical Tier)'                                     AS product_tier_historical,
    '(Unknown Historical Tier Name)'                                AS product_tier_historical_short,
    '(Unknown Tier)'                                                AS product_tier_name,
    '(Unknown Tier Name)'                                           AS product_tier_name_short,
    '(Unknown Delivery Type)'                                       AS product_delivery_type,
    '(Unknown Deployment Type)'                                     AS product_deployment_type,
    -1                                                              AS product_ranking

)


{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@jpeguero",
    created_date="2020-12-29",
    updated_date="2023-05-25"
) }}4a:Tfa9,WITH product_tier_mapping AS (

    SELECT *
    FROM "PROD".common_mapping.map_product_tier

), mapping AS (

    SELECT DISTINCT 
      product_tier_historical,
      product_tier,
      product_delivery_type,
      product_deployment_type,
      product_ranking        
    FROM product_tier_mapping
    
    UNION ALL
    
    SELECT
      'SaaS - Free'                                                 AS product_tier_historical,
      'SaaS - Free'                                                 AS product_tier,
      'SaaS'                                                        AS product_delivery_type,
      'GitLab.com'                                                  AS product_deployment_type,
      0                                                             AS product_ranking
    
    UNION ALL
    
    SELECT
      'Self-Managed - Core'                                         AS product_tier_historical,
      'Self-Managed - Free'                                         AS product_tier,
      'Self-Managed'                                                AS product_delivery_type,
      'Self-Managed'                                                AS product_deployment_type,
      0                                                             AS product_ranking
  
    UNION ALL
    
    SELECT
      'SaaS - Trial: Gold'                                          AS product_tier_historical,
      'SaaS - Trial: Ultimate'                                      AS product_tier,
      'SaaS'                                                        AS product_delivery_type,
      'GitLab.com'                                                  AS product_deployment_type,
      0                                                             AS product_ranking
  
    UNION ALL
    
    SELECT
      'Self-Managed - Trial: Ultimate'                              AS product_tier_historical,
      'Self-Managed - Trial: Ultimate'                              AS product_tier,
      'Self-Managed'                                                AS product_delivery_type,
      'Self-Managed'                                                AS product_deployment_type,
      0                                                             AS product_ranking

), final AS (

  SELECT
    md5(cast(coalesce(cast(product_tier_historical as 
    varchar
), '') as 
    varchar
))      AS dim_product_tier_id,
    product_tier_historical,
    SPLIT_PART(product_tier_historical, ' - ', -1)                  AS product_tier_historical_short,
    product_tier                                                    AS product_tier_name,
    SPLIT_PART(product_tier, ' - ', -1)                             AS product_tier_name_short,
    product_delivery_type,
    product_deployment_type,
    product_ranking
  FROM mapping
  
  UNION ALL
  
  SELECT
    MD5('-1')                                                       AS dim_product_tier_id,
    '(Unknown Historical Tier)'                                     AS product_tier_historical,
    '(Unknown Historical Tier Name)'                                AS product_tier_historical_short,
    '(Unknown Tier)'                                                AS product_tier_name,
    '(Unknown Tier Name)'                                           AS product_tier_name_short,
    '(Unknown Delivery Type)'                                       AS product_delivery_type,
    '(Unknown Deployment Type)'                                     AS product_deployment_type,
    -1                                                              AS product_ranking

)


SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2020-12-29'::DATE        AS model_created_date,
      '2023-05-25'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final4b:T571,{%- macro dbt_audit(cte_ref, created_by, updated_by, created_date, updated_date) -%}

    SELECT
      *,
      '{{ created_by }}'::VARCHAR       AS created_by,
      '{{ updated_by }}'::VARCHAR       AS updated_by,
      '{{ created_date }}'::DATE        AS model_created_date,
      '{{ updated_date }}'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    {% if execute %}

        {% if not flags.FULL_REFRESH and config.get('materialized') == "incremental" %}

            {%- set source_relation = adapter.get_relation(
                database=target.database,
                schema=this.schema,
                identifier=this.table,
                ) -%}      

            {% if source_relation != None %}

                {% set min_created_date %}
                    SELECT LEAST(MIN(dbt_created_at), CURRENT_TIMESTAMP()) AS min_ts 
                    FROM {{ this }}
                {% endset %}

                {% set results = run_query(min_created_date) %}

                '{{results.columns[0].values()[0]}}'::TIMESTAMP AS dbt_created_at

            {% else %}

                CURRENT_TIMESTAMP()               AS dbt_created_at

            {% endif %}

        {% else %}

            CURRENT_TIMESTAMP()               AS dbt_created_at

        {% endif %}
    
    {% endif %}

    FROM {{ cte_ref }}

{%- endmacro -%}4c:T416,Used to simplify CTE imports in a model.

A large portion of import statements in a SQL model are simple `SELECT * FROM table`. Writing pure SQL is verbose and this macro aims to simplify the imports.

The macro accepts once argument which is a list of tuples where each tuple has the alias name and the table reference.

Below is an example and the expected output:

```sql

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_account','zuora_account_source'),
    ('zuora_contact','zuora_contact_source')
]) }}

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM {{ref('zuora_excluded_accounts')}}

)

```

```sql
WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".common.map_merged_crm_account

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

)

, excluded_accounts AS (

    SELECT DISTINCT
      account_id
    FROM "PROD".legacy.zuora_excluded_accounts

)
```4e:T1f62,{{ config(
    tags=["product"]
) }}

{{ simple_cte([
    ('namespace_current', 'gitlab_dotcom_namespaces_source'),
    ('namespace_snapshots', 'prep_namespace_hist'),
    ('namespace_settings', 'gitlab_dotcom_namespace_settings_source'),
    ('namespace_lineage_historical', 'gitlab_dotcom_namespace_lineage_historical_daily'),
    ('map_namespace_internal', 'map_namespace_internal'),
    ('plans', 'gitlab_dotcom_plans_source'),
    ('product_tiers', 'prep_product_tier'),
    ('members_source', 'gitlab_dotcom_members_source'),
    ('projects_source', 'gitlab_dotcom_projects_source'),
    ('audit_events', 'gitlab_dotcom_audit_events_source'),
    ('audit_event_details_clean', 'prep_audit_event_details_clean'),
    ('users', 'prep_user')
]) }},

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND {{ filter_out_blocked_users('members_source', 'user_id') }}
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    {{ get_keyed_nulls('saas_product_tiers.dim_product_tier_id') }}         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@jpeguero",
    created_date="2021-01-14",
    updated_date="2023-06-22"
) }}4f:T22ae,



WITH namespace_current AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), namespace_snapshots AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace_hist

), namespace_settings AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespace_settings_source

), namespace_lineage_historical AS (

    SELECT * 
    FROM "PREP".preparation.gitlab_dotcom_namespace_lineage_historical_daily

), map_namespace_internal AS (

    SELECT * 
    FROM "PROD".common_mapping.map_namespace_internal

), plans AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_plans_source

), product_tiers AS (

    SELECT * 
    FROM "PROD".common_prep.prep_product_tier

), members_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), projects_source AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_projects_source

), audit_events AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_audit_events_source

), audit_event_details_clean AS (

    SELECT * 
    FROM "PROD".common_prep.prep_audit_event_details_clean

), users AS (

    SELECT * 
    FROM "PROD".common_prep.prep_user

),

members AS (

  SELECT
    source_id,
    COUNT(DISTINCT member_id) AS member_count
  FROM members_source
  WHERE is_currently_valid = TRUE
    AND member_source_type = 'Namespace'
    AND NOT EXISTS (

        SELECT 1
        FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source users_source
        WHERE users_source.state = 'blocked' 
          AND users_source.user_id = members_source.user_id

    )
  GROUP BY 1

),

projects AS (

  SELECT
    namespace_id,
    COUNT(DISTINCT project_id) AS project_count
  FROM projects_source
  GROUP BY 1

),

creators AS (

  SELECT
    author_id AS creator_id,
    entity_id AS group_id
  FROM audit_events
  INNER JOIN audit_event_details_clean
    ON audit_events.audit_event_id = audit_event_details_clean.audit_event_id
  WHERE entity_type = 'Group'
    AND key_name = 'add'
    AND key_value = 'group'
  GROUP BY 1, 2

),

namespace_lineage AS (

  SELECT
    namespace_lineage_historical.*,
    IFF(ROW_NUMBER() OVER (
      PARTITION BY namespace_lineage_historical.namespace_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC) = 1,
      TRUE, FALSE)     AS is_current,
    IFF(namespace_lineage_historical.snapshot_day = CURRENT_DATE,
      TRUE, FALSE)     AS ultimate_parent_is_current,
    plans.plan_title   AS ultimate_parent_plan_title,
    plans.plan_is_paid AS ultimate_parent_plan_is_paid,
    plans.plan_name    AS ultimate_parent_plan_name
  FROM namespace_lineage_historical
  INNER JOIN plans
    ON namespace_lineage_historical.ultimate_parent_plan_id = plans.plan_id
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespace_lineage_historical.namespace_id,
        namespace_lineage_historical.parent_id,
        namespace_lineage_historical.ultimate_parent_id
      ORDER BY namespace_lineage_historical.snapshot_day DESC
    ) = 1

),

namespaces AS (

  SELECT
    namespace_snapshots.*,
    IFF(namespace_current.namespace_id IS NOT NULL,
      TRUE, FALSE) AS is_current
  FROM namespace_snapshots
  LEFT JOIN namespace_current
    ON namespace_snapshots.dim_namespace_id = namespace_current.namespace_id

),

joined AS (

  SELECT
    namespaces.dim_namespace_id,
    COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id)                                          AS ultimate_parent_namespace_id,
    IFF(namespaces.dim_namespace_id = COALESCE(namespace_lineage.ultimate_parent_id,
      namespaces.parent_id,
      namespaces.dim_namespace_id),
      TRUE, FALSE)                                                          AS namespace_is_ultimate_parent,
    IFF(map_namespace_internal.ultimate_parent_namespace_id IS NOT NULL,
      TRUE, FALSE)                                                          AS namespace_is_internal,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_name
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_name,
    CASE
      WHEN namespaces.visibility_level = 'public'
        OR namespace_is_internal THEN namespace_path
      WHEN namespaces.visibility_level = 'internal' THEN 'internal - masked'
      WHEN namespaces.visibility_level = 'private' THEN 'private - masked'
    END                                                                     AS namespace_path,
    namespaces.owner_id,
    namespaces.namespace_type                                               AS namespace_type,
    namespaces.has_avatar,
    namespaces.namespace_created_at                                         AS created_at,
    namespaces.namespace_updated_at                                         AS updated_at,
    namespaces.is_membership_locked,
    namespaces.has_request_access_enabled,
    namespaces.has_share_with_group_locked,
    namespace_settings.is_setup_for_company,
    namespaces.visibility_level,
    namespaces.ldap_sync_status,
    namespaces.ldap_sync_error,
    namespaces.ldap_sync_last_update_at,
    namespaces.ldap_sync_last_successful_update_at,
    namespaces.ldap_sync_last_sync_at,
    namespaces.lfs_enabled,
    namespaces.parent_id,
    namespaces.shared_runners_enabled,
    namespaces.shared_runners_minutes_limit,
    namespaces.extra_shared_runners_minutes_limit,
    namespaces.repository_size_limit,
    namespaces.does_require_two_factor_authentication,
    namespaces.two_factor_grace_period,
    namespaces.project_creation_level,
    namespaces.push_rule_id,
    IFNULL(creators.creator_id, namespaces.owner_id)                        AS creator_id,
    IFNULL(users.is_blocked_user, FALSE)                                    AS namespace_creator_is_blocked,
    namespace_lineage.ultimate_parent_plan_id                               AS gitlab_plan_id,
    namespace_lineage.ultimate_parent_plan_title                            AS gitlab_plan_title,
    namespace_lineage.ultimate_parent_plan_is_paid                          AS gitlab_plan_is_paid,
    

  COALESCE(saas_product_tiers.dim_product_tier_id, MD5(-1)) 

         AS dim_product_tier_id,
    namespace_lineage.seats                                                 AS gitlab_plan_seats,
    namespace_lineage.seats_in_use                                          AS gitlab_plan_seats_in_use,
    namespace_lineage.max_seats_used                                        AS gitlab_plan_max_seats_used,
    IFNULL(members.member_count, 0)                                         AS namespace_member_count,
    IFNULL(projects.project_count, 0)                                       AS namespace_project_count,
    namespace_settings.code_suggestions                                     AS has_code_suggestions_enabled,
    IFNULL(namespaces.is_current AND namespace_lineage.is_current, FALSE)   AS is_currently_valid
  FROM namespaces
  LEFT JOIN namespace_lineage
    ON namespaces.dim_namespace_id = namespace_lineage.namespace_id
      AND IFNULL(namespaces.parent_id, namespaces.dim_namespace_id) = IFNULL(namespace_lineage.parent_id, namespace_lineage.namespace_id)
  LEFT JOIN namespace_settings
    ON namespaces.dim_namespace_id = namespace_settings.namespace_id
  LEFT JOIN members
    ON namespaces.dim_namespace_id = members.source_id
  LEFT JOIN projects
    ON namespaces.dim_namespace_id = projects.namespace_id
  LEFT JOIN creators
    ON namespaces.dim_namespace_id = creators.group_id
  LEFT JOIN users
    ON creators.creator_id = users.dim_user_id
  LEFT JOIN map_namespace_internal
    ON namespace_lineage.ultimate_parent_id = map_namespace_internal.ultimate_parent_namespace_id
  LEFT JOIN product_tiers saas_product_tiers
    ON saas_product_tiers.product_deployment_type = 'GitLab.com'
      AND namespace_lineage.ultimate_parent_plan_name = LOWER(IFF(saas_product_tiers.product_tier_name_short != 'Trial: Ultimate',
        saas_product_tiers.product_tier_historical_short,
        'ultimate_trial'))
  QUALIFY ROW_NUMBER() OVER (
      PARTITION BY
        namespaces.dim_namespace_id,
        namespaces.parent_id,
        namespace_lineage.ultimate_parent_id
      ORDER BY namespaces.namespace_updated_at DESC
    ) = 1

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-14'::DATE        AS model_created_date,
      '2023-06-22'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joinedc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.prep_namespace"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"prep_namespace"}],["$","small",null,{"children":"table"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","product",{"children":[["$","code",null,{"children":["$","a",null,{"children":"product"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"table"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PROD.common_prep.prep_namespace"}]]}]]]}]}],["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl","0",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"Approximate size of the table as reported by Snowflake","className":"detail-label","children":"Approximate Size"}],["$","dd",null,{"className":"detail-value","children":"3 GB"}]]}],null,["$","dl","2",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"The timestamp for last update/change","className":"detail-label","children":"Last Modified"}],["$","dd",null,{"className":"detail-value","children":"2023-07-10 12:40UTC"}]]}],["$","dl","3",{"className":"detail","children":[["$","dt",null,{"data-toggle":"tooltip","title":"An approximate count of rows in this table","className":"detail-label","children":"Row Count"}],["$","dd",null,{"className":"detail-value","children":-1}]]}]]}]}]]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"Includes all columns from the namespaces base model. The plan columns in this table (gitlab_plan_id, gitlab_plan_title, gitlab_plan_is_paid) reference the plan that is inheritted from the namespace's ultimate parent.\n\nThis table add a count of members and projects currently associated with the namespace.\nBoolean columns: gitlab_plan_is_paid, namespace_is_internal, namespace_is_ultimate_parent\n\nA NULL namespace type defaults to \"Individual\".\nThis table joins to common product tier dimension via dim_product_tier_id to get the current product tier."}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_NAMESPACE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_IS_ULTIMATE_PARENT":{"type":"BOOLEAN","index":3,"name":"namespace_is_ultimate_parent","comment":null,"description":"Boolean flag which is set to True if the namespace is the ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_ultimate_parent"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":4,"name":"namespace_is_internal","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_internal"},"NAMESPACE_NAME":{"type":"TEXT","index":5,"name":"namespace_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":6,"name":"namespace_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":7,"name":"owner_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":8,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":9,"name":"has_avatar","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_avatar"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":12,"name":"is_membership_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":13,"name":"has_request_access_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":14,"name":"has_share_with_group_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_share_with_group_locked"},"IS_SETUP_FOR_COMPANY":{"type":"BOOLEAN","index":15,"name":"IS_SETUP_FOR_COMPANY","comment":null,"display_name":"is_setup_for_company"},"VISIBILITY_LEVEL":{"type":"TEXT","index":16,"name":"visibility_level","comment":null,"description":"The visibility setting for the namespace or project: public, private, or internal. More information about namespace and project visibility [here](https://docs.gitlab.com/ee/user/public_access.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":17,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":18,"name":"ldap_sync_error","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"ldap_sync_last_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"ldap_sync_last_successful_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"ldap_sync_last_sync_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":22,"name":"lfs_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":23,"name":"parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":24,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":25,"name":"shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":26,"name":"extra_shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":27,"name":"repository_size_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":28,"name":"does_require_two_factor_authentication","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":29,"name":"two_factor_grace_period","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":30,"name":"project_creation_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":31,"name":"push_rule_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"push_rule_id"},"CREATOR_ID":{"type":"NUMBER","index":32,"name":"creator_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"creator_id"},"NAMESPACE_CREATOR_IS_BLOCKED":{"type":"BOOLEAN","index":33,"name":"namespace_creator_is_blocked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_creator_is_blocked"},"GITLAB_PLAN_ID":{"type":"NUMBER","index":34,"name":"gitlab_plan_id","comment":null,"description":"The `plan_id` associated with the namespace's _GitLab_ subscription. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_id"},"GITLAB_PLAN_TITLE":{"type":"TEXT","index":35,"name":"gitlab_plan_title","comment":null,"description":"The `plan_title` associated with the namespace's _GitLab_ subscription. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_title"},"GITLAB_PLAN_IS_PAID":{"type":"BOOLEAN","index":36,"name":"gitlab_plan_is_paid","comment":null,"description":"Indicates whether or not the namespace is subscribed to a paid plan. This can be inherited from the namespace's ultimate parent. `NULL` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_is_paid"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":37,"name":"dim_product_tier_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id"},"GITLAB_PLAN_SEATS":{"type":"NUMBER","index":38,"name":"gitlab_plan_seats","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_seats"},"GITLAB_PLAN_SEATS_IN_USE":{"type":"NUMBER","index":39,"name":"gitlab_plan_seats_in_use","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_seats_in_use"},"GITLAB_PLAN_MAX_SEATS_USED":{"type":"NUMBER","index":40,"name":"gitlab_plan_max_seats_used","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_plan_max_seats_used"},"NAMESPACE_MEMBER_COUNT":{"type":"NUMBER","index":41,"name":"namespace_member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_member_count"},"NAMESPACE_PROJECT_COUNT":{"type":"NUMBER","index":42,"name":"NAMESPACE_PROJECT_COUNT","comment":null,"display_name":"namespace_project_count"},"HAS_CODE_SUGGESTIONS_ENABLED":{"type":"BOOLEAN","index":43,"name":"has_code_suggestions_enabled","comment":null,"description":"Boolean flag set to True if the namespace has code suggestions enabled. This appears as `code_suggestions` in the gitlab.com db `namespace_settings` table.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_code_suggestions_enabled"},"IS_CURRENTLY_VALID":{"type":"BOOLEAN","index":44,"name":"is_currently_valid","comment":null,"description":"Flags whether the namespace is currently valid. `FALSE` if the namespace has been deleted.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"is_currently_valid"},"CREATED_BY":{"type":"TEXT","index":45,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":46,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":47,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":48,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":49,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":50,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"namespace_created_at":{"name":"namespace_created_at","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_created_at"},"namespace_updated_at":{"name":"namespace_updated_at","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_updated_at"},"dap_sync_status":{"name":"dap_sync_status","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dap_sync_status"},"current_project_count":{"name":"current_project_count","description":"The number of projects that are presently associated with the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_project_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:40UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2699501568,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_namespace","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.filter_out_blocked_users","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.prep_namespace_hist","model.gitlab_snowflake.prep_namespace_hist","model.gitlab_snowflake.gitlab_dotcom_namespace_settings_source","model.gitlab_snowflake.gitlab_dotcom_namespace_settings_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_audit_events_source","model.gitlab_snowflake.gitlab_dotcom_audit_events_source","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_audit_event_details_clean","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_namespace"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_namespace.sql","original_file_path":"models/common_prep/prep_namespace.sql","name":"prep_namespace","alias":"prep_namespace","checksum":{"name":"sha256","checksum":"41dc2b8ac8a4f3a99595d23a39b60f3ed05ba69d14805879b5fdd176d1f7736e"},"tags":["product"],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["prep_namespace_hist"],["prep_namespace_hist"],["gitlab_dotcom_namespace_settings_source"],["gitlab_dotcom_namespace_settings_source"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["map_namespace_internal"],["map_namespace_internal"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_product_tier"],["prep_product_tier"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_audit_events_source"],["gitlab_dotcom_audit_events_source"],["prep_audit_event_details_clean"],["prep_audit_event_details_clean"],["prep_user"],["prep_user"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"Includes all columns from the namespaces base model. The plan columns in this table (gitlab_plan_id, gitlab_plan_title, gitlab_plan_is_paid) reference the plan that is inheritted from the namespace's ultimate parent.\n\nThis table add a count of members and projects currently associated with the namespace.\nBoolean columns: gitlab_plan_is_paid, namespace_is_internal, namespace_is_ultimate_parent\n\nA NULL namespace type defaults to \"Individual\".\nThis table joins to common product tier dimension via dim_product_tier_id to get the current product tier.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_namespace.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033756.4780283,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_namespace","label":"prep_namespace"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BDG_MARKETING_CONTACT_ROLE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"ID for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"USER_ID":{"type":"NUMBER","index":3,"name":"user_id","comment":null,"description":"GitLab.com user id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_id"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":4,"name":"customer_db_customer_id","comment":null,"description":"Customer DB customer id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"NAMESPACE_ID":{"type":"NUMBER","index":5,"name":"namespace_id","comment":null,"description":"Gitlab.com namespace id associated to the user_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"ZUORA_BILLING_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"zuora_billing_account_id","comment":null,"description":"Zuora billing account id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_billing_account_id"},"MARKETING_CONTACT_ROLE":{"type":"TEXT","index":7,"name":"marketing_contact_role","comment":null,"description":"Role of the marketing contact. A marketing contact can have many roles. Could be 'Personal Namespace Owner', Group Namespace Owner', 'Group Namespace Member', 'Group Namespace Maintainer', 'Customer DB Owner', 'Zuora Billing Contact'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketing_contact_role"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:33UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":814894080,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_marketing_contact_role","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","bdg_marketing_contact_role"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/bdg_marketing_contact_role.sql","original_file_path":"models/common/sensitive/bdg_marketing_contact_role.sql","name":"bdg_marketing_contact_role","alias":"bdg_marketing_contact_role","checksum":{"name":"sha256","checksum":"e555905c1956abb5024b7a48afbad97f4bc0ee59f3e012af876674204fed8088"},"tags":[],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_account_source"],["zuora_account_source"],["zuora_contact_source"],["zuora_contact_source"],["dim_marketing_contact"],["dim_marketing_contact"],["prep_namespace"],["prep_namespace"]],"sources":[],"metrics":[],"description":"A bridge table that lists all roles for the marketing contacts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/bdg_marketing_contact_role.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.216212,"compiled_sql":"$14","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bdg_marketing_contact_role","label":"bdg_marketing_contact_role"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BDG_MARKETING_CONTACT_ORDER","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"ID for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_marketing_contact_id"},"MARKETING_CONTACT_ROLE":{"type":"TEXT","index":2,"name":"MARKETING_CONTACT_ROLE","comment":null,"display_name":"marketing_contact_role"},"EMAIL_ADDRESS":{"type":"TEXT","index":3,"name":"email_address","comment":null,"description":"Email address for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"dim_namespace_id","comment":null,"description":"Namespace id associated to the user_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"NAMESPACE_PATH":{"type":"TEXT","index":5,"name":"namespace_path","comment":null,"description":"Namespace path associated to the user","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"IS_ULTIMATE_PARENT_NAMESPACE":{"type":"BOOLEAN","index":6,"name":"IS_ULTIMATE_PARENT_NAMESPACE","comment":null,"display_name":"is_ultimate_parent_namespace"},"IS_INDIVIDUAL_NAMESPACE":{"type":"NUMBER","index":7,"name":"is_individual_namespace","comment":null,"description":"Flags if the namespace id is individual (and not a group)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_individual_namespace"},"IS_GROUP_NAMESPACE":{"type":"NUMBER","index":8,"name":"is_group_namespace","comment":null,"description":"Flags if the namespace id a group","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_group_namespace"},"IS_SETUP_FOR_COMPANY":{"type":"BOOLEAN","index":9,"name":"IS_SETUP_FOR_COMPANY","comment":null,"display_name":"is_setup_for_company"},"DOES_NAMESPACE_HAVE_PUBLIC_PROJECT":{"type":"BOOLEAN","index":10,"name":"DOES_NAMESPACE_HAVE_PUBLIC_PROJECT","comment":null,"display_name":"does_namespace_have_public_project"},"DOES_FREE_NAMESPACE_HAVE_PUBLIC_PROJECT":{"type":"BOOLEAN","index":11,"name":"DOES_FREE_NAMESPACE_HAVE_PUBLIC_PROJECT","comment":null,"display_name":"does_free_namespace_have_public_project"},"IS_ULTIMATE_PARENT_NAMESPACE_PUBLIC":{"type":"BOOLEAN","index":12,"name":"IS_ULTIMATE_PARENT_NAMESPACE_PUBLIC","comment":null,"display_name":"is_ultimate_parent_namespace_public"},"IS_ULTIMATE_PARENT_NAMESPACE_PRIVATE":{"type":"BOOLEAN","index":13,"name":"IS_ULTIMATE_PARENT_NAMESPACE_PRIVATE","comment":null,"display_name":"is_ultimate_parent_namespace_private"},"CUSTOMER_ID":{"type":"NUMBER","index":14,"name":"customer_id","comment":null,"description":"Customer DB customer id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":15,"name":"dim_billing_account_id","comment":null,"description":"zuora billing account id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":16,"name":"dim_subscription_id","comment":null,"description":"zuora subscription id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":17,"name":"subscription_start_date","comment":null,"description":"zuora subscription start date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":18,"name":"subscription_end_date","comment":null,"description":"zuora subscription end date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SAAS_PRODUCT_TIER":{"type":"TEXT","index":19,"name":"saas_product_tier","comment":null,"description":"Product tier name if it is SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_product_tier"},"SELF_MANAGED_PRODUCT_TIER":{"type":"TEXT","index":20,"name":"self_managed_product_tier","comment":null,"description":"Product tier name if it is Self-Managed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"self_managed_product_tier"},"IS_SAAS_TRIAL":{"type":"NUMBER","index":21,"name":"is_saas_trial","comment":null,"description":"Flags if it is a SaaS trial","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_trial"},"TRIAL_END_DATE":{"type":"DATE","index":22,"name":"trial_end_date","comment":null,"description":"Date the SaaS trial expires.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"trial_end_date"},"DAYS_SINCE_SAAS_TRIAL_ENDED":{"type":"NUMBER","index":23,"name":"days_since_saas_trial_ended","comment":null,"description":"Number of days since SaaS trial expired.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_trial_ended"},"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET":{"type":"TEXT","index":24,"name":"DAYS_SINCE_SAAS_TRIAL_ENDED_BUCKET","comment":null,"display_name":"days_since_saas_trial_ended_bucket"},"DAYS_UNTIL_SAAS_TRIAL_ENDS":{"type":"NUMBER","index":25,"name":"days_until_saas_trial_ends","comment":null,"description":"Number of days until SaaS trial expires.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_until_saas_trial_ends"},"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET":{"type":"TEXT","index":26,"name":"DAYS_UNTIL_SAAS_TRIAL_ENDS_BUCKET","comment":null,"display_name":"days_until_saas_trial_ends_bucket"},"IS_SAAS_FREE_TIER":{"type":"NUMBER","index":27,"name":"is_saas_free_tier","comment":null,"description":"Flags if product tier is SaaS free.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_free_tier"},"IS_SAAS_BRONZE_TIER":{"type":"NUMBER","index":28,"name":"is_saas_bronze_tier","comment":null,"description":"Flags if product tier is SaaS bronze.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_bronze_tier"},"IS_SAAS_PREMIUM_TIER":{"type":"NUMBER","index":29,"name":"is_saas_premium_tier","comment":null,"description":"Flags if product tier is SaaS premium.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_premium_tier"},"IS_SAAS_ULTIMATE_TIER":{"type":"NUMBER","index":30,"name":"is_saas_ultimate_tier","comment":null,"description":"Flags if product tier is SaaS ultimate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_saas_ultimate_tier"},"IS_SELF_MANAGED_STARTER_TIER":{"type":"NUMBER","index":31,"name":"is_self_managed_starter_tier","comment":null,"description":"Flags if product tier is Self-Managed starter.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_starter_tier"},"IS_SELF_MANAGED_PREMIUM_TIER":{"type":"NUMBER","index":32,"name":"is_self_managed_premium_tier","comment":null,"description":"Flags if product tier is Self_Managed premium.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_premium_tier"},"IS_SELF_MANAGED_ULTIMATE_TIER":{"type":"NUMBER","index":33,"name":"is_self_managed_ultimate_tier","comment":null,"description":"Flags if product tier is Self-Managed ultimate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_self_managed_ultimate_tier"},"USAGE_UMAU_28_DAYS_USER":{"type":"NUMBER","index":34,"name":"USAGE_UMAU_28_DAYS_USER","comment":null,"display_name":"usage_umau_28_days_user"},"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER":{"type":"NUMBER","index":35,"name":"USAGE_ACTION_MONTHLY_ACTIVE_USERS_PROJECT_REPO_28_DAYS_USER","comment":null,"display_name":"usage_action_monthly_active_users_project_repo_28_days_user"},"USAGE_MERGE_REQUESTS_28_DAYS_USER":{"type":"NUMBER","index":36,"name":"USAGE_MERGE_REQUESTS_28_DAYS_USER","comment":null,"display_name":"usage_merge_requests_28_days_user"},"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT":{"type":"NUMBER","index":37,"name":"USAGE_COMMIT_COMMENT_ALL_TIME_EVENT","comment":null,"display_name":"usage_commit_comment_all_time_event"},"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT":{"type":"NUMBER","index":38,"name":"USAGE_SOURCE_CODE_PUSHES_ALL_TIME_EVENT","comment":null,"display_name":"usage_source_code_pushes_all_time_event"},"USAGE_CI_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":39,"name":"USAGE_CI_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipelines_28_days_user"},"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER":{"type":"NUMBER","index":40,"name":"USAGE_CI_INTERNAL_PIPELINES_28_DAYS_USER","comment":null,"display_name":"usage_ci_internal_pipelines_28_days_user"},"USAGE_CI_BUILDS_28_DAYS_USER":{"type":"NUMBER","index":41,"name":"USAGE_CI_BUILDS_28_DAYS_USER","comment":null,"display_name":"usage_ci_builds_28_days_user"},"USAGE_CI_BUILDS_ALL_TIME_USER":{"type":"NUMBER","index":42,"name":"USAGE_CI_BUILDS_ALL_TIME_USER","comment":null,"display_name":"usage_ci_builds_all_time_user"},"USAGE_CI_BUILDS_ALL_TIME_EVENT":{"type":"NUMBER","index":43,"name":"USAGE_CI_BUILDS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_builds_all_time_event"},"USAGE_CI_RUNNERS_ALL_TIME_EVENT":{"type":"NUMBER","index":44,"name":"USAGE_CI_RUNNERS_ALL_TIME_EVENT","comment":null,"display_name":"usage_ci_runners_all_time_event"},"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT":{"type":"NUMBER","index":45,"name":"USAGE_AUTO_DEVOPS_ENABLED_ALL_TIME_EVENT","comment":null,"display_name":"usage_auto_devops_enabled_all_time_event"},"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT":{"type":"NUMBER","index":46,"name":"USAGE_TEMPLATE_REPOSITORIES_ALL_TIME_EVENT","comment":null,"display_name":"usage_template_repositories_all_time_event"},"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER":{"type":"NUMBER","index":47,"name":"USAGE_CI_PIPELINE_CONFIG_REPOSITORY_28_DAYS_USER","comment":null,"display_name":"usage_ci_pipeline_config_repository_28_days_user"},"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER":{"type":"NUMBER","index":48,"name":"USAGE_USER_UNIQUE_USERS_ALL_SECURE_SCANNERS_28_DAYS_USER","comment":null,"display_name":"usage_user_unique_users_all_secure_scanners_28_days_user"},"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":49,"name":"USAGE_USER_CONTAINER_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_container_scanning_jobs_28_days_user"},"USAGE_USER_SAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":50,"name":"USAGE_USER_SAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_sast_jobs_28_days_user"},"USAGE_USER_DAST_JOBS_28_DAYS_USER":{"type":"NUMBER","index":51,"name":"USAGE_USER_DAST_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dast_jobs_28_days_user"},"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER":{"type":"NUMBER","index":52,"name":"USAGE_USER_DEPENDENCY_SCANNING_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_dependency_scanning_jobs_28_days_user"},"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER":{"type":"NUMBER","index":53,"name":"USAGE_USER_LICENSE_MANAGEMENT_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_license_management_jobs_28_days_user"},"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER":{"type":"NUMBER","index":54,"name":"USAGE_USER_SECRET_DETECTION_JOBS_28_DAYS_USER","comment":null,"display_name":"usage_user_secret_detection_jobs_28_days_user"},"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT":{"type":"NUMBER","index":55,"name":"USAGE_PROJECTS_WITH_PACKAGES_ALL_TIME_EVENT","comment":null,"display_name":"usage_projects_with_packages_all_time_event"},"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT":{"type":"NUMBER","index":56,"name":"USAGE_PROJECTS_WITH_PACKAGES_28_DAYS_EVENT","comment":null,"display_name":"usage_projects_with_packages_28_days_event"},"USAGE_DEPLOYMENTS_28_DAYS_USER":{"type":"NUMBER","index":57,"name":"USAGE_DEPLOYMENTS_28_DAYS_USER","comment":null,"display_name":"usage_deployments_28_days_user"},"USAGE_RELEASES_28_DAYS_USER":{"type":"NUMBER","index":58,"name":"USAGE_RELEASES_28_DAYS_USER","comment":null,"display_name":"usage_releases_28_days_user"},"USAGE_EPICS_28_DAYS_USER":{"type":"NUMBER","index":59,"name":"USAGE_EPICS_28_DAYS_USER","comment":null,"display_name":"usage_epics_28_days_user"},"USAGE_ISSUES_28_DAYS_USER":{"type":"NUMBER","index":60,"name":"USAGE_ISSUES_28_DAYS_USER","comment":null,"display_name":"usage_issues_28_days_user"},"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED":{"type":"NUMBER","index":61,"name":"USAGE_INSTANCE_USER_COUNT_NOT_ALIGNED","comment":null,"display_name":"usage_instance_user_count_not_aligned"},"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED":{"type":"NUMBER","index":62,"name":"USAGE_HISTORICAL_MAX_USERS_NOT_ALIGNED","comment":null,"display_name":"usage_historical_max_users_not_aligned"},"CREATED_BY":{"type":"TEXT","index":63,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":64,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":65,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":66,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":67,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":68,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:49UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":989317120,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_marketing_contact_order","raw_sql":"$15","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.days_buckets","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.bdg_marketing_contact_role","model.gitlab_snowflake.bdg_marketing_contact_role","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.fct_ping_instance_metric_wave_monthly","model.gitlab_snowflake.bdg_namespace_order_subscription","model.gitlab_snowflake.bdg_namespace_order_subscription","model.gitlab_snowflake.bdg_self_managed_order_subscription","model.gitlab_snowflake.bdg_self_managed_order_subscription"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","bdg_marketing_contact_order"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/bdg_marketing_contact_order.sql","original_file_path":"models/common/sensitive/bdg_marketing_contact_order.sql","name":"bdg_marketing_contact_order","alias":"bdg_marketing_contact_order","checksum":{"name":"sha256","checksum":"e1ad79244f74f8c3d2d7508052f69696086f8beac379dc101e80d18b35914dbf"},"tags":["product"],"refs":[["dim_marketing_contact"],["dim_marketing_contact"],["bdg_marketing_contact_role"],["bdg_marketing_contact_role"],["prep_namespace"],["prep_namespace"],["prep_project"],["prep_project"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["fct_ping_instance_metric_wave_monthly"],["fct_ping_instance_metric_wave_monthly"],["bdg_namespace_order_subscription"],["bdg_namespace_order_subscription"],["bdg_self_managed_order_subscription"],["bdg_self_managed_order_subscription"]],"sources":[],"metrics":[],"description":"A bridge table that lists all the orders, subsciptions, and namespaces per role per contact.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/bdg_marketing_contact_order.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true,"tags":["product"]},"created_at":1689033756.2294703,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bdg_marketing_contact_order","label":"bdg_marketing_contact_order"},{"metadata":{"type":"BASE TABLE","schema":"DOTCOM_USAGE_EVENTS_2023_07","name":"PREP_EVENT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"EVENT_ID":{"type":"TEXT","index":1,"name":"event_id","comment":null,"description":"primary key of the table. Unique ID of the event","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_id"},"EVENT_NAME":{"type":"TEXT","index":2,"name":"EVENT_NAME","comment":null,"display_name":"event_name"},"STAGE_NAME":{"type":"TEXT","index":3,"name":"stage_name","comment":null,"description":"This field is _not_ the SSOT for the event-to-stage mapping. Please use [`map_gitlab_dotcom_xmau_metrics`](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.map_gitlab_dotcom_xmau_metrics) for the mapping of event to stage.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"stage_name"},"EVENT_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"event_created_at","comment":null,"description":"timestamp of the event","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"event_created_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":5,"name":"created_date_id","comment":null,"description":"ID of the date when the event was created","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_date_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":6,"name":"dim_project_id","comment":null,"description":"ID of the project in which the event was triggered. Can be null for events which are not tied to a project","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_project_id"},"PARENT_TYPE":{"type":"TEXT","index":7,"name":"PARENT_TYPE","comment":null,"display_name":"parent_type"},"PARENT_ID":{"type":"NUMBER","index":8,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":9,"name":"ultimate_parent_namespace_id","comment":null,"description":"ID of the ultimate parent namespace in which the event was triggered","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"PLAN_ID_AT_EVENT_TIMESTAMP":{"type":"NUMBER","index":10,"name":"plan_id_at_event_timestamp","comment":null,"description":"ID of the plan of the ultimate parent namespace when the event got triggered","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_id_at_event_timestamp"},"PLAN_NAME_AT_EVENT_TIMESTAMP":{"type":"TEXT","index":11,"name":"plan_name_at_event_timestamp","comment":null,"description":"Name of the plan of the ultimate parent namespace when the event got triggered","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_name_at_event_timestamp"},"PLAN_WAS_PAID_AT_EVENT_TIMESTAMP":{"type":"BOOLEAN","index":12,"name":"PLAN_WAS_PAID_AT_EVENT_TIMESTAMP","comment":null,"display_name":"plan_was_paid_at_event_timestamp"},"DIM_USER_ID":{"type":"NUMBER","index":13,"name":"dim_user_id","comment":null,"description":"ID of the user who triggered the event","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_user_id"},"USER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":14,"name":"user_created_at","comment":null,"description":"timestamp of the user creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_created_at"},"USER_CREATED_DATE":{"type":"DATE","index":15,"name":"USER_CREATED_DATE","comment":null,"display_name":"user_created_date"},"DAYS_SINCE_USER_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":16,"name":"days_since_user_creation_at_event_date","comment":null,"description":"number of days between the user creation and event date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_user_creation_at_event_date"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"NAMESPACE_CREATED_DATE":{"type":"DATE","index":18,"name":"NAMESPACE_CREATED_DATE","comment":null,"display_name":"namespace_created_date"},"IS_BLOCKED_NAMESPACE_CREATOR":{"type":"BOOLEAN","index":19,"name":"IS_BLOCKED_NAMESPACE_CREATOR","comment":null,"display_name":"is_blocked_namespace_creator"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":20,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"DAYS_SINCE_NAMESPACE_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":21,"name":"days_since_namespace_creation_at_event_date","comment":null,"description":"number of days between namespace creation and event date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_namespace_creation_at_event_date"},"DAYS_SINCE_PROJECT_CREATION_AT_EVENT_DATE":{"type":"NUMBER","index":22,"name":"days_since_project_creation_at_event_date","comment":null,"description":"number of days between the project creation and event date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_project_creation_at_event_date"},"PROJECT_IS_IMPORTED":{"type":"BOOLEAN","index":23,"name":"project_is_imported","comment":null,"description":"TRUE if the project was imported","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_is_imported"},"PROJECT_IS_LEARN_GITLAB":{"type":"BOOLEAN","index":24,"name":"PROJECT_IS_LEARN_GITLAB","comment":null,"display_name":"project_is_learn_gitlab"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 13:13UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4063849472,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_event","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_ci_pipeline","model.gitlab_snowflake.prep_ci_pipeline","model.gitlab_snowflake.prep_action","model.gitlab_snowflake.prep_action","model.gitlab_snowflake.prep_ci_build","model.gitlab_snowflake.prep_ci_build","model.gitlab_snowflake.prep_deployment","model.gitlab_snowflake.prep_deployment","model.gitlab_snowflake.prep_epic","model.gitlab_snowflake.prep_epic","model.gitlab_snowflake.prep_issue","model.gitlab_snowflake.prep_issue","model.gitlab_snowflake.prep_merge_request","model.gitlab_snowflake.prep_merge_request","model.gitlab_snowflake.prep_note","model.gitlab_snowflake.prep_note","model.gitlab_snowflake.prep_package","model.gitlab_snowflake.prep_package","model.gitlab_snowflake.prep_release","model.gitlab_snowflake.prep_release","model.gitlab_snowflake.prep_requirement","model.gitlab_snowflake.prep_requirement","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.dim_project","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.prep_ci_stage","model.gitlab_snowflake.prep_ci_stage","model.gitlab_snowflake.prep_todo","model.gitlab_snowflake.prep_todo","model.gitlab_snowflake.prep_resource_label","model.gitlab_snowflake.prep_resource_label","model.gitlab_snowflake.prep_environment_event","model.gitlab_snowflake.prep_environment_event","model.gitlab_snowflake.prep_resource_milestone","model.gitlab_snowflake.prep_resource_milestone","model.gitlab_snowflake.prep_labels","model.gitlab_snowflake.prep_labels","model.gitlab_snowflake.prep_ci_artifact","model.gitlab_snowflake.prep_ci_artifact","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_user","model.gitlab_snowflake.prep_board","model.gitlab_snowflake.prep_board","model.gitlab_snowflake.prep_project_auto_devops","model.gitlab_snowflake.prep_project_auto_devops","model.gitlab_snowflake.prep_service","model.gitlab_snowflake.prep_service","model.gitlab_snowflake.prep_issue_resource_weight","model.gitlab_snowflake.prep_issue_resource_weight","model.gitlab_snowflake.prep_milestone","model.gitlab_snowflake.prep_milestone","model.gitlab_snowflake.prep_ci_pipeline_schedule","model.gitlab_snowflake.prep_ci_pipeline_schedule","model.gitlab_snowflake.prep_snippet","model.gitlab_snowflake.prep_snippet","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_ci_trigger","model.gitlab_snowflake.prep_ci_trigger","model.gitlab_snowflake.prep_cluster_agent","model.gitlab_snowflake.prep_cluster_agent"]},"config":{"enabled":true,"alias":null,"schema":"dotcom_usage_events_2023_07","database":"PREP","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"dotcom_usage_events_2023_07","fqn":["gitlab_snowflake","common_prep","month_partition","dotcom_usage_events","prep_event"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/month_partition/dotcom_usage_events/prep_event.sql","original_file_path":"models/common_prep/month_partition/dotcom_usage_events/prep_event.sql","name":"prep_event","alias":"prep_event","checksum":{"name":"sha256","checksum":"c4223db7958475a1de86952faa59632fcc15653cc6cdf07a7bf1975e307aa3b8"},"tags":["product"],"refs":[["prep_ci_pipeline"],["prep_ci_pipeline"],["prep_action"],["prep_action"],["prep_ci_build"],["prep_ci_build"],["prep_deployment"],["prep_deployment"],["prep_epic"],["prep_epic"],["prep_issue"],["prep_issue"],["prep_merge_request"],["prep_merge_request"],["prep_note"],["prep_note"],["prep_package"],["prep_package"],["prep_release"],["prep_release"],["prep_requirement"],["prep_requirement"],["dim_project"],["dim_project"],["prep_namespace"],["prep_namespace"],["prep_user"],["prep_user"],["prep_gitlab_dotcom_plan"],["prep_gitlab_dotcom_plan"],["prep_namespace_plan_hist"],["prep_namespace_plan_hist"],["prep_ci_stage"],["prep_ci_stage"],["prep_todo"],["prep_todo"],["prep_resource_label"],["prep_resource_label"],["prep_environment_event"],["prep_environment_event"],["prep_resource_milestone"],["prep_resource_milestone"],["prep_labels"],["prep_labels"],["prep_ci_artifact"],["prep_ci_artifact"],["prep_user"],["prep_user"],["prep_board"],["prep_board"],["prep_project_auto_devops"],["prep_project_auto_devops"],["prep_service"],["prep_service"],["prep_issue_resource_weight"],["prep_issue_resource_weight"],["prep_milestone"],["prep_milestone"],["prep_ci_pipeline_schedule"],["prep_ci_pipeline_schedule"],["prep_snippet"],["prep_snippet"],["prep_project"],["prep_project"],["prep_ci_trigger"],["prep_ci_trigger"],["prep_cluster_agent"],["prep_cluster_agent"]],"sources":[],"metrics":[],"description":"$18","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/month_partition/dotcom_usage_events/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/month_partition/dotcom_usage_events/prep_event.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"dotcom_usage_events_{{ var('year', (run_started_at - modules.datetime.timedelta(2)).strftime('%Y')) }}_{{ var('month', (run_started_at - modules.datetime.timedelta(2)).strftime('%m')) }}","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033757.871485,"compiled_sql":"$19","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".dotcom_usage_events_2023_07.prep_event","label":"prep_event"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_EPIC_USER_REQUEST","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_EPIC_ID":{"type":"NUMBER","index":1,"name":"dim_epic_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_epic_id"},"LINK_TYPE":{"type":"TEXT","index":2,"name":"LINK_TYPE","comment":null,"display_name":"link_type"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":3,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"DIM_TICKET_ID":{"type":"NUMBER","index":5,"name":"DIM_TICKET_ID","comment":null,"display_name":"dim_ticket_id"},"REQUEST_PRIORITY":{"type":"NUMBER","index":6,"name":"REQUEST_PRIORITY","comment":null,"display_name":"request_priority"},"IS_REQUEST_PRIORITY_EMPTY":{"type":"BOOLEAN","index":7,"name":"IS_REQUEST_PRIORITY_EMPTY","comment":null,"display_name":"is_request_priority_empty"},"LINK_LAST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"LINK_LAST_UPDATED_AT","comment":null,"display_name":"link_last_updated_at"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"CONCAT(dim_epic_id, dim_crm_account_id, dim_crm_opportunity_id, dim_ticket_id)":{"name":"CONCAT(dim_epic_id, dim_crm_account_id, dim_crm_opportunity_id, dim_ticket_id)","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"CONCAT(dim_epic_id, dim_crm_account_id, dim_crm_opportunity_id, dim_ticket_id)"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":376320,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_epic_user_request","raw_sql":"$1a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_epics_source","model.gitlab_snowflake.gitlab_dotcom_epics_source","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.zendesk_tickets_source","model.gitlab_snowflake.zendesk_tickets_source","model.gitlab_snowflake.zendesk_organizations_source","model.gitlab_snowflake.zendesk_organizations_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.gitlab_dotcom_notes_source","model.gitlab_snowflake.gitlab_dotcom_notes_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_epic_user_request"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_epic_user_request.sql","original_file_path":"models/common_prep/prep_epic_user_request.sql","name":"prep_epic_user_request","alias":"prep_epic_user_request","checksum":{"name":"sha256","checksum":"498ccfffad998ef744ae4e01a6b8497e784f880e9e7e85c5facfc35dca169e97"},"tags":["mnpi_exception"],"refs":[["gitlab_dotcom_epics_source"],["gitlab_dotcom_epics_source"],["map_namespace_internal"],["map_namespace_internal"],["prep_namespace"],["prep_namespace"],["zendesk_tickets_source"],["zendesk_tickets_source"],["zendesk_organizations_source"],["zendesk_organizations_source"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["gitlab_dotcom_notes_source"],["gitlab_dotcom_notes_source"]],"sources":[],"metrics":[],"description":" Parses SFDC Opportunity / Accounts and Zendesk tickets links in the description and notes of epics inside the `Gitlab-org` group, together with its priority represented by the label `~\"customer priority::[0-10]\"` . These epics are related to user feature requests from the product.\n\nFor Opportunity and Zendesk tickets links found, the associated SFDC Account id is filled into the record.\n\nIf the same link is found twice in the description and the notes of the same epic, then the link that will be taken, together with its priority, will be the one in the note. If the same link is found in two different notes in the same epic, then the link that will be taken, together with its priority, will be the one in the latest updated note.\n\nThis model assumes that only one priority is placed in a given description or note. ","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_epic_user_request.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.421237,"compiled_sql":"$1b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_epic_user_request","label":"prep_epic_user_request"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PTPT_SCORES_BY_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"Unique identifier for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_marketing_contact_id"},"NAMESPACE_ID":{"type":"TEXT","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"SCORE":{"type":"NUMBER","index":3,"name":"SCORE","comment":null,"display_name":"score"},"SCORE_GROUP":{"type":"NUMBER","index":4,"name":"SCORE_GROUP","comment":null,"display_name":"score_group"},"INSIGHTS":{"type":"TEXT","index":5,"name":"INSIGHTS","comment":null,"display_name":"insights"},"SCORE_DATE":{"type":"DATE","index":6,"name":"SCORE_DATE","comment":null,"display_name":"score_date"},"PAST_INSIGHTS":{"type":"TEXT","index":7,"name":"PAST_INSIGHTS","comment":null,"display_name":"past_insights"},"PAST_SCORE_GROUP":{"type":"NUMBER","index":8,"name":"PAST_SCORE_GROUP","comment":null,"display_name":"past_score_group"},"PAST_SCORE_DATE":{"type":"DATE","index":9,"name":"PAST_SCORE_DATE","comment":null,"display_name":"past_score_date"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2003456,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ptpt_scores_by_user","raw_sql":"$1c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.ptpt_scores_source","model.gitlab_snowflake.ptpt_scores_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ptpt_scores_by_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ptpt_scores_by_user.sql","original_file_path":"models/common_prep/prep_ptpt_scores_by_user.sql","name":"prep_ptpt_scores_by_user","alias":"prep_ptpt_scores_by_user","checksum":{"name":"sha256","checksum":"a7f2a02c1eb2109e750120c9dbadd3c0144d1483817cbb9c30f5fd259be87022"},"tags":[],"refs":[["ptpt_scores_source"],["ptpt_scores_source"],["prep_namespace"],["prep_namespace"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"]],"sources":[],"metrics":[],"description":"Takes the scores from ptpt_scores, transforms it to user / email address grain and uses the latest score date available.\n\nThe scores of this model are then used in mart_marketing_contact and the marketing pump to later be synced with Marketo and SFDC.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ptpt_scores_by_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.5119524,"compiled_sql":"$1d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ptpt_scores_by_user","label":"prep_ptpt_scores_by_user"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_REQUIREMENT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_REQUIREMENT_ID":{"type":"NUMBER","index":1,"name":"dim_requirement_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_requirement_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":4,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":5,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"AUTHOR_ID":{"type":"NUMBER","index":6,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"REQUIREMENT_INTERNAL_ID":{"type":"NUMBER","index":7,"name":"REQUIREMENT_INTERNAL_ID","comment":null,"display_name":"requirement_internal_id"},"REQUIREMENT_STATE_ID":{"type":"TEXT","index":8,"name":"REQUIREMENT_STATE_ID","comment":null,"display_name":"requirement_state_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":11,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":12,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":13,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":14,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":15,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":16,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1278464,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_requirement","raw_sql":"$1e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.gitlab_dotcom_requirements_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_requirements_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_requirement_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_requirement"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_requirement.sql","original_file_path":"models/common_prep/prep_requirement.sql","name":"prep_requirement","alias":"prep_requirement","checksum":{"name":"sha256","checksum":"3499d1508f2d84776f6a054453acb2aefb0cf333836105c151edd092ab85058b"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["prep_namespace_plan_hist"],["prep_namespace_plan_hist"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_namespace"],["prep_namespace"],["prep_project"],["prep_project"],["gitlab_dotcom_requirements_dedupe_source"],["gitlab_dotcom_requirements_dedupe_source"]],"sources":[],"metrics":[],"description":"Prep table for the dim table `dim_requirement` that is not yet created. It is also used in the `prep_event` table","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_requirement.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_requirement_id"},"created_at":1689033756.7056835,"compiled_sql":"$1f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_requirement","label":"prep_requirement"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_DEPLOYMENT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_DEPLOYMENT_ID":{"type":"NUMBER","index":1,"name":"dim_deployment_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_deployment_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":4,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":5,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"DIM_USER_ID":{"type":"NUMBER","index":6,"name":"DIM_USER_ID","comment":null,"display_name":"dim_user_id"},"DEPLOYMENT_INTERNAL_ID":{"type":"NUMBER","index":7,"name":"DEPLOYMENT_INTERNAL_ID","comment":null,"display_name":"deployment_internal_id"},"ENVIRONMENT_ID":{"type":"NUMBER","index":8,"name":"ENVIRONMENT_ID","comment":null,"display_name":"environment_id"},"CLUSTER_ID":{"type":"NUMBER","index":9,"name":"CLUSTER_ID","comment":null,"display_name":"cluster_id"},"DEPLOYABLE_ID":{"type":"NUMBER","index":10,"name":"DEPLOYABLE_ID","comment":null,"display_name":"deployable_id"},"DEPLOYABLE_TYPE":{"type":"TEXT","index":11,"name":"DEPLOYABLE_TYPE","comment":null,"display_name":"deployable_type"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":13,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"ON_STOP":{"type":"TEXT","index":14,"name":"ON_STOP","comment":null,"display_name":"on_stop"},"FINISHED_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"FINISHED_AT","comment":null,"display_name":"finished_at"},"STATUS_ID":{"type":"NUMBER","index":16,"name":"STATUS_ID","comment":null,"display_name":"status_id"},"CREATED_BY":{"type":"TEXT","index":17,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":18,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":19,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":20,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":21,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":22,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":19895292416,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_deployment","raw_sql":"$20","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.gitlab_dotcom_deployments_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_deployments_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_deployment_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_deployment"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_deployment.sql","original_file_path":"models/common_prep/prep_deployment.sql","name":"prep_deployment","alias":"prep_deployment","checksum":{"name":"sha256","checksum":"f1cf7684ac1520b3ee9715a8289836b8c682133a42b766797dad1a91acf97edf"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["prep_namespace_plan_hist"],["prep_namespace_plan_hist"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_namespace"],["prep_namespace"],["prep_project"],["prep_project"],["gitlab_dotcom_deployments_dedupe_source"],["gitlab_dotcom_deployments_dedupe_source"]],"sources":[],"metrics":[],"description":"Prep table for the dim table `dim_deployment` that is not yet created.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_deployment.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_deployment_id"},"created_at":1689033756.6936991,"compiled_sql":"$21","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_deployment","label":"prep_deployment"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_ORDER_HIST","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_ORDER_ID":{"type":"NUMBER","index":1,"name":"dim_order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_order_id"},"CUSTOMER_ID":{"type":"NUMBER","index":2,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID":{"type":"TEXT","index":3,"name":"product_rate_plan_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id"},"ORDER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"order_created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"order_created_at"},"ORDER_START_DATE":{"type":"DATE","index":5,"name":"ORDER_START_DATE","comment":null,"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"DATE","index":6,"name":"ORDER_END_DATE","comment":null,"display_name":"order_end_date"},"ORDER_QUANTITY":{"type":"NUMBER","index":7,"name":"ORDER_QUANTITY","comment":null,"display_name":"order_quantity"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":8,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":9,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":10,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":11,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"AMENDMENT_TYPE":{"type":"TEXT","index":13,"name":"AMENDMENT_TYPE","comment":null,"display_name":"amendment_type"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":14,"name":"ORDER_IS_TRIAL","comment":null,"display_name":"order_is_trial"},"LAST_EXTRA_CI_MINUTES_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"LAST_EXTRA_CI_MINUTES_SYNC_AT","comment":null,"display_name":"last_extra_ci_minutes_sync_at"},"INCREASED_BILLING_RATE_NOTIFIED_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"INCREASED_BILLING_RATE_NOTIFIED_AT","comment":null,"display_name":"increased_billing_rate_notified_at"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":17,"name":"valid_from","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":18,"name":"valid_to","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"valid_to"},"CREATED_BY":{"type":"TEXT","index":19,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":20,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":21,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":22,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":24,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:42UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":81267712,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_order_hist","raw_sql":"$22","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.group_by","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.customers_db_versions_source","model.gitlab_snowflake.customers_db_versions_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_subscription","model.gitlab_snowflake.dim_billing_account","model.gitlab_snowflake.dim_billing_account"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_order_hist"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_order_hist.sql","original_file_path":"models/common_prep/prep_order_hist.sql","name":"prep_order_hist","alias":"prep_order_hist","checksum":{"name":"sha256","checksum":"5337349fdf4cb47687921a21390f3df4e9c552cbc5c339ebf49821f5f9a0b08c"},"tags":["mnpi_exception"],"refs":[["customers_db_versions_source"],["customers_db_versions_source"],["customers_db_orders_source"],["customers_db_orders_source"],["dim_date"],["dim_date"],["prep_namespace"],["prep_namespace"],["dim_subscription"],["dim_subscription"],["dim_billing_account"],["dim_billing_account"]],"sources":[],"metrics":[],"description":"Table containing GitLab order snapshots.\n\nThe grain of this table is one row per order per valid_to/valid_from combination.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_order_hist.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.4845302,"compiled_sql":"$23","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_order_hist","label":"prep_order_hist"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_ISSUE_USER_REQUEST","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_ISSUE_ID":{"type":"NUMBER","index":1,"name":"dim_issue_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_issue_id"},"LINK_TYPE":{"type":"TEXT","index":2,"name":"LINK_TYPE","comment":null,"display_name":"link_type"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":3,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_crm_account_id"},"DIM_TICKET_ID":{"type":"NUMBER","index":5,"name":"DIM_TICKET_ID","comment":null,"display_name":"dim_ticket_id"},"REQUEST_PRIORITY":{"type":"NUMBER","index":6,"name":"REQUEST_PRIORITY","comment":null,"display_name":"request_priority"},"IS_REQUEST_PRIORITY_EMPTY":{"type":"BOOLEAN","index":7,"name":"IS_REQUEST_PRIORITY_EMPTY","comment":null,"display_name":"is_request_priority_empty"},"LINK_LAST_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"LINK_LAST_UPDATED_AT","comment":null,"display_name":"link_last_updated_at"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"CONCAT(dim_issue_id, dim_crm_account_id, dim_crm_opportunity_id, dim_ticket_id)":{"name":"CONCAT(dim_issue_id, dim_crm_account_id, dim_crm_opportunity_id, dim_ticket_id)","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"CONCAT(dim_issue_id, dim_crm_account_id, dim_crm_opportunity_id, dim_ticket_id)"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:31UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1161216,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_issue_user_request","raw_sql":"$24","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_keyed_nulls","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_issues_source","model.gitlab_snowflake.gitlab_dotcom_issues_source","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.zendesk_tickets_source","model.gitlab_snowflake.zendesk_tickets_source","model.gitlab_snowflake.zendesk_organizations_source","model.gitlab_snowflake.zendesk_organizations_source","model.gitlab_snowflake.map_moved_duplicated_issue","model.gitlab_snowflake.map_moved_duplicated_issue","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.gitlab_dotcom_notes_source","model.gitlab_snowflake.gitlab_dotcom_notes_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_issue_user_request"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_issue_user_request.sql","original_file_path":"models/common_prep/prep_issue_user_request.sql","name":"prep_issue_user_request","alias":"prep_issue_user_request","checksum":{"name":"sha256","checksum":"60ada74016bef7659882bf0aeb8760e4572ae7ff1c49ca6c64ab94b6edb909a7"},"tags":["mnpi_exception"],"refs":[["gitlab_dotcom_issues_source"],["gitlab_dotcom_issues_source"],["map_namespace_internal"],["map_namespace_internal"],["prep_namespace"],["prep_namespace"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["zendesk_tickets_source"],["zendesk_tickets_source"],["zendesk_organizations_source"],["zendesk_organizations_source"],["map_moved_duplicated_issue"],["map_moved_duplicated_issue"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["gitlab_dotcom_notes_source"],["gitlab_dotcom_notes_source"]],"sources":[],"metrics":[],"description":" Parses SFDC Opportunity / Accounts and Zendesk tickets links in the description and notes of issues inside the `Gitlab-org` group, together with its priority represented by the label `~\"customer priority::[0-10]\"` . These issues are related to user feature requests from the product.\n\nFor Opportunity and Zendesk tickets links found, the associated SFDC Account id is filled into the record.\n\nIf the same link is found twice in the description and the notes of the same issue, then the link that will be taken, together with its priority, will be the one in the note. If the same link is found in two different notes in the same issue, then the link that will be taken, together with its priority, will be the one in the latest updated note.\n\nThis model assumes that only one priority is placed in a given description or note. ","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_issue_user_request.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.42745,"compiled_sql":"$25","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_issue_user_request","label":"prep_issue_user_request"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_RELEASE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_RELEASE_ID":{"type":"NUMBER","index":1,"name":"dim_release_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_release_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":4,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":5,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"AUTHOR_ID":{"type":"NUMBER","index":6,"name":"AUTHOR_ID","comment":null,"display_name":"author_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":137691648,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_release","raw_sql":"$26","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.prep_namespace_plan_hist","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.gitlab_dotcom_releases_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_releases_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_release_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_release"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_release.sql","original_file_path":"models/common_prep/prep_release.sql","name":"prep_release","alias":"prep_release","checksum":{"name":"sha256","checksum":"f8b825cf46828b7d9e70574fbcd2829f83965ccccbd4459462da8acb9ec83a6e"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["prep_namespace_plan_hist"],["prep_namespace_plan_hist"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_namespace"],["prep_namespace"],["prep_project"],["prep_project"],["gitlab_dotcom_releases_dedupe_source"],["gitlab_dotcom_releases_dedupe_source"]],"sources":[],"metrics":[],"description":"Prep table for the dim table `dim_release` that is not yet created. It is also used in the `prep_event` table","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_release.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_release_id"},"created_at":1689033756.7043498,"compiled_sql":"$27","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_release","label":"prep_release"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"FCT_USAGE_STORAGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_MONTH":{"type":"DATE","index":1,"name":"snapshot_month","comment":null,"description":"Month in which Storage usage data was snapshotted, formatted as `20YY-MM-01`.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_month"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"dim_namespace_id","comment":null,"description":"ID of the namespace responsible for the Storage usage.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ultimate_parent_namespace_id","comment":null,"description":"ID of the namespace's ultimate parent namespace.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"ultimate_parent_namespace_id"},"LARGEST_REPOSITORY_SIZE_GIB":{"type":"NUMBER","index":4,"name":"largest_repository_size_gib","comment":null,"description":"Size of the namespace's largest project repository, in GiB.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"largest_repository_size_gib"},"TOTAL_FREE_STORAGE_LIMIT_GIB":{"type":"NUMBER","index":5,"name":"total_free_storage_limit_gib","comment":null,"description":"Sum of free repository level storage (10 GiB) over all repositories under the top level namespace. Since storage limits are provided in GiB, they are being reported in GiB. For certain GitLab internal namespaces this value is 0, implying **unlimited storage**.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"total_free_storage_limit_gib"},"TOTAL_PURCHASED_STORAGE_LIMIT_GIB":{"type":"NUMBER","index":6,"name":"total_purchased_storage_limit_gib","comment":null,"description":"Total extra storage purhaced across all namespaces under the top level namespace. Extra storage is currently purchased in 10 GiB increments and thus is reported in GiB.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"total_purchased_storage_limit_gib"},"HAS_REPOSITORIES_ABOVE_FREE_LIMIT":{"type":"BOOLEAN","index":7,"name":"has_repositories_above_free_limit","comment":null,"description":"Flags for the presence of repositories with 10 GiB or more of billable storage.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_repositories_above_free_limit"},"REPOSITORIES_ABOVE_FREE_LIMIT_COUNT":{"type":"NUMBER","index":8,"name":"repositories_above_free_limit_count","comment":null,"description":"Count of repositories with 10 GiB or more of billable storage.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repositories_above_free_limit_count"},"HAS_CAPPED_REPOSITORIES":{"type":"BOOLEAN","index":9,"name":"has_capped_repositories","comment":null,"description":"Flags for the presence of repositories with 10 GiB or more of billable storage with no available purchased storage remaining.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_capped_repositories"},"CAPPED_REPOSITORIES_COUNT":{"type":"NUMBER","index":10,"name":"capped_repositories_count","comment":null,"description":"Count of repositories with 10 GiB or more of billable storage and no available purchased storage remaining.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"capped_repositories_count"},"TOTAL_FREE_STORAGE_BYTES":{"type":"NUMBER","index":11,"name":"TOTAL_FREE_STORAGE_BYTES","comment":null,"display_name":"total_free_storage_bytes"},"TOTAL_PURCHASED_STORAGE_BYTES":{"type":"NUMBER","index":12,"name":"TOTAL_PURCHASED_STORAGE_BYTES","comment":null,"display_name":"total_purchased_storage_bytes"},"BILLABLE_STORAGE_BYTES":{"type":"NUMBER","index":13,"name":"billable_storage_bytes","comment":null,"description":"This value consists of the only types of storage that GitLab currently limits, and thus are possible to be billable. This value is equivalent to `repository_size` + `lfs_objects_size` across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billable_storage_bytes"},"REPOSITORY_BYTES":{"type":"NUMBER","index":14,"name":"repository_bytes","comment":null,"description":"Total size of repository across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repository_bytes"},"CONTAINER_REGISTRY_BYTES":{"type":"NUMBER","index":15,"name":"CONTAINER_REGISTRY_BYTES","comment":null,"display_name":"container_registry_bytes"},"LFS_OBJECTS_BYTES":{"type":"NUMBER","index":16,"name":"lfs_objects_bytes","comment":null,"description":"Total size of Large File Storage objects across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lfs_objects_bytes"},"BUILD_ARTIFACTS_BYTES":{"type":"NUMBER","index":17,"name":"build_artifacts_bytes","comment":null,"description":"Total size of build artifacts across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"build_artifacts_bytes"},"PACKAGES_BYTES":{"type":"NUMBER","index":18,"name":"packages_bytes","comment":null,"description":"Total size of packagess across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"packages_bytes"},"WIKI_BYTES":{"type":"NUMBER","index":19,"name":"wiki_bytes","comment":null,"description":"Total size of wikis across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wiki_bytes"},"STORAGE_BYTES":{"type":"NUMBER","index":20,"name":"storage_bytes","comment":null,"description":"Sum of reposity, LFS objects, build artifacts, packages, and wiki storage sizes.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"storage_bytes"},"TOTAL_FREE_STORAGE_MIB":{"type":"NUMBER","index":21,"name":"TOTAL_FREE_STORAGE_MIB","comment":null,"display_name":"total_free_storage_mib"},"TOTAL_PURCHASED_STORAGE_MIB":{"type":"NUMBER","index":22,"name":"TOTAL_PURCHASED_STORAGE_MIB","comment":null,"display_name":"total_purchased_storage_mib"},"BILLABLE_STORAGE_MIB":{"type":"NUMBER","index":23,"name":"BILLABLE_STORAGE_MIB","comment":null,"display_name":"billable_storage_mib"},"REPOSITORY_MIB":{"type":"NUMBER","index":24,"name":"REPOSITORY_MIB","comment":null,"display_name":"repository_mib"},"LFS_OBJECTS_MIB":{"type":"NUMBER","index":25,"name":"LFS_OBJECTS_MIB","comment":null,"display_name":"lfs_objects_mib"},"BUILD_ARTIFACTS_MIB":{"type":"NUMBER","index":26,"name":"BUILD_ARTIFACTS_MIB","comment":null,"display_name":"build_artifacts_mib"},"PACKAGES_MIB":{"type":"NUMBER","index":27,"name":"PACKAGES_MIB","comment":null,"display_name":"packages_mib"},"WIKI_MIB":{"type":"NUMBER","index":28,"name":"WIKI_MIB","comment":null,"display_name":"wiki_mib"},"STORAGE_MIB":{"type":"NUMBER","index":29,"name":"STORAGE_MIB","comment":null,"display_name":"storage_mib"},"TOTAL_FREE_STORAGE_GIB":{"type":"NUMBER","index":30,"name":"TOTAL_FREE_STORAGE_GIB","comment":null,"display_name":"total_free_storage_gib"},"TOTAL_PURCHASED_STORAGE_GIB":{"type":"NUMBER","index":31,"name":"TOTAL_PURCHASED_STORAGE_GIB","comment":null,"display_name":"total_purchased_storage_gib"},"BILLABLE_STORAGE_GIB":{"type":"NUMBER","index":32,"name":"BILLABLE_STORAGE_GIB","comment":null,"display_name":"billable_storage_gib"},"REPOSITORY_GIB":{"type":"NUMBER","index":33,"name":"REPOSITORY_GIB","comment":null,"display_name":"repository_gib"},"LFS_OBJECTS_GIB":{"type":"NUMBER","index":34,"name":"LFS_OBJECTS_GIB","comment":null,"display_name":"lfs_objects_gib"},"BUILD_ARTIFACTS_GIB":{"type":"NUMBER","index":35,"name":"BUILD_ARTIFACTS_GIB","comment":null,"display_name":"build_artifacts_gib"},"PACKAGES_GIB":{"type":"NUMBER","index":36,"name":"PACKAGES_GIB","comment":null,"display_name":"packages_gib"},"WIKI_GIB":{"type":"NUMBER","index":37,"name":"WIKI_GIB","comment":null,"display_name":"wiki_gib"},"STORAGE_GIB":{"type":"NUMBER","index":38,"name":"STORAGE_GIB","comment":null,"display_name":"storage_gib"},"CREATED_BY":{"type":"TEXT","index":39,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":40,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":41,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":42,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":43,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":44,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"total_free_storage_size":{"name":"total_free_storage_size","description":"Total billable storage used _under_ the free 10 GiB limit across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_free_storage_size"},"total_purchased_storage_size":{"name":"total_purchased_storage_size","description":"Total billable storage used _over_ the free 10 GiB limit across all repositories under the top level namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_purchased_storage_size"},"container_registry_size":{"name":"container_registry_size","description":"Total size of container registry under the top level namespace","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"container_registry_size"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:49UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":13882269696,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_usage_storage","raw_sql":"$28","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_project_statistic_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_project_statistic_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_project_statistics_source","model.gitlab_snowflake.gitlab_dotcom_project_statistics_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_storage_statistics_historical_monthly","model.gitlab_snowflake.gitlab_dotcom_namespace_root_storage_statistics_source","model.gitlab_snowflake.gitlab_dotcom_namespace_root_storage_statistics_source","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","facts_product_and_engineering","fct_usage_storage"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_product_and_engineering/fct_usage_storage.sql","original_file_path":"models/common/facts_product_and_engineering/fct_usage_storage.sql","name":"fct_usage_storage","alias":"fct_usage_storage","checksum":{"name":"sha256","checksum":"269e4d4f682f81a216bcf884b3533bcdc564a7b244c14081eec9ed9ea617c162"},"tags":[],"refs":[["prep_namespace"],["prep_namespace"],["gitlab_dotcom_project_statistic_historical_monthly"],["gitlab_dotcom_project_statistic_historical_monthly"],["gitlab_dotcom_project_statistics_source"],["gitlab_dotcom_project_statistics_source"],["gitlab_dotcom_namespace_lineage_historical_monthly"],["gitlab_dotcom_namespace_lineage_historical_monthly"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"],["gitlab_dotcom_namespace_storage_statistics_historical_monthly"],["gitlab_dotcom_namespace_root_storage_statistics_source"],["gitlab_dotcom_namespace_root_storage_statistics_source"],["dim_date"],["dim_date"],["customers_db_orders_source"],["customers_db_orders_source"]],"sources":[],"metrics":[],"description":"$29","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_product_and_engineering/fct_usage_storage.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033751.0707603,"compiled_sql":"$2a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.fct_usage_storage","label":"fct_usage_storage"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"BDG_NAMESPACE_ORDER_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"ORDER_ID":{"type":"NUMBER","index":3,"name":"order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_id"},"NAMESPACE_ID_ORDER":{"type":"TEXT","index":4,"name":"namespace_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id_order"},"SUBSCRIPTION_ID_ORDER":{"type":"TEXT","index":5,"name":"subscription_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_id_order"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":6,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":7,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_type"},"DIM_PRODUCT_TIER_ID_NAMESPACE":{"type":"TEXT","index":8,"name":"dim_product_tier_id_namespace","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_namespace"},"PRODUCT_TIER_NAME_NAMESPACE":{"type":"TEXT","index":9,"name":"product_tier_name_namespace","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_namespace"},"IS_NAMESPACE_ACTIVE":{"type":"BOOLEAN","index":10,"name":"is_namespace_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_namespace_active"},"NAMESPACE_WAS_TRIAL":{"type":"BOOLEAN","index":11,"name":"namespace_was_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_was_trial"},"SAAS_TRIAL_START_DATE":{"type":"TIMESTAMP_NTZ","index":12,"name":"saas_trial_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_start_date"},"SAAS_TRIAL_EXPIRED_ON":{"type":"TIMESTAMP_NTZ","index":13,"name":"saas_trial_expired_on","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_expired_on"},"CUSTOMER_ID":{"type":"NUMBER","index":14,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID_ORDER":{"type":"TEXT","index":15,"name":"product_rate_plan_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_order"},"DIM_PRODUCT_TIER_ID_ORDER":{"type":"TEXT","index":16,"name":"dim_product_tier_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_order"},"PRODUCT_TIER_NAME_ORDER":{"type":"TEXT","index":17,"name":"product_tier_name_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_order"},"IS_ORDER_ACTIVE":{"type":"BOOLEAN","index":18,"name":"is_order_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_order_active"},"ORDER_START_DATE":{"type":"TIMESTAMP_NTZ","index":19,"name":"order_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"TIMESTAMP_NTZ","index":20,"name":"order_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_end_date"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":21,"name":"order_is_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_is_trial"},"DIM_PRODUCT_TIER_ID_WITH_TRIAL":{"type":"TEXT","index":22,"name":"dim_product_tier_id_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_with_trial"},"PRODUCT_TIER_NAME_WITH_TRIAL":{"type":"TEXT","index":23,"name":"product_tier_name_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_with_trial"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":24,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":25,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":26,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":27,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":28,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":29,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"IS_SUBSCRIPTION_ACTIVE":{"type":"BOOLEAN","index":30,"name":"is_subscription_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_subscription_active"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":31,"name":"subscription_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":32,"name":"subscription_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"PRODUCT_RATE_PLAN_ID_SUBSCRIPTION":{"type":"TEXT","index":33,"name":"product_rate_plan_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_subscription"},"DIM_PRODUCT_TIER_ID_SUBSCRIPTION":{"type":"TEXT","index":34,"name":"dim_product_tier_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_subscription"},"PRODUCT_TIER_NAME_SUBSCRIPTION":{"type":"TEXT","index":35,"name":"product_tier_name_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_subscription"},"COUNT_OF_TIERS_PER_SUBSCRIPTION":{"type":"NUMBER","index":36,"name":"count_of_tiers_per_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_of_tiers_per_subscription"},"NAMESPACE_ORDER_SUBSCRIPTION_MATCH_STATUS":{"type":"TEXT","index":37,"name":"namespace_order_subscription_match_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_order_subscription_match_status"},"CREATED_BY":{"type":"TEXT","index":38,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":39,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":40,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":41,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":42,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":43,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:41UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":508715520,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_namespace_order_subscription","raw_sql":"$2b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.customers_db_orders_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.bdg_subscription_product_rate_plan","model.gitlab_snowflake.bdg_subscription_product_rate_plan"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","bridge","bdg_namespace_order_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/bridge/bdg_namespace_order_subscription.sql","original_file_path":"models/common/bridge/bdg_namespace_order_subscription.sql","name":"bdg_namespace_order_subscription","alias":"bdg_namespace_order_subscription","checksum":{"name":"sha256","checksum":"c85a31ec010b70abd7ed0c5ce08bf4b5c909b97fbf3f892021066ab3311c72b3"},"tags":["product","mnpi_exception"],"refs":[["prep_namespace"],["prep_namespace"],["prep_subscription"],["prep_subscription"],["customers_db_orders_source"],["customers_db_orders_source"],["prep_product_tier"],["prep_product_tier"],["dim_product_detail"],["dim_product_detail"],["fct_mrr_with_zero_dollar_charges"],["fct_mrr_with_zero_dollar_charges"],["customers_db_trial_histories_source"],["customers_db_trial_histories_source"],["bdg_subscription_product_rate_plan"],["bdg_subscription_product_rate_plan"]],"sources":[],"metrics":[],"description":"$2c","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/bridge/bdg_namespace_order_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033750.5057893,"compiled_sql":"$2d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.bdg_namespace_order_subscription","label":"bdg_namespace_order_subscription"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PTPF_SCORES_BY_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"Unique identifier for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_marketing_contact_id"},"NAMESPACE_ID":{"type":"TEXT","index":2,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"SCORE":{"type":"NUMBER","index":3,"name":"SCORE","comment":null,"display_name":"score"},"INSIGHTS":{"type":"TEXT","index":4,"name":"INSIGHTS","comment":null,"display_name":"insights"},"SCORE_GROUP":{"type":"NUMBER","index":5,"name":"SCORE_GROUP","comment":null,"display_name":"score_group"},"SCORE_DATE":{"type":"DATE","index":6,"name":"SCORE_DATE","comment":null,"display_name":"score_date"},"DAYS_SINCE_TRIAL_START":{"type":"NUMBER","index":7,"name":"DAYS_SINCE_TRIAL_START","comment":null,"display_name":"days_since_trial_start"},"PAST_INSIGHTS":{"type":"TEXT","index":8,"name":"PAST_INSIGHTS","comment":null,"display_name":"past_insights"},"PAST_SCORE_GROUP":{"type":"NUMBER","index":9,"name":"PAST_SCORE_GROUP","comment":null,"display_name":"past_score_group"},"PAST_SCORE_DATE":{"type":"DATE","index":10,"name":"PAST_SCORE_DATE","comment":null,"display_name":"past_score_date"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4990976,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_ptpf_scores_by_user","raw_sql":"$2e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.ptpf_scores_source","model.gitlab_snowflake.ptpf_scores_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_ptpf_scores_by_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_ptpf_scores_by_user.sql","original_file_path":"models/common_prep/prep_ptpf_scores_by_user.sql","name":"prep_ptpf_scores_by_user","alias":"prep_ptpf_scores_by_user","checksum":{"name":"sha256","checksum":"cc23b1655dd61491fd222d71841fe96f8704dc5273c22345740612d388f29f3a"},"tags":[],"refs":[["prep_namespace"],["prep_namespace"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["ptpf_scores_source"],["ptpf_scores_source"]],"sources":[],"metrics":[],"description":"Takes the scores from ptpf_scores, transforms it to user / email address grain and uses the latest score date available. It only syncs contacts with a `score_group >= 4`.\n\nThe scores of this model are then used in mart_marketing_contact and the marketing pump to later be synced with Marketo and SFDC.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_ptpf_scores_by_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.5133398,"compiled_sql":"$2f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_ptpf_scores_by_user","label":"prep_ptpf_scores_by_user"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"DIM_NAMESPACE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_namespace_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":2,"name":"namespace_is_internal","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_internal"},"NAMESPACE_IS_ULTIMATE_PARENT":{"type":"BOOLEAN","index":3,"name":"namespace_is_ultimate_parent","comment":null,"description":"Boolean flag which is set to True if the namespace is the ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_is_ultimate_parent"},"NAMESPACE_NAME":{"type":"TEXT","index":4,"name":"namespace_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":5,"name":"namespace_path","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":6,"name":"owner_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":7,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":8,"name":"has_avatar","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_avatar"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"created_at","comment":null,"description":"The timestamp of the ultimate parent namespace creation","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":11,"name":"is_membership_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":12,"name":"has_request_access_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":13,"name":"has_share_with_group_locked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_share_with_group_locked"},"IS_SETUP_FOR_COMPANY":{"type":"BOOLEAN","index":14,"name":"IS_SETUP_FOR_COMPANY","comment":null,"display_name":"is_setup_for_company"},"VISIBILITY_LEVEL":{"type":"TEXT","index":15,"name":"visibility_level","comment":null,"description":"The visibility setting for the namespace or project: public, private, or internal. More information about namespace and project visibility [here](https://docs.gitlab.com/ee/user/public_access.html)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":16,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":17,"name":"ldap_sync_error","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":18,"name":"ldap_sync_last_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"ldap_sync_last_successful_update_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":20,"name":"ldap_sync_last_sync_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":21,"name":"lfs_enabled","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":22,"name":"parent_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":23,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":24,"name":"shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":25,"name":"extra_shared_runners_minutes_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":26,"name":"repository_size_limit","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":27,"name":"does_require_two_factor_authentication","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":28,"name":"two_factor_grace_period","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":29,"name":"project_creation_level","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":30,"name":"push_rule_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"push_rule_id"},"CREATOR_ID":{"type":"NUMBER","index":31,"name":"creator_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"creator_id"},"NAMESPACE_CREATOR_IS_BLOCKED":{"type":"BOOLEAN","index":32,"name":"namespace_creator_is_blocked","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_creator_is_blocked"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":33,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"GITLAB_PLAN_ID":{"type":"NUMBER","index":34,"name":"gitlab_plan_id","comment":null,"description":"The **plan_id** associated with the namespace's subscription. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"gitlab_plan_id"},"GITLAB_PLAN_TITLE":{"type":"TEXT","index":35,"name":"gitlab_plan_title","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"gitlab_plan_title"},"GITLAB_PLAN_IS_PAID":{"type":"BOOLEAN","index":36,"name":"gitlab_plan_is_paid","comment":null,"description":"Whether or not the namespace associated with the project is subscribed to a paid plan. This can be inheritted from the namespaces's ultimate parent.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"gitlab_plan_is_paid"},"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":37,"name":"DIM_PRODUCT_TIER_ID","comment":null,"display_name":"dim_product_tier_id"},"CURRENT_MEMBER_COUNT":{"type":"NUMBER","index":38,"name":"current_member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_member_count"},"CURRENT_PROJECT_COUNT":{"type":"NUMBER","index":39,"name":"current_project_count","comment":null,"description":"The number of projects that are presently associated with the namespace.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"current_project_count"},"HAS_CODE_SUGGESTIONS_ENABLED":{"type":"BOOLEAN","index":40,"name":"has_code_suggestions_enabled","comment":null,"description":"Boolean flag set to True if the namespace has code suggestions enabled. This appears as `code_suggestions` in the gitlab.com db `namespace_settings` table.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_code_suggestions_enabled"},"CREATED_BY":{"type":"TEXT","index":41,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":42,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":43,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":44,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":45,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":46,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dap_sync_status":{"name":"dap_sync_status","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dap_sync_status"},"dim_product_tier_id,":{"name":"dim_product_tier_id,","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id,"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:41UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2379771904,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_namespace","raw_sql":"$30","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","dimensions_shared","dim_namespace"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/dimensions_shared/dim_namespace.sql","original_file_path":"models/common/dimensions_shared/dim_namespace.sql","name":"dim_namespace","alias":"dim_namespace","checksum":{"name":"sha256","checksum":"d3c3eb2c87eefef5b6eb267206f557d6518f148b908434d5b6818ccf512de269"},"tags":["product"],"refs":[["prep_namespace"],["prep_namespace"]],"sources":[],"metrics":[],"description":"Includes all columns from the namespaces base model. The plan columns in this table (gitlab_plan_id, gitlab_plan_title, gitlab_plan_is_paid) reference the plan that is inheritted from the namespace's ultimate parent.\n\nThis table add a count of members and projects currently associated with the namespace.\nBoolean columns: gitlab_plan_is_paid, namespace_is_internal, namespace_is_ultimate_parent\n\nA NULL namespace type defaults to \"Individual\".\nThis table joins to common product tier dimension via dim_product_tier_id to get the current product tier.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/dimensions_shared/dim_namespace.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"]},"created_at":1689033751.1079912,"compiled_sql":"$31","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.dim_namespace","label":"dim_namespace"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PROJECT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PROJECT_ID":{"type":"NUMBER","index":1,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"DIM_USER_ID_CREATOR":{"type":"NUMBER","index":4,"name":"DIM_USER_ID_CREATOR","comment":null,"display_name":"dim_user_id_creator"},"DIM_DATE_ID":{"type":"NUMBER","index":5,"name":"DIM_DATE_ID","comment":null,"display_name":"dim_date_id"},"DIM_PRODUCT_TIER_ID_AT_CREATION":{"type":"TEXT","index":6,"name":"DIM_PRODUCT_TIER_ID_AT_CREATION","comment":null,"display_name":"dim_product_tier_id_at_creation"},"DIM_PLAN_ID":{"type":"NUMBER","index":7,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":11,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"IS_ARCHIVED":{"type":"BOOLEAN","index":12,"name":"IS_ARCHIVED","comment":null,"display_name":"is_archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":13,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":14,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":15,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":16,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"IS_IMPORTED":{"type":"BOOLEAN","index":17,"name":"IS_IMPORTED","comment":null,"display_name":"is_imported"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":18,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":19,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":20,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":21,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":22,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":23,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":24,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":25,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":26,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":27,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":28,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":29,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":30,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":31,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":32,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":33,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":34,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":35,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":36,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":37,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":38,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":39,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":40,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":41,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":42,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":43,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":44,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":45,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":46,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":47,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":48,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":49,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":50,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":51,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":52,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":53,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":54,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":55,"name":"PROJECT_DESCRIPTION","comment":null,"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":56,"name":"PROJECT_IMPORT_SOURCE","comment":null,"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":57,"name":"PROJECT_ISSUES_TEMPLATE","comment":null,"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":58,"name":"PROJECT_BUILD_COVERAGE_REGEX","comment":null,"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":59,"name":"PROJECT_NAME","comment":null,"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":60,"name":"PROJECT_PATH","comment":null,"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":61,"name":"PROJECT_IMPORT_URL","comment":null,"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":62,"name":"PROJECT_MERGE_REQUESTS_TEMPLATE","comment":null,"display_name":"project_merge_requests_template"},"IS_LEARN_GITLAB":{"type":"BOOLEAN","index":63,"name":"IS_LEARN_GITLAB","comment":null,"display_name":"is_learn_gitlab"},"ACTIVE_SERVICE_TYPES_ARRAY":{"type":"ARRAY","index":64,"name":"ACTIVE_SERVICE_TYPES_ARRAY","comment":null,"display_name":"active_service_types_array"},"MEMBER_COUNT":{"type":"NUMBER","index":65,"name":"member_count","comment":null,"description":"Do not use this count, it is incorrect. Use [gitlab_dotcom_memberships](https://dbt.gitlabdata.com/#!/model/model.gitlab_snowflake.gitlab_dotcom_memberships) for member counts.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"member_count"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2232034816,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_project","raw_sql":"$32","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.coalesce_to_infinity","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.gitlab_dotcom_projects_source","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.gitlab_dotcom_integrations_source","model.gitlab_snowflake.gitlab_dotcom_integrations_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_project"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_project.sql","original_file_path":"models/common_prep/prep_project.sql","name":"prep_project","alias":"prep_project","checksum":{"name":"sha256","checksum":"aefd9a1ae7eee148ae3c5e359989133a026ade6ed5a4c7db90fe64ab6766b5a6"},"tags":[],"refs":[["dim_date"],["dim_date"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_namespace_lineage_historical_daily"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_namespace"],["prep_namespace"],["gitlab_dotcom_projects_source"],["gitlab_dotcom_projects_source"],["prep_product_tier"],["prep_product_tier"],["gitlab_dotcom_integrations_source"],["gitlab_dotcom_integrations_source"]],"sources":[],"metrics":[],"description":"Prep table for project-level data. Used to build `dim_project`, in addition to other facts and dimensions","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_project.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.8471196,"compiled_sql":"$33","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_project","label":"prep_project"},{"metadata":{"type":"BASE TABLE","schema":"COMMON","name":"BDG_NAMESPACE_ORDER_SUBSCRIPTION_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_namespace_id"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":2,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id"},"DIM_ORDER_ID":{"type":"NUMBER","index":3,"name":"dim_order_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_order_id"},"SNAPSHOT_MONTH":{"type":"DATE","index":4,"name":"snapshot_month","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"snapshot_month"},"NAMESPACE_ID_ORDER":{"type":"NUMBER","index":5,"name":"namespace_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id_order"},"SUBSCRIPTION_ID_ORDER":{"type":"TEXT","index":6,"name":"subscription_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_id_order"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":7,"name":"ultimate_parent_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ultimate_parent_namespace_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":8,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_type"},"IS_NAMESPACE_ACTIVE":{"type":"BOOLEAN","index":9,"name":"is_namespace_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_namespace_active"},"NAMESPACE_WAS_TRIAL":{"type":"BOOLEAN","index":10,"name":"namespace_was_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_was_trial"},"SAAS_TRIAL_START_DATE":{"type":"TIMESTAMP_NTZ","index":11,"name":"saas_trial_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_start_date"},"SAAS_TRIAL_EXPIRED_ON":{"type":"TIMESTAMP_NTZ","index":12,"name":"saas_trial_expired_on","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_trial_expired_on"},"CUSTOMER_ID":{"type":"NUMBER","index":13,"name":"customer_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_id"},"PRODUCT_RATE_PLAN_ID_ORDER":{"type":"TEXT","index":14,"name":"product_rate_plan_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_order"},"DIM_PRODUCT_TIER_ID_ORDER":{"type":"TEXT","index":15,"name":"dim_product_tier_id_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_order"},"PRODUCT_TIER_NAME_ORDER":{"type":"TEXT","index":16,"name":"product_tier_name_order","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_order"},"IS_ORDER_ACTIVE":{"type":"BOOLEAN","index":17,"name":"is_order_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_order_active"},"ORDER_START_DATE":{"type":"DATE","index":18,"name":"order_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_start_date"},"ORDER_END_DATE":{"type":"DATE","index":19,"name":"order_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_end_date"},"ORDER_IS_TRIAL":{"type":"BOOLEAN","index":20,"name":"order_is_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"order_is_trial"},"DIM_PRODUCT_TIER_ID_WITH_TRIAL":{"type":"TEXT","index":21,"name":"dim_product_tier_id_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_with_trial"},"PRODUCT_TIER_NAME_WITH_TRIAL":{"type":"TEXT","index":22,"name":"product_tier_name_with_trial","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_with_trial"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":23,"name":"subscription_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":24,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":25,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":26,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":27,"name":"dim_billing_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":28,"name":"dim_crm_account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"IS_SUBSCRIPTION_ACTIVE":{"type":"BOOLEAN","index":29,"name":"is_subscription_active","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_subscription_active"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":30,"name":"subscription_start_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":31,"name":"subscription_end_date","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"PRODUCT_RATE_PLAN_ID_SUBSCRIPTION":{"type":"TEXT","index":32,"name":"product_rate_plan_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_rate_plan_id_subscription"},"DIM_PRODUCT_TIER_ID_SUBSCRIPTION":{"type":"TEXT","index":33,"name":"dim_product_tier_id_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_product_tier_id_subscription"},"PRODUCT_TIER_NAME_SUBSCRIPTION":{"type":"TEXT","index":34,"name":"product_tier_name_subscription","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_subscription"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"NAMESPACE_ORDER_SUBSCRIPTION_MATCH_STATUS":{"type":"TEXT","index":36,"name":"namespace_order_subscription_match_status","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_order_subscription_match_status"},"CREATED_BY":{"type":"TEXT","index":37,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":38,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":39,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":40,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":41,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":42,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"count_of_tiers_per_subscription":{"name":"count_of_tiers_per_subscription","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"count_of_tiers_per_subscription"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:51UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":11061814272,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_namespace_order_subscription_monthly","raw_sql":"$34","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.dim_order_hist","model.gitlab_snowflake.dim_order_hist","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.prep_product_tier","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.fct_mrr_with_zero_dollar_charges","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.customers_db_trial_histories_source","model.gitlab_snowflake.bdg_subscription_product_rate_plan","model.gitlab_snowflake.bdg_subscription_product_rate_plan"]},"config":{"enabled":true,"alias":null,"schema":"common","database":"PROD","tags":["product","mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common","fqn":["gitlab_snowflake","common","bridge","bdg_namespace_order_subscription_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/bridge/bdg_namespace_order_subscription_monthly.sql","original_file_path":"models/common/bridge/bdg_namespace_order_subscription_monthly.sql","name":"bdg_namespace_order_subscription_monthly","alias":"bdg_namespace_order_subscription_monthly","checksum":{"name":"sha256","checksum":"5f4c3a78e84214a24e8176a3841c4f22bddf2c92731d0cb3b50953ea5c31e5cf"},"tags":["product","mnpi_exception"],"refs":[["prep_namespace"],["prep_namespace"],["prep_subscription"],["prep_subscription"],["dim_order_hist"],["dim_order_hist"],["dim_date"],["dim_date"],["prep_product_tier"],["prep_product_tier"],["dim_product_detail"],["dim_product_detail"],["fct_mrr_with_zero_dollar_charges"],["fct_mrr_with_zero_dollar_charges"],["customers_db_trial_histories_source"],["customers_db_trial_histories_source"],["bdg_subscription_product_rate_plan"],["bdg_subscription_product_rate_plan"]],"sources":[],"metrics":[],"description":"$35","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/bridge/bdg_namespace_order_subscription_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product","mnpi_exception"]},"created_at":1689033750.4867938,"compiled_sql":"$36","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common.bdg_namespace_order_subscription_monthly","label":"bdg_namespace_order_subscription_monthly"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PACKAGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PACKAGE_ID":{"type":"NUMBER","index":1,"name":"dim_package_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_package_id"},"DIM_PROJECT_ID":{"type":"NUMBER","index":2,"name":"DIM_PROJECT_ID","comment":null,"display_name":"dim_project_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"DIM_NAMESPACE_ID","comment":null,"display_name":"dim_namespace_id"},"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":4,"name":"ULTIMATE_PARENT_NAMESPACE_ID","comment":null,"display_name":"ultimate_parent_namespace_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":5,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DIM_PLAN_ID":{"type":"NUMBER","index":6,"name":"DIM_PLAN_ID","comment":null,"display_name":"dim_plan_id"},"CREATOR_ID":{"type":"NUMBER","index":7,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":8,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"PACKAGE_VERSION":{"type":"TEXT","index":9,"name":"PACKAGE_VERSION","comment":null,"display_name":"package_version"},"PACKAGE_TYPE":{"type":"TEXT","index":10,"name":"PACKAGE_TYPE","comment":null,"display_name":"package_type"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"CREATED_BY":{"type":"TEXT","index":13,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":14,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":15,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":16,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":17,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":18,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 12:47UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":312171008,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_package","raw_sql":"$37","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.dim_namespace_plan_hist","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.gitlab_dotcom_plans_source","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.prep_project","model.gitlab_snowflake.gitlab_dotcom_packages_packages_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_packages_packages_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_package_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_package"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_package.sql","original_file_path":"models/common_prep/prep_package.sql","name":"prep_package","alias":"prep_package","checksum":{"name":"sha256","checksum":"4408f034afb5f3da2243f6ed7dbe6577e78ccafb421ef9772cbb944328516a05"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["dim_namespace_plan_hist"],["dim_namespace_plan_hist"],["gitlab_dotcom_plans_source"],["gitlab_dotcom_plans_source"],["prep_namespace"],["prep_namespace"],["prep_project"],["prep_project"],["gitlab_dotcom_packages_packages_dedupe_source"],["gitlab_dotcom_packages_packages_dedupe_source"]],"sources":[],"metrics":[],"description":"Prep table for the dim table `dim_package` that is not yet created. It is also used in the `prep_event` table","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_package.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"dim_package_id"},"created_at":1689033756.7030249,"compiled_sql":"$38","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_package","label":"prep_package"}],"test":[{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"dim_namespace_id","model":"{{ get_where_subquery(ref('prep_namespace')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","not_null_prep_namespace_dim_namespace_id"],"unique_id":"test.gitlab_snowflake.not_null_prep_namespace_dim_namespace_id.7070bbcf37","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_prep_namespace_dim_namespace_id.sql","original_file_path":"models/common_prep/schema.yml","name":"not_null_prep_namespace_dim_namespace_id","alias":"not_null_prep_namespace_dim_namespace_id","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_namespace"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/not_null_prep_namespace_dim_namespace_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.1553807,"compiled_sql":"\n    \n    \n\n\n\nselect dim_namespace_id\nfrom \"PROD\".common_prep.prep_namespace\nwhere dim_namespace_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"dim_namespace_id","file_key_name":"models.prep_namespace","label":"not_null_prep_namespace_dim_namespace_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"ultimate_parent_namespace_id","model":"{{ get_where_subquery(ref('prep_namespace')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","not_null_prep_namespace_ultimate_parent_namespace_id"],"unique_id":"test.gitlab_snowflake.not_null_prep_namespace_ultimate_parent_namespace_id.7ac73cb3a7","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_prep_namespace_ultimate_parent_namespace_id.sql","original_file_path":"models/common_prep/schema.yml","name":"not_null_prep_namespace_ultimate_parent_namespace_id","alias":"not_null_prep_namespace_ultimate_parent_namespace_id","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_namespace"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/not_null_prep_namespace_ultimate_parent_namespace_id.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.158816,"compiled_sql":"\n    \n    \n\n\n\nselect ultimate_parent_namespace_id\nfrom \"PROD\".common_prep.prep_namespace\nwhere ultimate_parent_namespace_id is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"ultimate_parent_namespace_id","file_key_name":"models.prep_namespace","label":"not_null_prep_namespace_ultimate_parent_namespace_id"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"namespace_type","model":"{{ get_where_subquery(ref('prep_namespace')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","not_null_prep_namespace_namespace_type"],"unique_id":"test.gitlab_snowflake.not_null_prep_namespace_namespace_type.801e42cab2","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_prep_namespace_namespace_type.sql","original_file_path":"models/common_prep/schema.yml","name":"not_null_prep_namespace_namespace_type","alias":"not_null_prep_namespace_namespace_type","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_namespace"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/not_null_prep_namespace_namespace_type.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.1623194,"compiled_sql":"\n    \n    \n\n\n\nselect namespace_type\nfrom \"PROD\".common_prep.prep_namespace\nwhere namespace_type is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"namespace_type","file_key_name":"models.prep_namespace","label":"not_null_prep_namespace_namespace_type"},{"raw_sql":"{{ test_not_null(**_dbt_generic_test_kwargs) }}","test_metadata":{"name":"not_null","kwargs":{"column_name":"is_currently_valid","model":"{{ get_where_subquery(ref('prep_namespace')) }}"},"namespace":null},"compiled":true,"resource_type":"test","depends_on":{"macros":["macro.dbt.test_not_null","macro.gitlab_snowflake.ref","macro.dbt.get_where_subquery"],"nodes":["model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"dbt_test__audit","database":null,"tags":[],"meta":{},"materialized":"test","severity":"ERROR","store_failures":null,"where":null,"limit":null,"fail_calc":"count(*)","warn_if":"!= 0","error_if":"!= 0"},"database":"PREP","schema":"dbt_test__audit","fqn":["gitlab_snowflake","common_prep","not_null_prep_namespace_is_currently_valid"],"unique_id":"test.gitlab_snowflake.not_null_prep_namespace_is_currently_valid.e1cc648d34","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"not_null_prep_namespace_is_currently_valid.sql","original_file_path":"models/common_prep/schema.yml","name":"not_null_prep_namespace_is_currently_valid","alias":"not_null_prep_namespace_is_currently_valid","checksum":{"name":"none","checksum":""},"tags":["common","gainsight","tdf"],"refs":[["prep_namespace"]],"sources":[],"metrics":[],"description":"","columns":{},"meta":{},"docs":{"show":true},"patch_path":null,"compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/schema.yml/not_null_prep_namespace_is_currently_valid.sql","build_path":null,"deferred":false,"unrendered_config":{},"created_at":1689033757.1658175,"compiled_sql":"\n    \n    \n\n\n\nselect is_currently_valid\nfrom \"PROD\".common_prep.prep_namespace\nwhere is_currently_valid is null\n\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":null,"column_name":"is_currently_valid","file_key_name":"models.prep_namespace","label":"not_null_prep_namespace_is_currently_valid"}]},"node":{"resource_type":"model","name":"prep_namespace","unique_id":"model.gitlab_snowflake.prep_namespace"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"PREPARATION","name":"GITLAB_DOTCOM_NAMESPACE_LINEAGE_HISTORICAL_DAILY","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"SNAPSHOT_DAY_NAMESPACE_ID":{"type":"TEXT","index":1,"name":"snapshot_day_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"snapshot_day_namespace_id"},"SNAPSHOT_DAY":{"type":"DATE","index":2,"name":"SNAPSHOT_DAY","comment":null,"display_name":"snapshot_day"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"PARENT_ID":{"type":"NUMBER","index":4,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"UPSTREAM_LINEAGE":{"type":"ARRAY","index":5,"name":"UPSTREAM_LINEAGE","comment":null,"display_name":"upstream_lineage"},"ULTIMATE_PARENT_ID":{"type":"NUMBER","index":6,"name":"ULTIMATE_PARENT_ID","comment":null,"display_name":"ultimate_parent_id"},"NAMESPACE_IS_INTERNAL":{"type":"BOOLEAN","index":7,"name":"NAMESPACE_IS_INTERNAL","comment":null,"display_name":"namespace_is_internal"},"ULTIMATE_PARENT_PLAN_ID":{"type":"NUMBER","index":8,"name":"ULTIMATE_PARENT_PLAN_ID","comment":null,"display_name":"ultimate_parent_plan_id"},"SEATS":{"type":"NUMBER","index":9,"name":"SEATS","comment":null,"display_name":"seats"},"SEATS_IN_USE":{"type":"NUMBER","index":10,"name":"SEATS_IN_USE","comment":null,"display_name":"seats_in_use"},"MAX_SEATS_USED":{"type":"NUMBER","index":11,"name":"MAX_SEATS_USED","comment":null,"display_name":"max_seats_used"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:26UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1294140449280,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_historical_daily","raw_sql":"$39","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt.is_incremental","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.map_namespace_internal","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.gitlab_dotcom_namespace_lineage_scd","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.prep_gitlab_dotcom_plan","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date"]},"config":{"enabled":true,"alias":null,"schema":"preparation","database":"PREP","tags":["product"],"meta":{},"materialized":"incremental","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"snapshot_day_namespace_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"preparation","fqn":["gitlab_snowflake","legacy","gitlab_dotcom","staging","gitlab_dotcom_namespace_lineage_historical_daily"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_daily.sql","original_file_path":"models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_daily.sql","name":"gitlab_dotcom_namespace_lineage_historical_daily","alias":"gitlab_dotcom_namespace_lineage_historical_daily","checksum":{"name":"sha256","checksum":"89b36794fa88769e8d6bc2729f39a78e186fc126969a75d90175407541f612c2"},"tags":["product"],"refs":[["map_namespace_internal"],["map_namespace_internal"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_gitlab_subscriptions_snapshots_namespace_id_base"],["gitlab_dotcom_namespace_lineage_scd"],["gitlab_dotcom_namespace_lineage_scd"],["prep_gitlab_dotcom_plan"],["prep_gitlab_dotcom_plan"],["dim_date"],["dim_date"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/gitlab_dotcom/staging/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/gitlab_dotcom/staging/gitlab_dotcom_namespace_lineage_historical_daily.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"preparation","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"incremental","tags":["product"],"unique_key":"snapshot_day_namespace_id"},"created_at":1689033760.1824334,"compiled_sql":"$3a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".preparation.gitlab_dotcom_namespace_lineage_historical_daily","label":"gitlab_dotcom_namespace_lineage_historical_daily"},{"metadata":{"type":"BASE TABLE","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_MEMBERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"MEMBER_ID":{"type":"NUMBER","index":1,"name":"member_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"member_id"},"ACCESS_LEVEL":{"type":"NUMBER","index":2,"name":"ACCESS_LEVEL","comment":null,"display_name":"access_level"},"SOURCE_ID":{"type":"NUMBER","index":3,"name":"SOURCE_ID","comment":null,"display_name":"source_id"},"MEMBER_SOURCE_TYPE":{"type":"TEXT","index":4,"name":"MEMBER_SOURCE_TYPE","comment":null,"display_name":"member_source_type"},"USER_ID":{"type":"NUMBER","index":5,"name":"USER_ID","comment":null,"display_name":"user_id"},"NOTIFICATION_LEVEL":{"type":"NUMBER","index":6,"name":"NOTIFICATION_LEVEL","comment":null,"display_name":"notification_level"},"MEMBER_TYPE":{"type":"TEXT","index":7,"name":"MEMBER_TYPE","comment":null,"display_name":"member_type"},"INVITE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"INVITE_CREATED_AT","comment":null,"display_name":"invite_created_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"CREATED_BY_ID":{"type":"NUMBER","index":10,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"INVITE_ACCEPTED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"INVITE_ACCEPTED_AT","comment":null,"display_name":"invite_accepted_at"},"REQUESTED_AT":{"type":"TIMESTAMP_NTZ","index":12,"name":"REQUESTED_AT","comment":null,"display_name":"requested_at"},"EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":13,"name":"EXPIRES_AT","comment":null,"display_name":"expires_at"},"HAS_LDAP":{"type":"BOOLEAN","index":14,"name":"HAS_LDAP","comment":null,"display_name":"has_ldap"},"HAS_OVERRIDE":{"type":"BOOLEAN","index":15,"name":"HAS_OVERRIDE","comment":null,"display_name":"has_override"},"MEMBER_ROLE_ID":{"type":"NUMBER","index":16,"name":"MEMBER_ROLE_ID","comment":null,"display_name":"member_role_id"},"INVITE_TOKEN":{"type":"TEXT","index":17,"name":"INVITE_TOKEN","comment":null,"display_name":"invite_token"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":18,"name":"valid_from","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":19,"name":"valid_to","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"dbt_utils.expression_is_true","short":"+","label":"dbt_utils.expression_is_true({\"expression\":\">= valid_from\",\"model\":\"{{ get_where_subquery(ref('gitlab_dotcom_members_source')) }}\"})"}],"display_name":"valid_to"},"IS_CURRENTLY_VALID":{"type":"BOOLEAN","index":20,"name":"IS_CURRENTLY_VALID","comment":null,"display_name":"is_currently_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 19:14UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1130067456,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_members_source","raw_sql":"$3b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.distinct_source","macro.gitlab_snowflake.scd_type_2","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.gitlab_dotcom.members"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","scd","gitlab_dotcom_members_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/scd/gitlab_dotcom_members_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/scd/gitlab_dotcom_members_source.sql","name":"gitlab_dotcom_members_source","alias":"gitlab_dotcom_members_source","checksum":{"name":"sha256","checksum":"5e4e33b63c966373471fdcfb2a5c13b3a90472c6274155f8fd541628d2ec301c"},"tags":["sources"],"refs":[],"sources":[["gitlab_dotcom","members"]],"metrics":[],"description":"Base model for Gitlab.com members. <br/>\n### Type 2 Slowly Changing Dimension\nThis base model is modelled as a Type 2 Slowly Changing Dimension. This means 3 columns have been added as metadata to track row-level changes over time. These columns are `valid_from`, `valid_to` and `is_currently_valid`. One implication of this is that the primary key column in this table is *not* unique. There can be multiple rows per primary_key, but only a maximum of one will have `is_currently_vaild` set to TRUE. \n\nRead the documentation for the SCD Type 2 Macro [here](https://gitlab.com/gitlab-data/analytics/blob/master/transform/snowflake-dbt/macros/README.md#scd_type_2).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/scd/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/scd/gitlab_dotcom_members_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["sources"]},"created_at":1689033742.6714604,"compiled_sql":"$3c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_members_source","label":"gitlab_dotcom_members_source"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_NAMESPACES_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":2,"name":"namespace_name","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":3,"name":"namespace_path","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":4,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":5,"name":"namespace_type","comment":null,"description":"The type of namespace: Group, User, or Project.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Group, User, Project"}],"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":6,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":9,"name":"IS_MEMBERSHIP_LOCKED","comment":null,"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":10,"name":"HAS_REQUEST_ACCESS_ENABLED","comment":null,"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":11,"name":"HAS_SHARE_WITH_GROUP_LOCKED","comment":null,"display_name":"has_share_with_group_locked"},"VISIBILITY_LEVEL":{"type":"TEXT","index":12,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":13,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":14,"name":"LDAP_SYNC_ERROR","comment":null,"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":15,"name":"LDAP_SYNC_LAST_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"LDAP_SYNC_LAST_SYNC_AT","comment":null,"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":18,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":19,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":20,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":21,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":22,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":23,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION","comment":null,"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":24,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":25,"name":"PROJECT_CREATION_LEVEL","comment":null,"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":26,"name":"PUSH_RULE_ID","comment":null,"display_name":"push_rule_id"},"SHARED_RUNNERS_ENABLED":{"type":"VARIANT","index":27,"name":"shared_runners_enabled","comment":null,"description":"Indicates whether or not a namespace has shared_runners_enabled","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"shared_runners_enabled"},"visbility_level":{"name":"visbility_level","description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visbility_level"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespaces_source","raw_sql":"$3d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_namespaces_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_namespaces_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_namespaces_source.sql","name":"gitlab_dotcom_namespaces_source","alias":"gitlab_dotcom_namespaces_source","checksum":{"name":"sha256","checksum":"6aad34df68d92e046b5e8abf7699752955c0f061a7879b924f51eab8ce916e50"},"tags":["sources"],"refs":[["gitlab_dotcom_namespaces_dedupe_source"],["gitlab_dotcom_namespaces_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com namespaces","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_namespaces_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.2018893,"compiled_sql":"$3e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_namespaces_source","label":"gitlab_dotcom_namespaces_source"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_PLANS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"PLAN_ID":{"type":"NUMBER","index":1,"name":"plan_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"plan_id"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":3,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"PLAN_NAME":{"type":"TEXT","index":4,"name":"plan_name","comment":null,"description":"The english naming of the plan type (gold, silver, etc.)","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_name"},"PLAN_TITLE":{"type":"TEXT","index":5,"name":"plan_title","comment":null,"description":"The capitalized english naming of the plan type (Gold, Silver, etc.)","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_title"},"PLAN_IS_PAID":{"type":"BOOLEAN","index":6,"name":"plan_is_paid","comment":null,"description":"Whether or not this plan type is considered a paid subscription.","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"plan_is_paid"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_plans_source","raw_sql":"WITH source AS (\n\n  SELECT *\n  FROM {{ ref('gitlab_dotcom_plans_dedupe_source') }}\n  \n), renamed AS (\n\n    SELECT\n\n      id::NUMBER                      AS plan_id,\n      created_at::TIMESTAMP           AS created_at,\n      updated_at::TIMESTAMP           AS updated_at,\n      name::VARCHAR                   AS plan_name,\n      title::VARCHAR                  AS plan_title,\n      id IN (2, 3, 4, 100, 101)       AS plan_is_paid\n\n    FROM source\n\n)\n\nSELECT *\nFROM renamed","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_plans_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_plans_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_plans_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_plans_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_plans_source.sql","name":"gitlab_dotcom_plans_source","alias":"gitlab_dotcom_plans_source","checksum":{"name":"sha256","checksum":"e599edcdcadda751177c64cdffc6bf894ab322911c11c3382a45339e7f257cf5"},"tags":["sources"],"refs":[["gitlab_dotcom_plans_dedupe_source"],["gitlab_dotcom_plans_dedupe_source"]],"sources":[],"metrics":[],"description":"A base model for Gitlab.com plans.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_plans_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.2335987,"compiled_sql":"WITH source AS (\n\n  SELECT *\n  FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_plans_dedupe_source\n  \n), renamed AS (\n\n    SELECT\n\n      id::NUMBER                      AS plan_id,\n      created_at::TIMESTAMP           AS created_at,\n      updated_at::TIMESTAMP           AS updated_at,\n      name::VARCHAR                   AS plan_name,\n      title::VARCHAR                  AS plan_title,\n      id IN (2, 3, 4, 100, 101)       AS plan_is_paid\n\n    FROM source\n\n)\n\nSELECT *\nFROM renamed","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_plans_source","label":"gitlab_dotcom_plans_source"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_AUDIT_EVENTS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"AUDIT_EVENT_ID":{"type":"NUMBER","index":1,"name":"audit_event_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"audit_event_id"},"AUTHOR_ID":{"type":"NUMBER","index":2,"name":"author_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"author_id"},"ENTITY_ID":{"type":"NUMBER","index":3,"name":"ENTITY_ID","comment":null,"display_name":"entity_id"},"ENTITY_TYPE":{"type":"TEXT","index":4,"name":"ENTITY_TYPE","comment":null,"display_name":"entity_type"},"AUDIT_EVENT_DETAILS":{"type":"TEXT","index":5,"name":"AUDIT_EVENT_DETAILS","comment":null,"display_name":"audit_event_details"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CREATED_AT","comment":null,"display_name":"created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_audit_events_source","raw_sql":"WITH source AS (\n\n  SELECT *\n  FROM {{ ref('gitlab_dotcom_audit_events_dedupe_source') }}\n\n), renamed AS (\n\n  SELECT\n    id::NUMBER              AS audit_event_id,\n    author_id::NUMBER       AS author_id,\n    entity_id::NUMBER       AS entity_id,\n    entity_type::VARCHAR    AS entity_type,\n    details::VARCHAR        AS audit_event_details,\n    created_at::TIMESTAMP   AS created_at\n  FROM source\n\n)\n\nSELECT *\nFROM renamed","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_audit_events_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_audit_events_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_audit_events_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_audit_events_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_audit_events_source.sql","name":"gitlab_dotcom_audit_events_source","alias":"gitlab_dotcom_audit_events_source","checksum":{"name":"sha256","checksum":"178b0c9a8300a594d1af23c42a0049afa76024e7dae99e36a355ddfb8dbb39e4"},"tags":["sources"],"refs":[["gitlab_dotcom_audit_events_dedupe_source"],["gitlab_dotcom_audit_events_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com audit events","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_audit_events_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033739.8378108,"compiled_sql":"WITH source AS (\n\n  SELECT *\n  FROM \"PREP\".gitlab_dotcom.gitlab_dotcom_audit_events_dedupe_source\n\n), renamed AS (\n\n  SELECT\n    id::NUMBER              AS audit_event_id,\n    author_id::NUMBER       AS author_id,\n    entity_id::NUMBER       AS entity_id,\n    entity_type::VARCHAR    AS entity_type,\n    details::VARCHAR        AS audit_event_details,\n    created_at::TIMESTAMP   AS created_at\n  FROM source\n\n)\n\nSELECT *\nFROM renamed","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_audit_events_source","label":"gitlab_dotcom_audit_events_source"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_NAMESPACE_SETTINGS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":1,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"NAMESPACE_ID":{"type":"NUMBER","index":3,"name":"namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"namespace_id"},"PREVENT_FORKING_OUTSIDE_GROUP":{"type":"BOOLEAN","index":4,"name":"PREVENT_FORKING_OUTSIDE_GROUP","comment":null,"display_name":"prevent_forking_outside_group"},"ALLOW_MFA_FOR_SUBGROUPS":{"type":"BOOLEAN","index":5,"name":"ALLOW_MFA_FOR_SUBGROUPS","comment":null,"display_name":"allow_mfa_for_subgroups"},"DEFAULT_BRANCH_NAME":{"type":"TEXT","index":6,"name":"DEFAULT_BRANCH_NAME","comment":null,"display_name":"default_branch_name"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":7,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"DELAYED_PROJECT_REMOVAL":{"type":"BOOLEAN","index":8,"name":"DELAYED_PROJECT_REMOVAL","comment":null,"display_name":"delayed_project_removal"},"RESOURCE_ACCESS_TOKEN_CREATION_ALLOWED":{"type":"BOOLEAN","index":9,"name":"RESOURCE_ACCESS_TOKEN_CREATION_ALLOWED","comment":null,"display_name":"resource_access_token_creation_allowed"},"LOCK_DELAYED_PROJECT_REMOVAL":{"type":"BOOLEAN","index":10,"name":"LOCK_DELAYED_PROJECT_REMOVAL","comment":null,"display_name":"lock_delayed_project_removal"},"PREVENT_SHARING_GROUPS_OUTSIDE_HIERARCHY":{"type":"BOOLEAN","index":11,"name":"PREVENT_SHARING_GROUPS_OUTSIDE_HIERARCHY","comment":null,"display_name":"prevent_sharing_groups_outside_hierarchy"},"NEW_SIGNUPS_CAP":{"type":"NUMBER","index":12,"name":"NEW_SIGNUPS_CAP","comment":null,"display_name":"new_signups_cap"},"IS_SETUP_FOR_COMPANY":{"type":"BOOLEAN","index":13,"name":"IS_SETUP_FOR_COMPANY","comment":null,"display_name":"is_setup_for_company"},"JOBS_TO_BE_DONE":{"type":"NUMBER","index":14,"name":"JOBS_TO_BE_DONE","comment":null,"display_name":"jobs_to_be_done"},"EXPERIMENT_FEATURES_ENABLED":{"type":"BOOLEAN","index":15,"name":"EXPERIMENT_FEATURES_ENABLED","comment":null,"display_name":"experiment_features_enabled"},"THIRD_PARTY_AI_FEATURES_ENABLED":{"type":"BOOLEAN","index":16,"name":"THIRD_PARTY_AI_FEATURES_ENABLED","comment":null,"display_name":"third_party_ai_features_enabled"},"CODE_SUGGESTIONS":{"type":"BOOLEAN","index":17,"name":"CODE_SUGGESTIONS","comment":null,"display_name":"code_suggestions"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_namespace_settings_source","raw_sql":"$3f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespace_settings_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_namespace_settings_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_namespace_settings_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_namespace_settings_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_namespace_settings_source.sql","name":"gitlab_dotcom_namespace_settings_source","alias":"gitlab_dotcom_namespace_settings_source","checksum":{"name":"sha256","checksum":"5d25e3c1ba6386976e5beeabce595b765e52bbd04e9e7b488b214b4b8a097380"},"tags":["sources"],"refs":[["gitlab_dotcom_namespace_settings_dedupe_source"],["gitlab_dotcom_namespace_settings_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com namespace settings","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_namespace_settings_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.192951,"compiled_sql":"$40","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_namespace_settings_source","label":"gitlab_dotcom_namespace_settings_source"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_USERS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"USER_ID":{"type":"NUMBER","index":1,"name":"user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":2,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":3,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":5,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":8,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"PROJECTS_LIMIT":{"type":"NUMBER","index":9,"name":"PROJECTS_LIMIT","comment":null,"display_name":"projects_limit"},"FAILED_ATTEMPTS":{"type":"NUMBER","index":10,"name":"FAILED_ATTEMPTS","comment":null,"display_name":"failed_attempts"},"LOCKED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"LOCKED_AT","comment":null,"display_name":"locked_at"},"USER_LOCKED":{"type":"BOOLEAN","index":12,"name":"USER_LOCKED","comment":null,"display_name":"user_locked"},"HAS_CREATE_GROUP_PERMISSIONS":{"type":"BOOLEAN","index":13,"name":"HAS_CREATE_GROUP_PERMISSIONS","comment":null,"display_name":"has_create_group_permissions"},"HAS_CREATE_TEAM_PERMISSIONS":{"type":"BOOLEAN","index":14,"name":"HAS_CREATE_TEAM_PERMISSIONS","comment":null,"display_name":"has_create_team_permissions"},"STATE":{"type":"TEXT","index":15,"name":"STATE","comment":null,"display_name":"state"},"COLOR_SCHEME_ID":{"type":"NUMBER","index":16,"name":"COLOR_SCHEME_ID","comment":null,"display_name":"color_scheme_id"},"PASSWORD_EXPIRES_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"PASSWORD_EXPIRES_AT","comment":null,"display_name":"password_expires_at"},"CREATED_BY_ID":{"type":"NUMBER","index":18,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"LAST_CREDENTIAL_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":19,"name":"LAST_CREDENTIAL_CHECK_AT","comment":null,"display_name":"last_credential_check_at"},"HAS_AVATAR":{"type":"BOOLEAN","index":20,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"CONFIRMED_AT":{"type":"TIMESTAMP_NTZ","index":21,"name":"CONFIRMED_AT","comment":null,"display_name":"confirmed_at"},"CONFIRMATION_SENT_AT":{"type":"TIMESTAMP_NTZ","index":22,"name":"CONFIRMATION_SENT_AT","comment":null,"display_name":"confirmation_sent_at"},"HAS_HIDE_NO_SSH_KEY_ENABLED":{"type":"BOOLEAN","index":23,"name":"HAS_HIDE_NO_SSH_KEY_ENABLED","comment":null,"display_name":"has_hide_no_ssh_key_enabled"},"ADMIN_EMAIL_UNSUBSCRIBED_AT":{"type":"TIMESTAMP_NTZ","index":24,"name":"ADMIN_EMAIL_UNSUBSCRIBED_AT","comment":null,"display_name":"admin_email_unsubscribed_at"},"NOTIFICATION_EMAIL":{"type":"TEXT","index":25,"name":"NOTIFICATION_EMAIL","comment":null,"display_name":"notification_email"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":26,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"HAS_HIDE_NO_PASSWORD_ENABLED":{"type":"BOOLEAN","index":27,"name":"HAS_HIDE_NO_PASSWORD_ENABLED","comment":null,"display_name":"has_hide_no_password_enabled"},"IS_PASSWORD_AUTOMATICALLY_SET":{"type":"BOOLEAN","index":28,"name":"IS_PASSWORD_AUTOMATICALLY_SET","comment":null,"display_name":"is_password_automatically_set"},"LOCATION":{"type":"TEXT","index":29,"name":"LOCATION","comment":null,"display_name":"location"},"EMAIL":{"type":"TEXT","index":30,"name":"EMAIL","comment":null,"display_name":"email"},"EMAIL_DOMAIN":{"type":"TEXT","index":31,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"PUBLIC_EMAIL":{"type":"TEXT","index":32,"name":"PUBLIC_EMAIL","comment":null,"display_name":"public_email"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":33,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"COMMIT_EMAIL":{"type":"TEXT","index":34,"name":"COMMIT_EMAIL","comment":null,"display_name":"commit_email"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":35,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"IS_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":36,"name":"IS_EMAIL_OPTED_IN","comment":null,"display_name":"is_email_opted_in"},"EMAIL_OPTED_IN_SOURCE_ID":{"type":"NUMBER","index":37,"name":"EMAIL_OPTED_IN_SOURCE_ID","comment":null,"display_name":"email_opted_in_source_id"},"EMAIL_OPTED_IN_AT":{"type":"TIMESTAMP_NTZ","index":38,"name":"EMAIL_OPTED_IN_AT","comment":null,"display_name":"email_opted_in_at"},"DASHBOARD":{"type":"NUMBER","index":39,"name":"DASHBOARD","comment":null,"display_name":"dashboard"},"PROJECT_VIEW":{"type":"NUMBER","index":40,"name":"PROJECT_VIEW","comment":null,"display_name":"project_view"},"CONSUMED_TIMESTEP":{"type":"NUMBER","index":41,"name":"CONSUMED_TIMESTEP","comment":null,"display_name":"consumed_timestep"},"LAYOUT":{"type":"NUMBER","index":42,"name":"LAYOUT","comment":null,"display_name":"layout"},"HAS_HIDE_PROJECT_LIMIT_ENABLED":{"type":"BOOLEAN","index":43,"name":"HAS_HIDE_PROJECT_LIMIT_ENABLED","comment":null,"display_name":"has_hide_project_limit_enabled"},"OTP_GRACE_PERIOD_STARTED_AT":{"type":"TIMESTAMP_NTZ","index":44,"name":"OTP_GRACE_PERIOD_STARTED_AT","comment":null,"display_name":"otp_grace_period_started_at"},"IS_EXTERNAL_USER":{"type":"BOOLEAN","index":45,"name":"IS_EXTERNAL_USER","comment":null,"display_name":"is_external_user"},"ORGANIZATION":{"type":"TEXT","index":46,"name":"ORGANIZATION","comment":null,"display_name":"organization"},"AUDITOR":{"type":"BOOLEAN","index":47,"name":"AUDITOR","comment":null,"display_name":"auditor"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP":{"type":"BOOLEAN","index":48,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION_FROM_GROUP","comment":null,"display_name":"does_require_two_factor_authentication_from_group"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":49,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"LAST_ACTIVITY_ON":{"type":"TIMESTAMP_NTZ","index":50,"name":"LAST_ACTIVITY_ON","comment":null,"display_name":"last_activity_on"},"IS_NOTIFIED_OF_OWN_ACTIVITY":{"type":"BOOLEAN","index":51,"name":"IS_NOTIFIED_OF_OWN_ACTIVITY","comment":null,"display_name":"is_notified_of_own_activity"},"PREFERRED_LANGUAGE":{"type":"TEXT","index":52,"name":"PREFERRED_LANGUAGE","comment":null,"display_name":"preferred_language"},"THEME_ID":{"type":"NUMBER","index":53,"name":"THEME_ID","comment":null,"display_name":"theme_id"},"ACCEPTED_TERM_ID":{"type":"NUMBER","index":54,"name":"ACCEPTED_TERM_ID","comment":null,"display_name":"accepted_term_id"},"IS_PRIVATE_PROFILE":{"type":"BOOLEAN","index":55,"name":"IS_PRIVATE_PROFILE","comment":null,"display_name":"is_private_profile"},"ROADMAP_LAYOUT":{"type":"NUMBER","index":56,"name":"ROADMAP_LAYOUT","comment":null,"display_name":"roadmap_layout"},"INCLUDE_PRIVATE_CONTRIBUTIONS":{"type":"BOOLEAN","index":57,"name":"INCLUDE_PRIVATE_CONTRIBUTIONS","comment":null,"display_name":"include_private_contributions"},"GROUP_VIEW":{"type":"NUMBER","index":58,"name":"GROUP_VIEW","comment":null,"display_name":"group_view"},"MANAGING_GROUP_ID":{"type":"NUMBER","index":59,"name":"MANAGING_GROUP_ID","comment":null,"display_name":"managing_group_id"},"ROLE_ID":{"type":"NUMBER","index":60,"name":"role_id","comment":null,"description":"This is the integer representation of a user's role, as it's stored in the database.","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 99"}],"display_name":"role_id"},"ROLE":{"type":"TEXT","index":61,"name":"role","comment":null,"description":"This is the string translation of the \"role\" column stored as an integer in the source database. It is converted using the `user_role_mapping` macro.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role"},"USER_NAME":{"type":"TEXT","index":62,"name":"USER_NAME","comment":null,"display_name":"user_name"},"FIRST_NAME":{"type":"TEXT","index":63,"name":"FIRST_NAME","comment":null,"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":64,"name":"LAST_NAME","comment":null,"display_name":"last_name"},"USERS_NAME":{"type":"TEXT","index":65,"name":"USERS_NAME","comment":null,"display_name":"users_name"},"USER_TYPE":{"type":"NUMBER","index":66,"name":"USER_TYPE","comment":null,"display_name":"user_type"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":67,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_users_source","raw_sql":"$41","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.user_role_mapping","macro.gitlab_snowflake.it_job_title_hierarchy","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_users_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_users_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","name":"gitlab_dotcom_users_source","alias":"gitlab_dotcom_users_source","checksum":{"name":"sha256","checksum":"d544057bc6881cafe8a9b9ae7e63e13e9a9a247622c8e2cd0f8f04b45698f970"},"tags":["sources"],"refs":[["gitlab_dotcom_users_dedupe_source"],["gitlab_dotcom_users_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com users, the following fields are hidden for privacy `current_sign_in_ip`, `last_sign_in_ip`, `unconfirmed_email`, `website_url`, `notification_email`, `public_email`, `note`, `organization`","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_users_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.402963,"compiled_sql":"$42","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_users_source","label":"gitlab_dotcom_users_source"},{"metadata":{"type":"VIEW","schema":"GITLAB_DOTCOM","name":"GITLAB_DOTCOM_PROJECTS_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"PROJECT_ID":{"type":"NUMBER","index":1,"name":"project_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"project_id"},"PROJECT_DESCRIPTION":{"type":"TEXT","index":2,"name":"project_description","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_description"},"PROJECT_IMPORT_SOURCE":{"type":"TEXT","index":3,"name":"project_import_source","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_import_source"},"PROJECT_ISSUES_TEMPLATE":{"type":"TEXT","index":4,"name":"project_issues_template","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_issues_template"},"PROJECT_BUILD_COVERAGE_REGEX":{"type":"TEXT","index":5,"name":"project_build_coverage_regex","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_build_coverage_regex"},"PROJECT_NAME":{"type":"TEXT","index":6,"name":"project_name","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_name"},"PROJECT_PATH":{"type":"TEXT","index":7,"name":"project_path","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_path"},"PROJECT_IMPORT_URL":{"type":"TEXT","index":8,"name":"project_import_url","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_import_url"},"PROJECT_MERGE_REQUESTS_TEMPLATE":{"type":"TEXT","index":9,"name":"project_merge_requests_template","comment":null,"description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"project_merge_requests_template"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":11,"name":"updated_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":["tdf","gitlab_dotcom"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"updated_at"},"CREATOR_ID":{"type":"NUMBER","index":12,"name":"CREATOR_ID","comment":null,"display_name":"creator_id"},"NAMESPACE_ID":{"type":"NUMBER","index":13,"name":"NAMESPACE_ID","comment":null,"display_name":"namespace_id"},"LAST_ACTIVITY_AT":{"type":"TIMESTAMP_NTZ","index":14,"name":"LAST_ACTIVITY_AT","comment":null,"display_name":"last_activity_at"},"VISIBILITY_LEVEL":{"type":"TEXT","index":15,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"ARCHIVED":{"type":"BOOLEAN","index":16,"name":"ARCHIVED","comment":null,"display_name":"archived"},"HAS_AVATAR":{"type":"BOOLEAN","index":17,"name":"has_avatar","comment":null,"description":"This field will try to find an avatar file, if none is available will set this value as False, otherwise True.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"has_avatar"},"PROJECT_STAR_COUNT":{"type":"NUMBER","index":18,"name":"PROJECT_STAR_COUNT","comment":null,"display_name":"project_star_count"},"MERGE_REQUESTS_REBASE_ENABLED":{"type":"BOOLEAN","index":19,"name":"MERGE_REQUESTS_REBASE_ENABLED","comment":null,"display_name":"merge_requests_rebase_enabled"},"IMPORT_TYPE":{"type":"TEXT","index":20,"name":"IMPORT_TYPE","comment":null,"display_name":"import_type"},"APPROVALS_BEFORE_MERGE":{"type":"NUMBER","index":21,"name":"APPROVALS_BEFORE_MERGE","comment":null,"display_name":"approvals_before_merge"},"RESET_APPROVALS_ON_PUSH":{"type":"BOOLEAN","index":22,"name":"RESET_APPROVALS_ON_PUSH","comment":null,"display_name":"reset_approvals_on_push"},"MERGE_REQUESTS_FF_ONLY_ENABLED":{"type":"BOOLEAN","index":23,"name":"MERGE_REQUESTS_FF_ONLY_ENABLED","comment":null,"display_name":"merge_requests_ff_only_enabled"},"MIRROR":{"type":"BOOLEAN","index":24,"name":"MIRROR","comment":null,"display_name":"mirror"},"MIRROR_USER_ID":{"type":"NUMBER","index":25,"name":"MIRROR_USER_ID","comment":null,"display_name":"mirror_user_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":26,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"BUILD_ALLOW_GIT_FETCH":{"type":"BOOLEAN","index":27,"name":"BUILD_ALLOW_GIT_FETCH","comment":null,"display_name":"build_allow_git_fetch"},"BUILD_TIMEOUT":{"type":"NUMBER","index":28,"name":"BUILD_TIMEOUT","comment":null,"display_name":"build_timeout"},"MIRROR_TRIGGER_BUILDS":{"type":"BOOLEAN","index":29,"name":"MIRROR_TRIGGER_BUILDS","comment":null,"display_name":"mirror_trigger_builds"},"PENDING_DELETE":{"type":"BOOLEAN","index":30,"name":"PENDING_DELETE","comment":null,"display_name":"pending_delete"},"PUBLIC_BUILDS":{"type":"BOOLEAN","index":31,"name":"PUBLIC_BUILDS","comment":null,"display_name":"public_builds"},"LAST_REPOSITORY_CHECK_FAILED":{"type":"BOOLEAN","index":32,"name":"LAST_REPOSITORY_CHECK_FAILED","comment":null,"display_name":"last_repository_check_failed"},"LAST_REPOSITORY_CHECK_AT":{"type":"TIMESTAMP_NTZ","index":33,"name":"LAST_REPOSITORY_CHECK_AT","comment":null,"display_name":"last_repository_check_at"},"CONTAINER_REGISTRY_ENABLED":{"type":"BOOLEAN","index":34,"name":"CONTAINER_REGISTRY_ENABLED","comment":null,"display_name":"container_registry_enabled"},"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS":{"type":"BOOLEAN","index":35,"name":"ONLY_ALLOW_MERGE_IF_PIPELINE_SUCCEEDS","comment":null,"display_name":"only_allow_merge_if_pipeline_succeeds"},"HAS_EXTERNAL_ISSUE_TRACKER":{"type":"BOOLEAN","index":36,"name":"HAS_EXTERNAL_ISSUE_TRACKER","comment":null,"display_name":"has_external_issue_tracker"},"REPOSITORY_STORAGE":{"type":"TEXT","index":37,"name":"REPOSITORY_STORAGE","comment":null,"display_name":"repository_storage"},"REPOSITORY_READ_ONLY":{"type":"BOOLEAN","index":38,"name":"REPOSITORY_READ_ONLY","comment":null,"display_name":"repository_read_only"},"REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":39,"name":"REQUEST_ACCESS_ENABLED","comment":null,"display_name":"request_access_enabled"},"HAS_EXTERNAL_WIKI":{"type":"BOOLEAN","index":40,"name":"HAS_EXTERNAL_WIKI","comment":null,"display_name":"has_external_wiki"},"CI_CONFIG_PATH":{"type":"TEXT","index":41,"name":"CI_CONFIG_PATH","comment":null,"display_name":"ci_config_path"},"LFS_ENABLED":{"type":"BOOLEAN","index":42,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED":{"type":"BOOLEAN","index":43,"name":"ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED","comment":null,"display_name":"only_allow_merge_if_all_discussions_are_resolved"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":44,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"PRINTING_MERGE_REQUEST_LINK_ENABLED":{"type":"BOOLEAN","index":45,"name":"PRINTING_MERGE_REQUEST_LINK_ENABLED","comment":null,"display_name":"printing_merge_request_link_enabled"},"HAS_AUTO_CANCELING_PENDING_PIPELINES":{"type":"BOOLEAN","index":46,"name":"HAS_AUTO_CANCELING_PENDING_PIPELINES","comment":null,"display_name":"has_auto_canceling_pending_pipelines"},"SERVICE_DESK_ENABLED":{"type":"BOOLEAN","index":47,"name":"SERVICE_DESK_ENABLED","comment":null,"display_name":"service_desk_enabled"},"DELETE_ERROR":{"type":"TEXT","index":48,"name":"DELETE_ERROR","comment":null,"display_name":"delete_error"},"LAST_REPOSITORY_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":49,"name":"LAST_REPOSITORY_UPDATED_AT","comment":null,"display_name":"last_repository_updated_at"},"STORAGE_VERSION":{"type":"NUMBER","index":50,"name":"STORAGE_VERSION","comment":null,"display_name":"storage_version"},"RESOLVE_OUTDATED_DIFF_DISCUSSIONS":{"type":"BOOLEAN","index":51,"name":"RESOLVE_OUTDATED_DIFF_DISCUSSIONS","comment":null,"display_name":"resolve_outdated_diff_discussions"},"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST":{"type":"BOOLEAN","index":52,"name":"DISABLE_OVERRIDING_APPROVERS_PER_MERGE_REQUEST","comment":null,"display_name":"disable_overriding_approvers_per_merge_request"},"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":53,"name":"REMOTE_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"remote_mirror_available_overridden"},"ONLY_MIRROR_PROTECTED_BRANCHES":{"type":"BOOLEAN","index":54,"name":"ONLY_MIRROR_PROTECTED_BRANCHES","comment":null,"display_name":"only_mirror_protected_branches"},"PULL_MIRROR_AVAILABLE_OVERRIDDEN":{"type":"BOOLEAN","index":55,"name":"PULL_MIRROR_AVAILABLE_OVERRIDDEN","comment":null,"display_name":"pull_mirror_available_overridden"},"MIRROR_OVERWRITES_DIVERGED_BRANCHES":{"type":"BOOLEAN","index":56,"name":"MIRROR_OVERWRITES_DIVERGED_BRANCHES","comment":null,"display_name":"mirror_overwrites_diverged_branches"},"EXTERNAL_AUTHORIZATION_CLASSIFICATION_LABEL":{"type":"TEXT","index":57,"name":"EXTERNAL_AUTHORIZATION_CLASSIFICATION_LABEL","comment":null,"display_name":"external_authorization_classification_label"},"PROJECT_NAMESPACE_ID":{"type":"NUMBER","index":58,"name":"PROJECT_NAMESPACE_ID","comment":null,"display_name":"project_namespace_id"},"visbility_level":{"name":"visbility_level","description":"This content will be masked for privacy in one of the following conditions:\n * If this is an issue, and the issue is set to `confidential`\n * If the namespace or project visibility level is set to \"internal\" (`visibility_level` = 10) or \"private\" (`visibility_level` = 0).\n    * The visibility values can be validated by going to the [project navigation](https://gitlab.com/explore) and using the keyboard shortcut \"pb\" to show how the front-end queries for visibility.\n * Public projects are defined with a `visibility_level` of 20   \n * In all the above cases,  the content will *not* be masked if the namespace_id is in:\n   * 6543: gitlab-com\n   * 9970: gitlab-org\n   * 4347861: gitlab-data","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"visbility_level"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.gitlab_dotcom_projects_source","raw_sql":"$43","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_projects_dedupe_source","model.gitlab_snowflake.gitlab_dotcom_projects_dedupe_source"]},"config":{"enabled":true,"alias":null,"schema":"gitlab_dotcom","database":"PREP","tags":["sources"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"gitlab_dotcom","fqn":["gitlab_snowflake","sources","gitlab_dotcom","renamed","gitlab_dotcom_projects_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/gitlab_dotcom/renamed/gitlab_dotcom_projects_source.sql","original_file_path":"models/sources/gitlab_dotcom/renamed/gitlab_dotcom_projects_source.sql","name":"gitlab_dotcom_projects_source","alias":"gitlab_dotcom_projects_source","checksum":{"name":"sha256","checksum":"9959b736a0bda737bd729def435bca30a20f027e63750f8916a02e8c4b6a23a9"},"tags":["sources"],"refs":[["gitlab_dotcom_projects_dedupe_source"],["gitlab_dotcom_projects_dedupe_source"]],"sources":[],"metrics":[],"description":"Base model for Gitlab.com projects","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/gitlab_dotcom/renamed/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/gitlab_dotcom/renamed/gitlab_dotcom_projects_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"gitlab_dotcom","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["sources"]},"created_at":1689033740.2832115,"compiled_sql":"$44","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".gitlab_dotcom.gitlab_dotcom_projects_source","label":"gitlab_dotcom_projects_source"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_USER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_USER_SK":{"type":"TEXT","index":1,"name":"DIM_USER_SK","comment":null,"display_name":"dim_user_sk"},"USER_ID":{"type":"NUMBER","index":2,"name":"USER_ID","comment":null,"display_name":"user_id"},"DIM_USER_ID":{"type":"NUMBER","index":3,"name":"dim_user_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_user_id"},"REMEMBER_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"REMEMBER_CREATED_AT","comment":null,"display_name":"remember_created_at"},"SIGN_IN_COUNT":{"type":"NUMBER","index":5,"name":"SIGN_IN_COUNT","comment":null,"display_name":"sign_in_count"},"CURRENT_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":6,"name":"CURRENT_SIGN_IN_AT","comment":null,"display_name":"current_sign_in_at"},"LAST_SIGN_IN_AT":{"type":"TIMESTAMP_NTZ","index":7,"name":"LAST_SIGN_IN_AT","comment":null,"display_name":"last_sign_in_at"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"CREATED_AT","comment":null,"display_name":"created_at"},"CREATED_DATE_ID":{"type":"NUMBER","index":9,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":10,"name":"UPDATED_AT","comment":null,"display_name":"updated_at"},"IS_ADMIN":{"type":"BOOLEAN","index":11,"name":"IS_ADMIN","comment":null,"display_name":"is_admin"},"USER_STATE":{"type":"TEXT","index":12,"name":"USER_STATE","comment":null,"display_name":"user_state"},"IS_BLOCKED_USER":{"type":"BOOLEAN","index":13,"name":"is_blocked_user","comment":null,"description":"TRUE if user_state is one of 'blocked' or 'banned', otherwise FALSE","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_blocked_user"},"NOTIFICATION_EMAIL_DOMAIN":{"type":"TEXT","index":14,"name":"NOTIFICATION_EMAIL_DOMAIN","comment":null,"display_name":"notification_email_domain"},"NOTIFICATION_EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":15,"name":"NOTIFICATION_EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"notification_email_domain_classification"},"EMAIL_DOMAIN":{"type":"TEXT","index":16,"name":"EMAIL_DOMAIN","comment":null,"display_name":"email_domain"},"EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":17,"name":"EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"email_domain_classification"},"PUBLIC_EMAIL_DOMAIN":{"type":"TEXT","index":18,"name":"PUBLIC_EMAIL_DOMAIN","comment":null,"display_name":"public_email_domain"},"PUBLIC_EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":19,"name":"PUBLIC_EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"public_email_domain_classification"},"COMMIT_EMAIL_DOMAIN":{"type":"TEXT","index":20,"name":"COMMIT_EMAIL_DOMAIN","comment":null,"display_name":"commit_email_domain"},"COMMIT_EMAIL_DOMAIN_CLASSIFICATION":{"type":"TEXT","index":21,"name":"COMMIT_EMAIL_DOMAIN_CLASSIFICATION","comment":null,"display_name":"commit_email_domain_classification"},"IDENTITY_PROVIDER":{"type":"TEXT","index":22,"name":"IDENTITY_PROVIDER","comment":null,"display_name":"identity_provider"},"ROLE":{"type":"TEXT","index":23,"name":"role","comment":null,"description":"User role in company selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"role"},"LAST_ACTIVITY_DATE":{"type":"TEXT","index":24,"name":"last_activity_date","comment":null,"description":"Date of last User Activity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_activity_date"},"LAST_SIGN_IN_DATE":{"type":"TEXT","index":25,"name":"last_sign_in_date","comment":null,"description":"Last time the User signed in","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_sign_in_date"},"SETUP_FOR_COMPANY":{"type":"TEXT","index":26,"name":"setup_for_company","comment":null,"description":"Is the Product setup for Company use selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"setup_for_company"},"JOBS_TO_BE_DONE":{"type":"TEXT","index":27,"name":"jobs_to_be_done","comment":null,"description":"What the product is used for","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"jobs_to_be_done"},"FOR_BUSINESS_USE":{"type":"TEXT","index":28,"name":"for_business_use","comment":null,"description":"Product is used for Business selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"for_business_use"},"EMPLOYEE_COUNT":{"type":"TEXT","index":29,"name":"employee_count","comment":null,"description":"Number of employees selected during registraion","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"employee_count"},"COUNTRY":{"type":"TEXT","index":30,"name":"country","comment":null,"description":"User Country selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"STATE":{"type":"TEXT","index":31,"name":"state","comment":null,"description":"A state that is part of the given country selected during registration","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"state"},"CREATED_BY":{"type":"TEXT","index":32,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":33,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":34,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":35,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":36,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":37,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 11:20UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1028433408,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_user","raw_sql":"$45","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.driveload_email_domain_classification_source","model.gitlab_snowflake.driveload_email_domain_classification_source","model.gitlab_snowflake.gitlab_dotcom_identities_source","model.gitlab_snowflake.gitlab_dotcom_identities_source","model.gitlab_snowflake.gitlab_dotcom_user_preferences_source","model.gitlab_snowflake.gitlab_dotcom_user_preferences_source","model.gitlab_snowflake.gitlab_dotcom_user_details_source","model.gitlab_snowflake.gitlab_dotcom_user_details_source","model.gitlab_snowflake.customers_db_leads_source","model.gitlab_snowflake.customers_db_leads_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["product"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":"dim_user_id","on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_user"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_user.sql","original_file_path":"models/common_prep/prep_user.sql","name":"prep_user","alias":"prep_user","checksum":{"name":"sha256","checksum":"6e337de8734a9b8a0a67b7b6e46880cfb6293a1665a09e683e831215df6100f9"},"tags":["product"],"refs":[["dim_date"],["dim_date"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["driveload_email_domain_classification_source"],["driveload_email_domain_classification_source"],["gitlab_dotcom_identities_source"],["gitlab_dotcom_identities_source"],["gitlab_dotcom_user_preferences_source"],["gitlab_dotcom_user_preferences_source"],["gitlab_dotcom_user_details_source"],["gitlab_dotcom_user_details_source"],["customers_db_leads_source"],["customers_db_leads_source"]],"sources":[],"metrics":[],"description":"Prep table for the dim table `dim_user`.\n\nThis table is currently the first iteration. This is a relatively narrow table. A lot of metadata needs to be added.\n\nMissing Column Values:\n* Unknown - Value is Null in source data\n* Not Found - Row Not found in source data\nThe following Columns have a Varchar Data Type and are set up to handle Missing Column Values:      \n* role \n* last_activity_date             \n* last_sign_in_date \n* setup_for_company       \n* jobs_to_be_done\n* for_business_use                 \n* employee_count\n* country\n* state","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_user.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["product"],"unique_key":"dim_user_id"},"created_at":1689033756.6662312,"compiled_sql":"$46","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_user","label":"prep_user"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_NAMESPACE_HIST","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"NAMESPACE_SNAPSHOT_ID":{"type":"TEXT","index":1,"name":"namespace_snapshot_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"namespace_snapshot_id"},"DIM_NAMESPACE_ID":{"type":"NUMBER","index":2,"name":"dim_namespace_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_namespace_id"},"NAMESPACE_NAME":{"type":"TEXT","index":3,"name":"NAMESPACE_NAME","comment":null,"display_name":"namespace_name"},"NAMESPACE_PATH":{"type":"TEXT","index":4,"name":"NAMESPACE_PATH","comment":null,"display_name":"namespace_path"},"OWNER_ID":{"type":"NUMBER","index":5,"name":"OWNER_ID","comment":null,"display_name":"owner_id"},"NAMESPACE_TYPE":{"type":"TEXT","index":6,"name":"NAMESPACE_TYPE","comment":null,"display_name":"namespace_type"},"HAS_AVATAR":{"type":"BOOLEAN","index":7,"name":"HAS_AVATAR","comment":null,"display_name":"has_avatar"},"NAMESPACE_CREATED_AT":{"type":"TIMESTAMP_NTZ","index":8,"name":"NAMESPACE_CREATED_AT","comment":null,"display_name":"namespace_created_at"},"NAMESPACE_UPDATED_AT":{"type":"TIMESTAMP_NTZ","index":9,"name":"NAMESPACE_UPDATED_AT","comment":null,"display_name":"namespace_updated_at"},"IS_MEMBERSHIP_LOCKED":{"type":"BOOLEAN","index":10,"name":"IS_MEMBERSHIP_LOCKED","comment":null,"display_name":"is_membership_locked"},"HAS_REQUEST_ACCESS_ENABLED":{"type":"BOOLEAN","index":11,"name":"HAS_REQUEST_ACCESS_ENABLED","comment":null,"display_name":"has_request_access_enabled"},"HAS_SHARE_WITH_GROUP_LOCKED":{"type":"BOOLEAN","index":12,"name":"HAS_SHARE_WITH_GROUP_LOCKED","comment":null,"display_name":"has_share_with_group_locked"},"VISIBILITY_LEVEL":{"type":"TEXT","index":13,"name":"VISIBILITY_LEVEL","comment":null,"display_name":"visibility_level"},"LDAP_SYNC_STATUS":{"type":"TEXT","index":14,"name":"LDAP_SYNC_STATUS","comment":null,"display_name":"ldap_sync_status"},"LDAP_SYNC_ERROR":{"type":"TEXT","index":15,"name":"LDAP_SYNC_ERROR","comment":null,"display_name":"ldap_sync_error"},"LDAP_SYNC_LAST_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":16,"name":"LDAP_SYNC_LAST_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_update_at"},"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT":{"type":"TIMESTAMP_NTZ","index":17,"name":"LDAP_SYNC_LAST_SUCCESSFUL_UPDATE_AT","comment":null,"display_name":"ldap_sync_last_successful_update_at"},"LDAP_SYNC_LAST_SYNC_AT":{"type":"TIMESTAMP_NTZ","index":18,"name":"LDAP_SYNC_LAST_SYNC_AT","comment":null,"display_name":"ldap_sync_last_sync_at"},"LFS_ENABLED":{"type":"BOOLEAN","index":19,"name":"LFS_ENABLED","comment":null,"display_name":"lfs_enabled"},"PARENT_ID":{"type":"NUMBER","index":20,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SHARED_RUNNERS_ENABLED":{"type":"BOOLEAN","index":21,"name":"SHARED_RUNNERS_ENABLED","comment":null,"display_name":"shared_runners_enabled"},"SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":22,"name":"SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"shared_runners_minutes_limit"},"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT":{"type":"NUMBER","index":23,"name":"EXTRA_SHARED_RUNNERS_MINUTES_LIMIT","comment":null,"display_name":"extra_shared_runners_minutes_limit"},"REPOSITORY_SIZE_LIMIT":{"type":"NUMBER","index":24,"name":"REPOSITORY_SIZE_LIMIT","comment":null,"display_name":"repository_size_limit"},"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION":{"type":"BOOLEAN","index":25,"name":"DOES_REQUIRE_TWO_FACTOR_AUTHENTICATION","comment":null,"display_name":"does_require_two_factor_authentication"},"TWO_FACTOR_GRACE_PERIOD":{"type":"NUMBER","index":26,"name":"TWO_FACTOR_GRACE_PERIOD","comment":null,"display_name":"two_factor_grace_period"},"PROJECT_CREATION_LEVEL":{"type":"NUMBER","index":27,"name":"PROJECT_CREATION_LEVEL","comment":null,"display_name":"project_creation_level"},"PUSH_RULE_ID":{"type":"NUMBER","index":28,"name":"PUSH_RULE_ID","comment":null,"display_name":"push_rule_id"},"VALID_FROM":{"type":"TIMESTAMP_NTZ","index":29,"name":"valid_from","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"valid_from"},"VALID_TO":{"type":"TIMESTAMP_NTZ","index":30,"name":"valid_to","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"valid_to"},"CREATED_BY":{"type":"TEXT","index":31,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":32,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":33,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":34,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":35,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":36,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:55UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":4080452096,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_namespace_hist","raw_sql":"$47","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.snapshots.gitlab_dotcom_namespaces_snapshots"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_namespace_hist"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_namespace_hist.sql","original_file_path":"models/common_prep/prep_namespace_hist.sql","name":"prep_namespace_hist","alias":"prep_namespace_hist","checksum":{"name":"sha256","checksum":"a3fca72b2032d23f87ca3d46cef5358784fdefa176b6d1e8e98b75be0ab76647"},"tags":[],"refs":[],"sources":[["snapshots","gitlab_dotcom_namespaces_snapshots"]],"metrics":[],"description":"Table containing GitLab namespace snapshots.\n\nThe grain of this table is one row per namespace per valid_to/valid_from combination. The Primary Key is `namespace_snapshot_id`.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_namespace_hist.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.4444199,"compiled_sql":"$48","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_namespace_hist","label":"prep_namespace_hist"},{"metadata":{"type":"VIEW","schema":"COMMON_MAPPING","name":"MAP_NAMESPACE_INTERNAL","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ULTIMATE_PARENT_NAMESPACE_ID":{"type":"NUMBER","index":1,"name":"ultimate_parent_namespace_id","comment":null,"description":"The ultimate parent namespace identifiers that are internal to gitlab.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"ultimate_parent_namespace_id"},"CREATED_BY":{"type":"TEXT","index":2,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":3,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":4,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":5,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":6,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":7,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.map_namespace_internal","raw_sql":"{{ config({\n        \"materialized\": \"view\",\n    })\n}}\n\nWITH final AS (\n\n  SELECT DISTINCT \n    namespace_id AS ultimate_parent_namespace_id\n  FROM {{ref('internal_gitlab_namespaces')}}\n  WHERE namespace_id IS NOT NULL\n\n)\n\n\n{{ dbt_audit(\n    cte_ref=\"final\",\n    created_by=\"@snalamaru\",\n    updated_by=\"@pempey\",\n    created_date=\"2020-12-29\",\n    updated_date=\"2023-01-31\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["seed.gitlab_snowflake.internal_gitlab_namespaces","seed.gitlab_snowflake.internal_gitlab_namespaces"]},"config":{"enabled":true,"alias":null,"schema":"common_mapping","database":"PROD","tags":[],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_mapping","fqn":["gitlab_snowflake","common_mapping","map_namespace_internal"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_mapping/map_namespace_internal.sql","original_file_path":"models/common_mapping/map_namespace_internal.sql","name":"map_namespace_internal","alias":"map_namespace_internal","checksum":{"name":"sha256","checksum":"00dd1ad3db48221e0775590c7c26a78f770b9828d9aafec1316c56f6523c8c8c"},"tags":[],"refs":[["internal_gitlab_namespaces"],["internal_gitlab_namespaces"]],"sources":[],"metrics":[],"description":"This View contains the list of ultimate parent namespace ids that are internal to gitlab. In the future this list should be sourced from an upstream data sources or determined based on billing account in customer db if possible.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_mapping/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_mapping/map_namespace_internal.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_mapping","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view"},"created_at":1689033765.6522923,"compiled_sql":"\n\nWITH final AS (\n\n  SELECT DISTINCT \n    namespace_id AS ultimate_parent_namespace_id\n  FROM \"PROD\".legacy.internal_gitlab_namespaces\n  WHERE namespace_id IS NOT NULL\n\n)\n\n\nSELECT\n      *,\n      '@snalamaru'::VARCHAR       AS created_by,\n      '@pempey'::VARCHAR       AS updated_by,\n      '2020-12-29'::DATE        AS model_created_date,\n      '2023-01-31'::DATE        AS model_updated_date,\n      CURRENT_TIMESTAMP()               AS dbt_updated_at,\n\n    \n\n        \n\n            CURRENT_TIMESTAMP()               AS dbt_created_at\n\n        \n    \n    \n\n    FROM final","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_mapping.map_namespace_internal","label":"map_namespace_internal"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_AUDIT_EVENT_DETAILS_CLEAN","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"AUDIT_EVENT_ID":{"type":"NUMBER","index":1,"name":"audit_event_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"audit_event_id"},"KEY_NAME":{"type":"TEXT","index":2,"name":"key_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"key_name"},"KEY_VALUE":{"type":"TEXT","index":3,"name":"key_value","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"key_value"},"CREATED_AT":{"type":"TIMESTAMP_NTZ","index":4,"name":"created_at","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"created_at"},"CREATED_BY":{"type":"TEXT","index":5,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":6,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":7,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":8,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":9,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":10,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:30UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":138628697600,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_audit_event_details_clean","raw_sql":"WITH non_pii_details AS (\n\n    SELECT\n      audit_event_id,\n      key_name,\n      key_value,\n      created_at\n    FROM {{ ref('gitlab_dotcom_audit_event_details') }}\n    WHERE key_name != 'target_details'\n\n), pii_details AS (\n\n    SELECT \n      audit_event_id,\n      key_name,\n      key_value_hash AS key_value,\n      created_at\n    FROM {{ ref('gitlab_dotcom_audit_event_details_pii') }}\n\n), unioned AS (\n\n    SELECT *\n    FROM non_pii_details\n    UNION ALL\n    SELECT *\n    FROM pii_details\n\n)\n\n{{ dbt_audit(\n    cte_ref=\"unioned\",\n    created_by=\"@ischweickartDD\",\n    updated_by=\"@ischweickartDD\",\n    created_date=\"2021-06-16\",\n    updated_date=\"2021-06-16\"\n) }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_audit_event_details","model.gitlab_snowflake.gitlab_dotcom_audit_event_details","model.gitlab_snowflake.gitlab_dotcom_audit_event_details_pii","model.gitlab_snowflake.gitlab_dotcom_audit_event_details_pii"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_audit_event_details_clean"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_audit_event_details_clean.sql","original_file_path":"models/common_prep/prep_audit_event_details_clean.sql","name":"prep_audit_event_details_clean","alias":"prep_audit_event_details_clean","checksum":{"name":"sha256","checksum":"18ad8a8b209138c104dafc2a90603ca27abfbfe9c4d48029128e19ca8d3e9964"},"tags":[],"refs":[["gitlab_dotcom_audit_event_details"],["gitlab_dotcom_audit_event_details"],["gitlab_dotcom_audit_event_details_pii"],["gitlab_dotcom_audit_event_details_pii"]],"sources":[],"metrics":[],"description":"All GitLab audit event details, with pii replaced with hashes. Created by a union of audit event keys from `gitlab_dotcom_audit_event_details` and `gitlab_dotcom_audit_event_details_pii`.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_audit_event_details_clean.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.405797,"compiled_sql":"WITH non_pii_details AS (\n\n    SELECT\n      audit_event_id,\n      key_name,\n      key_value,\n      created_at\n    FROM \"PREP\".sensitive.gitlab_dotcom_audit_event_details\n    WHERE key_name != 'target_details'\n\n), pii_details AS (\n\n    SELECT \n      audit_event_id,\n      key_name,\n      key_value_hash AS key_value,\n      created_at\n    FROM \"PREP\".sensitive.gitlab_dotcom_audit_event_details_pii\n\n), unioned AS (\n\n    SELECT *\n    FROM non_pii_details\n    UNION ALL\n    SELECT *\n    FROM pii_details\n\n)\n\nSELECT\n      *,\n      '@ischweickartDD'::VARCHAR       AS created_by,\n      '@ischweickartDD'::VARCHAR       AS updated_by,\n      '2021-06-16'::DATE        AS model_created_date,\n      '2021-06-16'::DATE        AS model_updated_date,\n      CURRENT_TIMESTAMP()               AS dbt_updated_at,\n\n    \n\n        \n\n            CURRENT_TIMESTAMP()               AS dbt_created_at\n\n        \n    \n    \n\n    FROM unioned","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_audit_event_details_clean","label":"prep_audit_event_details_clean"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_PRODUCT_TIER","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_PRODUCT_TIER_ID":{"type":"TEXT","index":1,"name":"dim_product_tier_id","comment":null,"description":"The unique identifier of Pricing tiers for Zuora Products","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_product_tier_id"},"PRODUCT_TIER_HISTORICAL":{"type":"TEXT","index":2,"name":"product_tier_historical","comment":null,"description":"Product pricing tiers prior to [tier renaming](https://gitlab-com.gitlab.io/packaging-and-pricing/pricing-handbook/handbook/renaming_tiers/) (early 2021).","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"product_tier_historical"},"PRODUCT_TIER_HISTORICAL_SHORT":{"type":"TEXT","index":3,"name":"product_tier_historical_short","comment":null,"description":"Pulls the product tier from `product_tier_historical` with the delivery type removed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_historical_short"},"PRODUCT_TIER_NAME":{"type":"TEXT","index":4,"name":"product_tier_name","comment":null,"description":"Product [pricing tiers](https://about.gitlab.com/handbook/marketing/strategic-marketing/tiers/) for both SaaS and Self-Managed customers. Includes the mapping from SaaS - Silver to SaaS - Premium, and from SaaS - Gold to SaaS - Ultimate.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_tier_name"},"PRODUCT_TIER_NAME_SHORT":{"type":"TEXT","index":5,"name":"product_tier_name_short","comment":null,"description":"Pulls the product tier from `product_tier_name` with the delivery type removed","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_tier_name_short"},"PRODUCT_DELIVERY_TYPE":{"type":"TEXT","index":6,"name":"product_delivery_type","comment":null,"description":"How product is delivered to customer; SaaS or Self-Managed (or Other)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_delivery_type"},"PRODUCT_DEPLOYMENT_TYPE":{"type":"TEXT","index":7,"name":"product_deployment_type","comment":null,"description":"How a product is deployed to the customer; Self-Managed, GitLab.com or Dedicated (or Other).","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_deployment_type"},"PRODUCT_RANKING":{"type":"NUMBER","index":8,"name":"product_ranking","comment":null,"description":"Numeric product pricing tier, independent of delivery type","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"product_ranking"},"CREATED_BY":{"type":"TEXT","index":9,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":10,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":11,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":12,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":14,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:58UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":21504,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_product_tier","raw_sql":"$49","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_product_tier","model.gitlab_snowflake.map_product_tier"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_product_tier"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_product_tier.sql","original_file_path":"models/common_prep/prep_product_tier.sql","name":"prep_product_tier","alias":"prep_product_tier","checksum":{"name":"sha256","checksum":"9ecdec9f7d2a362329ca5ba9e6c5091197cf9dc5898b7f2cc4a40c39a8440e18"},"tags":[],"refs":[["map_product_tier"],["map_product_tier"]],"sources":[],"metrics":[],"description":"This table creates keys for the common product tier dimension that is used across gitlab.com and Zuora data sources.\n\n The granularity of the table is product_tier.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_product_tier.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033756.5543191,"compiled_sql":"$4a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_product_tier","label":"prep_product_tier"}],"macro":[{"unique_id":"macro.gitlab_snowflake.filter_out_blocked_users","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/gitlab_dotcom/filter_out_blocked_users.sql","original_file_path":"macros/gitlab_dotcom/filter_out_blocked_users.sql","name":"filter_out_blocked_users","macro_sql":"{%- macro filter_out_blocked_users(table_to_filter, user_id_column_name) -%}\n\n    NOT EXISTS (\n\n        SELECT 1\n        FROM {{ ref('gitlab_dotcom_users_source') }} users_source\n        WHERE users_source.state = 'blocked' \n          AND users_source.user_id = {{table_to_filter}}.{{user_id_column_name}}\n\n    )\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"This macro takes in the name of the table and column that contain GitLab user ids. This macro creates the SQL filter for filtering out users blocked by GitLab.\n\nThe SQL filter returned does not include a `WHERE`, `AND`, or `OR` so it can flexibly be used as any part of the `WHERE` clause.  For example, to filter out blocked users from a table named `users` with a column named `user_id`, the dbt model would look like\n\n```\n\nSELECT *\nFROM users\nWHERE {{ filter_out_blocked_users('users', 'user_id') }}\n\n```\n\nThis macro should be used downstream of source models, in models where activities of blocked users may introduce noise to metrics.  For example, this macro is used in `gitlab_dotcom_usage_data_events` to only keep events generated from legitimate use.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/gitlab_dotcom/macros.yml","arguments":[],"created_at":1689033765.9894016},{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.dbt_audit","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/dbt_audit.sql","original_file_path":"macros/utils/dbt_audit.sql","name":"dbt_audit","macro_sql":"$4b","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.dbt.run_query"]},"description":"Used to append audit columns to a model.\n\nThis model assumes that the final statement in your model is a `SELECT *` from a CTE. The final SQL will still be a `SELECT *` just with 6 additional columns added to it. Further SQL DML can be added after the macro call, such as ORDER BY and GROUP BY.\n\nThere are two internally calculated date values based on when the table is created and, for an incremental model, when data was inserted.\n\n```sql\nWITH my_cte AS (...)\n\n{{ dbt_audit(\n    cte_ref=\"my_cte\", \n    created_by=\"@gitlab_user1\", \n    updated_by=\"@gitlab_user2\", \n    created_date=\"2019-02-12\", \n    updated_date=\"2020-08-20\"\n) }}\n\nORDER BY updated_at\n```","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"cte_ref","type":"string","description":"The CTE immediately preceding the macro call"},{"name":"created_by","type":"string","description":"The GitLab handle of the original model creator"},{"name":"updated_by","type":"string","description":"The GitLab handle of the model editor"},{"name":"created_date","type":"date","description":"Manually input ISO date of when model was original created"},{"name":"updated_date","type":"date","description":"Manually input ISO date of when model was updated"}],"created_at":1689033766.0350642},{"unique_id":"macro.gitlab_snowflake.simple_cte","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/simple_cte.sql","original_file_path":"macros/utils/simple_cte.sql","name":"simple_cte","macro_sql":"{% macro simple_cte(tuple_list) %}\n\nWITH{% for cte_ref in tuple_list %} {{cte_ref[0]}} AS (\n\n    SELECT * \n    FROM {{ ref(cte_ref[1]) }}\n\n)\n    {%- if not loop.last -%}\n    ,\n    {%- endif -%}\n    \n    {%- endfor -%}\n\n{%- endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"$4c","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[{"name":"tuple_list","type":"list","description":"List of tuples with the alias as the first item and the dbt table reference as the second item."}],"created_at":1689033766.0494742},{"unique_id":"macro.gitlab_snowflake.get_keyed_nulls","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/get_keyed_nulls.sql","original_file_path":"macros/utils/get_keyed_nulls.sql","name":"get_keyed_nulls","macro_sql":"{% macro get_keyed_nulls(columns) %}\n\n  COALESCE({{columns}}, MD5(-1)) \n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":[]},"description":"This macro generates a key for facts with missing dimensions so when the fact table is joined to the dimension it joins to a record that says it's unknown as in\n\n```sql\nSELECT * \nFROM DIM_GEO_AREA \nWHERE DIM_GEO_AREA_ID = MD5(-1);\n```\n\nwhich has:\n\n```\n***************************[ 1 ]***************************\nDIM_GEO_AREA_ID    | 6bb61e3b7bce0931da574d19d1d82c88\nGEO_AREA_NAME      | Missing geo_area_name\n```\n\nGenerally this should be used when creating and keying on new dimensions that might not be fully representing in the referencing tables","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/macros.yml","arguments":[],"created_at":1689033766.0386684}]},"node":{"resource_type":"model","name":"prep_namespace","unique_id":"model.gitlab_snowflake.prep_namespace"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L4d",null,{"versions":{"Source":"$4e","Compiled":"$4f"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
