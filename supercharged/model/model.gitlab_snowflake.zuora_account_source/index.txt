1:HL["/supercharged-dbt-docs/supercharged/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css",{"as":"style"}]
0:["3_N3LAWgtmWGg2et9V1N1",[[["",{"children":["model",{"children":[["id","model.gitlab_snowflake.zuora_account_source","d"],{"children":["__PAGE__?{\"id\":\"model.gitlab_snowflake.zuora_account_source\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/supercharged-dbt-docs/supercharged/_next/static/css/26b34a05c1bebf2f.css","precedence":"next"}]],"$L4"]]]]
3:["$L5",null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Modern DBT Docs"}],["$","meta","2",{"name":"description","content":"built using React Server Components"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/supercharged-dbt-docs/supercharged/favicon.ico","type":"image/x-icon","sizes":"any"}],["$","meta","5",{"name":"next-size-adjust"}]]
7:"$Sreact.suspense"
9:I{"id":9265,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"SearchBar","async":false}
a:I{"id":7767,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
b:I{"id":7920,"chunks":["272:static/chunks/webpack-1cf6fcb2bee1c154.js","971:static/chunks/fd9d1056-e2bf51eba929fbd7.js","596:static/chunks/596-802dfd4ebffb6644.js"],"name":"default","async":false}
6:T7b2,M36.9843 63.4334C36.9851 63.7184 37.0447 64.0001 37.1592 64.261C37.2738 64.5219 37.4409 64.7564 37.65 64.9498C37.8592 65.1432 38.106 65.2913 38.375 65.3851C38.644 65.4788 38.9294 65.516 39.2134 65.4944C50.0091 64.7216 60.2053 57.0815 63.4605 45.1484C63.6315 44.4621 64.1465 44.1179 64.8326 44.1179C65.1843 44.1321 65.5162 44.2843 65.7565 44.5416C65.9967 44.7989 66.126 45.1406 66.1161 45.4926C66.1161 48.1533 62.696 55.1071 57.8051 59.1425C57.5559 59.3522 57.3571 59.6155 57.2237 59.9127C57.0903 60.21 57.0256 60.5335 57.0346 60.8593C57.0395 61.1241 57.0967 61.3854 57.2028 61.628C57.3089 61.8707 57.4619 62.0901 57.6529 62.2735C57.8439 62.4569 58.0693 62.6008 58.316 62.697C58.5627 62.7931 58.826 62.8395 59.0907 62.8337C59.5192 62.8337 60.2053 62.5761 61.0623 61.8032C64.4825 58.7117 71.001 50.0412 71.001 40.5112C71.001 26.5393 60.1992 14.4996 45.1243 14.4996C31.6729 14.4996 20.0202 25.4887 20.0202 38.1947C20.0202 46.6076 26.7036 52.9595 35.5277 52.9595C42.2976 52.9595 48.5525 48.1533 50.2666 41.5417C50.4377 40.8554 50.9507 40.5112 51.6367 40.5112C51.9886 40.5254 52.3207 40.6776 52.5613 40.9348C52.8019 41.1921 52.9316 41.5337 52.9223 41.8859C52.9223 44.8908 47.2669 55.3707 35.7852 55.3707C33.043 55.3707 29.6168 54.5979 27.2167 53.2232C26.8953 53.0675 26.5454 52.9798 26.1886 52.9656C25.9154 52.9551 25.643 53.0013 25.3886 53.1012C25.1341 53.2011 24.903 53.3526 24.7099 53.5462C24.5168 53.7397 24.3658 53.9712 24.2664 54.2259C24.167 54.4807 24.1214 54.7533 24.1325 55.0266C24.1436 55.3766 24.2438 55.718 24.4237 56.0185C24.6036 56.3189 24.8572 56.5684 25.1605 56.7434C28.3312 58.5548 32.1015 59.4906 35.9562 59.4906C45.5528 59.4906 54.2924 52.9656 56.8636 43.3511C57.0346 42.6648 57.5496 42.3206 58.2336 42.3206C58.5855 42.3348 58.9177 42.4869 59.1582 42.7442C59.3988 43.0014 59.5285 43.3431 59.5192 43.6953C59.5192 47.6441 52.4938 60.3501 38.9559 61.3805C38.4321 61.4194 37.9411 61.6505 37.5772 62.0294C37.2134 62.4083 37.0022 62.9083 36.9843 63.4334V63.4334Z5:["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0"}]}],["$","body",null,{"className":"__className_5f725a","children":[["$","main",null,{"className":"mx-8","children":["$","div",null,{"children":[["$","div",null,{}],["$","div",null,{"className":"app app-row","children":[["$","div",null,{"className":"app-menu app-column","children":[["$","div",null,{"className":"app-overlay","data-toggle":".app-menu"}],["$","div",null,{"className":"app-header app-navbar app-shadow app-pad","children":["$","div",null,{"className":"app-row app-middle","children":["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"logo","style":{"display":"flex","flexDirection":"row","alignItems":"center"},"children":[["$","span",null,{"style":{"color":"#FF694A","fontWeight":"bold"},"children":"Supercharged"}],"Â by",["$","a",null,{"href":"https://dagster.io","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","style":{"height":"46px","width":"168"},"viewBox":"0 0 280 80","fill":"none","children":[["$","path",null,{"d":"M107.498 15.2865H111.999V55.5398H107.498V51.9894H107.386C105.697 54.1852 102.996 56.3247 98.3791 56.3247C91.1738 56.3247 85.4316 50.6389 85.4316 41.1814C85.4316 31.7239 91.1738 26.0381 98.3791 26.0381C102.996 26.0381 105.697 28.0649 107.386 30.5425H107.498V15.2865ZM107.498 41.1814C107.498 34.4269 104.178 29.9789 98.8299 29.9789C92.9187 29.9789 89.934 35.552 89.934 41.1814C89.934 46.8108 92.9187 52.3839 98.8299 52.3839C104.178 52.3839 107.498 47.9359 107.498 41.1814Z","fill":"#163B36"}],["$","path",null,{"d":"M128.807 29.9789C123.346 29.9789 121.543 31.5549 121.263 35.7211H116.759C117.041 30.2044 120.474 26.0381 128.807 26.0381C134.267 26.0381 139.164 28.1776 139.164 35.0951V49.057C139.164 51.3091 139.566 52.5469 142.428 52.2088V55.3626C141.582 55.6758 140.685 55.8281 139.784 55.8115C137.081 55.8115 135.448 55.0809 134.661 51.927H134.541C132.739 54.63 129.531 56.3187 124.803 56.3187C119.005 56.3187 115.344 52.9978 115.344 48.1553C115.344 41.6262 120.184 39.9376 127.621 38.5307C132.464 37.6291 134.665 37.0092 134.665 34.1391C134.661 31.893 133.422 29.9789 128.807 29.9789ZM134.661 44.446V39.6619C133.816 40.5052 131.057 41.2941 128.02 41.914C122.445 43.0955 119.848 44.5023 119.848 47.9359C119.848 50.7536 121.537 52.3839 125.254 52.3839C130.608 52.3839 134.661 49.9627 134.661 44.446Z","fill":"#163B36"}],["$","path",null,{"d":"M165.133 26.8271H169.638V53.9598C169.638 61.6079 164.797 65.5004 156.915 65.5004C149.034 65.5004 144.36 61.3342 143.912 56.4434H148.428C148.992 59.3699 151.357 61.5657 156.704 61.5657C162.052 61.5657 165.147 59.2571 165.147 53.9176V49.5702H165.035C163.346 52.0458 160.645 54.0725 155.915 54.0725C148.823 54.0725 143.08 49.5138 143.08 40.0563C143.08 30.5988 148.823 26.0381 155.915 26.0381C160.645 26.0381 163.346 28.1776 165.035 30.3734H165.147L165.133 26.8271ZM165.133 40.0563C165.133 33.2998 161.812 29.9789 156.465 29.9789C150.553 29.9789 147.571 34.4269 147.571 40.0563C147.571 45.6858 150.553 50.1317 156.465 50.1317C161.82 50.1317 165.133 46.8108 165.133 40.0563V40.0563Z","fill":"#163B36"}],["$","path",null,{"d":"M197.314 47.6562C197.314 52.8891 192.529 56.3247 185.998 56.3247C177.217 56.3247 173.164 52.1585 172.882 45.9675H177.386C177.666 49.1757 178.795 52.3839 185.998 52.3839C190.895 52.3839 192.809 49.85 192.809 47.9359C192.809 43.7717 189.037 43.5463 184.93 42.5319C180.538 41.4632 174.007 40.956 174.007 34.2015C174.007 29.6972 178.004 26.0381 184.761 26.0381C191.91 26.0381 195.738 30.0916 196.186 35.0448H191.684C191.233 32.851 190.165 29.9789 184.761 29.9789C180.707 29.9789 178.521 31.6112 178.521 33.8634C178.521 37.2406 182.406 37.5224 186.403 38.4804C191.515 39.7182 197.314 40.5615 197.314 47.6562Z","fill":"#163B36"}],["$","path",null,{"d":"M212.535 30.7678H206.9V48.0486C206.9 51.3151 208.711 51.8726 212.535 51.5969V55.5397C211.425 55.7721 210.293 55.8854 209.158 55.8778C205.334 55.8778 202.402 54.3583 202.402 48.5034V30.7719H198.175V26.827H202.402V17.2568H206.906V26.827H212.541L212.535 30.7678Z","fill":"#163B36"}],["$","path",null,{"d":"M236.47 46.6981H240.974C239.509 52.0458 235.401 56.3247 228.252 56.3247C219.525 56.3247 214.234 50.1881 214.234 41.1814C214.234 31.6112 219.638 26.0381 228.027 26.0381C237.033 26.0381 241.425 32.1748 241.425 42.3629H218.738C218.738 47.5435 221.834 52.3839 228.083 52.3839C233.825 52.3839 235.963 48.6685 236.47 46.6981ZM218.738 38.4321H236.921C236.921 33.8151 233.431 29.9789 228.027 29.9789C222.623 29.9789 218.738 33.803 218.738 38.4321Z","fill":"#163B36"}],["$","path",null,{"d":"M260 26.2071V30.7115H259.887C253.648 29.7052 249.305 34.0887 249.305 40.2253V55.5397H244.8V26.827H249.305V32.5128H249.417C250.937 28.7411 253.242 26.0381 257.355 26.0381C258.24 26.0289 259.124 26.0854 260 26.2071V26.2071Z","fill":"#163B36"}],["$","path",null,{"d":"$6","fill":"#4F43DD"}],["$","path",null,{"d":"M50.3993 30.5546C52.2472 30.5408 54.061 31.0517 55.6302 32.0279C55.7888 31.1596 55.8762 30.2798 55.8917 29.3973C55.8917 25.3217 52.7854 21.6707 49.0031 21.6707C46.0618 21.6707 44.2229 24.1081 44.2229 27.119C44.2089 28.7455 44.7802 30.3229 45.8324 31.563C47.258 30.883 48.8201 30.5381 50.3993 30.5546V30.5546Z","fill":"white"}],["$","path",null,{"d":"M59.2616 45.3195C59.7867 43.5242 60.0181 42.2784 60.0181 41.4693C60.0021 41.1199 59.8524 40.79 59.6 40.548C59.3475 40.306 59.0117 40.1703 58.6621 40.1691C58.3364 40.1752 58.022 40.29 57.7691 40.4953C57.5161 40.7006 57.339 40.9847 57.2659 41.3023C57.123 41.892 56.8172 43.49 56.5154 44.5044C56.6402 44.1247 56.7542 43.7389 56.8575 43.3471C57.0285 42.6588 57.5435 42.3166 58.2275 42.3166C58.5792 42.3303 58.9114 42.482 59.152 42.7389C59.3926 42.9959 59.5224 43.3373 59.5131 43.6893C59.497 44.2426 59.4084 44.7913 59.2496 45.3215L59.2616 45.3195Z","fill":"#352D8E"}],["$","path",null,{"d":"M66.5446 43.4437C66.5282 43.0948 66.3786 42.7655 66.1267 42.5237C65.8748 42.2818 65.5398 42.1457 65.1907 42.1436C64.8653 42.1501 64.5514 42.2651 64.2988 42.4704C64.0463 42.6756 63.8694 42.9594 63.7964 43.2767C63.6516 43.8805 63.3397 45.5027 63.0339 46.5151H63.048C63.1969 46.0642 63.3357 45.6074 63.4504 45.1424C63.6214 44.4541 64.1364 44.1119 64.8225 44.1119C65.174 44.1256 65.5059 44.2774 65.7463 44.5344C65.9866 44.7914 66.1159 45.1328 66.1061 45.4846C66.0962 45.9119 66.0375 46.3366 65.931 46.7505C66.3575 45.2531 66.5446 44.1703 66.5446 43.4437Z","fill":"#352D8E"}],["$","path",null,{"d":"M50.3993 30.5546C51.3176 30.5527 52.232 30.6753 53.1174 30.9189C53.5822 30.2847 53.8145 29.5097 53.7752 28.7243C53.7358 27.9389 53.4272 27.191 52.9013 26.6065C52.3754 26.022 51.6642 25.6366 50.8876 25.5151C50.1109 25.3937 49.3161 25.5435 48.637 25.9396L50.0453 28.2582L47.4077 27.117C47.0504 27.6937 46.8713 28.3631 46.8928 29.0412C46.9143 29.7193 47.1354 30.376 47.5284 30.929C48.4644 30.6766 49.43 30.5507 50.3993 30.5546V30.5546Z","fill":"#163B36"}],["$","path",null,{"d":"M30.0794 45.4765C31.1906 45.4765 32.0913 44.5754 32.0913 43.4638C32.0913 42.3523 31.1906 41.4512 30.0794 41.4512C28.9683 41.4512 28.0676 42.3523 28.0676 43.4638C28.0676 44.5754 28.9683 45.4765 30.0794 45.4765Z","fill":"#352D8E"}],["$","path",null,{"d":"M30.0794 37.4259C31.1906 37.4259 32.0913 36.5248 32.0913 35.4132C32.0913 34.3017 31.1906 33.4006 30.0794 33.4006C28.9683 33.4006 28.0676 34.3017 28.0676 35.4132C28.0676 36.5248 28.9683 37.4259 30.0794 37.4259Z","fill":"#352D8E"}],["$","path",null,{"d":"M26.0558 41.4512C27.1669 41.4512 28.0676 40.5501 28.0676 39.4385C28.0676 38.3269 27.1669 37.4258 26.0558 37.4258C24.9446 37.4258 24.0439 38.3269 24.0439 39.4385C24.0439 40.5501 24.9446 41.4512 26.0558 41.4512Z","fill":"#352D8E"}],["$","path",null,{"d":"M35.1091 52.9556H35.5115C42.2815 52.9556 48.5364 48.1493 50.2505 41.5377C50.4215 40.8514 50.9345 40.5072 51.6205 40.5072C51.9724 40.5214 52.3046 40.6736 52.5451 40.9308C52.7857 41.1881 52.9154 41.5297 52.9061 41.8819C52.8754 42.5844 52.7166 43.2754 52.4374 43.9207C52.4859 43.8458 52.5283 43.767 52.5641 43.6852C53.0732 42.5212 53.3362 41.2645 53.3367 39.994C53.3367 38.0196 51.9646 36.7315 49.995 36.7315C46.5607 36.7315 45.8726 39.7304 44.4241 42.9365C42.9212 46.2655 40.1609 49.8661 33.1999 49.8661C25.9672 49.8661 18.5354 44.8003 20.3481 34.4994C20.3702 34.3706 20.3883 34.2559 20.4024 34.1492C20.1368 35.48 20.002 36.8336 20 38.1907C20.0201 46.4828 26.4963 52.7623 35.1091 52.9556Z","fill":"#352D8E"}]]}]}]]}]}]}]}],["$","div",null,{"className":"app-body","children":["$","div",null,{"className":"app-scroll app-pad app-flush-right no-x-overflow","children":["$","$7",null,{"children":"$L8"}]}]}]]}],["$","div",null,{"className":"app-content app-column","children":[["$","div",null,{"className":"app-header app-navbar app-shadow","children":["$","div",null,{"className":"app-frame app-pad app-row app-middle","children":["$","$L9",null,{}]}]}],["$","div",null,{"className":"app-body","children":["$","$7",null,{"fallback":["$","div",null,{"style":{"width":"100%","display":"grid","height":"100%","placeItems":"center"},"children":["$","div",null,{"className":"spinner spinner--active","role":"progressbar","aria-busy":"true"}]}],"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","model","children",["id","model.gitlab_snowflake.zuora_account_source","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$Lb",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lc",null],"segment":"__PAGE__?{\"id\":\"model.gitlab_snowflake.zuora_account_source\"}"},"styles":[]}],"segment":["id","model.gitlab_snowflake.zuora_account_source","d"]},"styles":[]}],"segment":"model"},"styles":[]}]}]}]]}]]}]]}]}],["$","div",null,{"style":{"display":"none"},"children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 16 16","children":[["$","title",null,{"children":"icons"}],["$","g",null,{"id":"icn","children":["$","rect",null,{"width":"16","height":"16","fill":"none"}]}],["$","g",null,{"id":"icn-menu","children":["$","path",null,{"d":"M14.5,8a.5.5,0,0,1-.5.5H2a.5.5,0,0,1,0-1H14A.5.5,0,0,1,14.5,8ZM2,3H14a.5.5,0,0,0,0-1H2A.5.5,0,0,0,2,3ZM14,13H2a.5.5,0,0,0,0,1H14a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dbt","children":["$","path",null,{"d":"M12.6,9.26h0L10.9,6.33a3.48,3.48,0,0,0-.53-.7h0A3.35,3.35,0,0,0,8,4.65a3.76,3.76,0,0,0-.82.11A4,4,0,0,1,12,6.53l.38.66a2.4,2.4,0,0,1,.21-.46l2.22-3.86a1.2,1.2,0,0,0-.2-1.5,1.21,1.21,0,0,0-1.5-.19h0L9.27,3.4a2.51,2.51,0,0,1-2.54,0L2.88,1.18a1.19,1.19,0,0,0-1.5.2,1.19,1.19,0,0,0-.2,1.49L3.4,6.73a2.49,2.49,0,0,1,0,2.53L1.18,13.12a1.2,1.2,0,0,0,.2,1.5,1.2,1.2,0,0,0,1.5.19l3.85-2.22a2.29,2.29,0,0,1,.46-.2L6.54,12a3.89,3.89,0,0,1-1.46-1.47,4.12,4.12,0,0,1-.29-3.37,3.47,3.47,0,0,0,.33,2.51,3.13,3.13,0,0,0,1.21,1.21l2.94,1.7h0l3.85,2.22a1.24,1.24,0,0,0,1.7-1.69Zm.81-7.35a.48.48,0,0,1,.68.68.5.5,0,0,1-.68,0A.48.48,0,0,1,13.41,1.91ZM2.59,2.59a.48.48,0,0,1-.68-.68.5.5,0,0,1,.68,0A.48.48,0,0,1,2.59,2.59Zm0,11.49a.48.48,0,0,1-.68,0,.48.48,0,0,1,.68-.68A.48.48,0,0,1,2.59,14.08Zm6.83-5.9a1,1,0,0,0-.27-.48A1,1,0,0,0,7.7,9.14a1,1,0,0,0,.49.27A1.39,1.39,0,0,1,7,9a1.43,1.43,0,1,1,2.43-.83Zm4.67,5.9a.48.48,0,0,1-.68-.68.48.48,0,0,1,.68.68Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc-on","children":["$","path",null,{"d":"M13.71,4.71,10.29,1.29A1,1,0,0,0,9.59,1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41A1,1,0,0,0,13.71,4.71ZM5,4H9V5H5Zm6,8H5V11h6Zm0-2H5V9h6Zm0-2H5V7h6Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-doc","children":[["$","path",null,{"d":"M9.59,2h0L13,5.41V14H3V2H9.59m0-1H3A1,1,0,0,0,2,2V14a1,1,0,0,0,1,1H13a1,1,0,0,0,1-1V5.41a1,1,0,0,0-.29-.7L10.29,1.29A1,1,0,0,0,9.59,1Z","transform":"translate(0 0)"}],["$","rect",null,{"x":"5","y":"11","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 11 5 11 5 12 11 12 11 11 11 11"}],["$","rect",null,{"x":"5","y":"9","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 9 5 9 5 10 11 10 11 9 11 9"}],["$","rect",null,{"x":"5","y":"7","width":"6","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"11 7 5 7 5 8 11 8 11 7 11 7"}],["$","rect",null,{"x":"5","y":"4","width":"4","height":"1","fill":"#fff"}],["$","polygon",null,{"points":"9 4 5 4 5 5 9 5 9 4 9 4"}]]}],["$","g",null,{"id":"icn-down","children":["$","path",null,{"d":"M8,10.5a.47.47,0,0,1-.35-.15l-3-3a.49.49,0,0,1,.7-.7L8,9.29l2.65-2.64a.49.49,0,0,1,.7.7l-3,3A.47.47,0,0,1,8,10.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-up","children":["$","path",null,{"d":"M11,9.5a.47.47,0,0,1-.35-.15L8,6.71,5.35,9.35a.49.49,0,0,1-.7-.7l3-3a.48.48,0,0,1,.7,0l3,3a.48.48,0,0,1,0,.7A.47.47,0,0,1,11,9.5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-left","children":["$","path",null,{"d":"M9.5,5a.47.47,0,0,1-.15.35L6.71,8l2.64,2.65a.49.49,0,0,1-.7.7l-3-3a.48.48,0,0,1,0-.7l3-3a.48.48,0,0,1,.7,0A.47.47,0,0,1,9.5,5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-right","children":["$","path",null,{"d":"M10.5,8a.47.47,0,0,1-.15.35l-3,3a.49.49,0,0,1-.7-.7L9.29,8,6.65,5.35a.49.49,0,0,1,.7-.7l3,3A.47.47,0,0,1,10.5,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir","children":["$","path",null,{"d":"M14,4H8.41a1,1,0,0,1-.7-.29L6.29,2.29A1,1,0,0,0,5.59,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V5A1,1,0,0,0,14,4ZM2,3H5.59l1,1H2ZM14,13H2V5H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5ZM3,4H2V3H3Zm9,9h1v1H12Zm0-5h1V9H12Zm0-5h1V4H12Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-tree-on","children":["$","path",null,{"d":"M14,5V2H11V3H4V2H1V5H4V4H7V14h4v1h3V12H11v1H8V9h3v1h3V7H11V8H8V4h3V5Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-dir-on","children":["$","path",null,{"d":"M14.88,7H14V5a1,1,0,0,0-1-1H7.41a1,1,0,0,1-.7-.29L5.29,2.29A1,1,0,0,0,4.59,2H1A1,1,0,0,0,0,3V13a1,1,0,0,0,1,1H13.27a1,1,0,0,0,1-.69l1.61-5A1,1,0,0,0,14.88,7ZM4.59,3,6,4.41A2,2,0,0,0,7.41,5H13V7H3a1,1,0,0,0-1,.69l-1,3.2V3Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db-on","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1Zm5,10.48c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3c0,.83-2.24,1.5-5,1.5S3,9.33,3,8.5V8c1.51.91,4.28,1,5,1s3.49-.07,5-1Zm0-3C13,6.33,10.76,7,8,7S3,6.33,3,5.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-db","children":["$","path",null,{"d":"M8,1C7,1,2,1.12,2,3.5v9C2,14.88,7,15,8,15s6-.12,6-2.5v-9C14,1.12,9,1,8,1ZM3,8c1.51.91,4.28,1,5,1s3.49-.07,5-1V9.5c0,.83-2.24,1.5-5,1.5s-5-.67-5-1.5ZM8,8C5.24,8,3,7.33,3,6.5V5c1.51.91,4.28,1,5,1s3.49-.07,5-1V6.5C13,7.33,10.76,8,8,8ZM8,2c2.76,0,5,.67,5,1.5S10.76,5,8,5,3,4.33,3,3.5,5.24,2,8,2ZM8,14c-2.76,0-5-.67-5-1.5V11c1.51.91,4.28,1,5,1s3.49-.07,5-1V12.5C13,13.33,10.76,14,8,14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-close","children":["$","path",null,{"d":"M12.35,11.65a.48.48,0,0,1,0,.7.48.48,0,0,1-.7,0L8,8.71,4.35,12.35a.48.48,0,0,1-.7,0,.48.48,0,0,1,0-.7L7.29,8,3.65,4.35a.49.49,0,0,1,.7-.7L8,7.29l3.65-3.64a.49.49,0,0,1,.7.7L8.71,8Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-search","children":["$","path",null,{"d":"M6.5,1A5.5,5.5,0,1,0,12,6.5,5.5,5.5,0,0,0,6.5,1Zm0,10A4.5,4.5,0,1,1,11,6.5,4.51,4.51,0,0,1,6.5,11Zm8.85,4.35a.48.48,0,0,1-.7,0l-3-3a.49.49,0,0,1,.7-.7l3,3A.48.48,0,0,1,15.35,15.35Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-more","children":["$","path",null,{"d":"M8,6a2,2,0,1,0,2,2A2,2,0,0,0,8,6ZM8,9A1,1,0,1,1,9,8,1,1,0,0,1,8,9ZM2,6A2,2,0,1,0,4,8,2,2,0,0,0,2,6ZM2,9A1,1,0,1,1,3,8,1,1,0,0,1,2,9ZM14,6a2,2,0,1,0,2,2A2,2,0,0,0,14,6Zm0,3a1,1,0,1,1,1-1A1,1,0,0,1,14,9Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-flow","children":[["$","path",null,{"d":"M4,3V2H1V5H4V4H7v9a1,1,0,0,0,1,1h5V13H8V9h5V8H8V4h5V3H4ZM3,4H2V3H3Z","transform":"translate(0 0)"}],["$","polygon",null,{"points":"13 1.5 13 5.5 15 3.5 13 1.5"}],["$","polygon",null,{"points":"13 6.5 13 10.5 15 8.5 13 6.5"}],["$","polygon",null,{"points":"13 11.5 13 15.5 15 13.5 13 11.5"}]]}],["$","g",null,{"id":"icn-expand","children":["$","path",null,{"d":"M6,2.5a.5.5,0,0,1-.5.5H3V5.5a.5.5,0,0,1-1,0v-3A.5.5,0,0,1,2.5,2h3A.5.5,0,0,1,6,2.5ZM13.5,2h-3a.5.5,0,0,0,0,1H13V5.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,13.5,2Zm0,8a.5.5,0,0,0-.5.5V13H10.5a.5.5,0,0,0,0,1h3a.5.5,0,0,0,.5-.5v-3A.5.5,0,0,0,13.5,10Zm-8,3H3V10.5a.5.5,0,0,0-1,0v3a.5.5,0,0,0,.5.5h3a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-contract","children":["$","path",null,{"d":"M6,2.5v3a.5.5,0,0,1-.5.5h-3a.5.5,0,0,1,0-1H5V2.5a.5.5,0,0,1,1,0ZM10.5,6h3a.5.5,0,0,0,0-1H11V2.5a.5.5,0,0,0-1,0v3A.5.5,0,0,0,10.5,6Zm3,4h-3a.5.5,0,0,0-.5.5v3a.5.5,0,0,0,1,0V11h2.5a.5.5,0,0,0,0-1Zm-8,0h-3a.5.5,0,0,0,0,1H5v2.5a.5.5,0,0,0,1,0v-3A.5.5,0,0,0,5.5,10Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-filter","children":["$","path",null,{"d":"M14.5,4.5A.5.5,0,0,1,14,5H2A.5.5,0,0,1,2,4H14A.5.5,0,0,1,14.5,4.5ZM12,8H4A.5.5,0,0,0,4,9h8a.5.5,0,0,0,0-1Zm-2,4H6a.5.5,0,0,0,0,1h4a.5.5,0,0,0,0-1Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-v","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2Zm0,6H2V3H14Z","transform":"translate(0 0)"}]}],["$","g",null,{"id":"icn-split-h","children":["$","path",null,{"d":"M14,2H2A1,1,0,0,0,1,3V13a1,1,0,0,0,1,1H14a1,1,0,0,0,1-1V3A1,1,0,0,0,14,2ZM2,13V3H8V13Z","transform":"translate(0 0)"}]}]]}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","children":[["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-activity","children":["$","polyline",null,{"points":"22 12 18 12 15 21 9 3 6 12 2 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-airplay","children":[["$","path",null,{"d":"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"}],["$","polygon",null,{"points":"12 15 17 21 7 21 12 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-octagon","children":[["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-alert-triangle","children":[["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"13"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-center","children":[["$","line",null,{"x1":"18","y1":"10","x2":"6","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"18","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-justify","children":[["$","line",null,{"x1":"21","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-left","children":[["$","line",null,{"x1":"17","y1":"10","x2":"3","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"17","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-align-right","children":[["$","line",null,{"x1":"21","y1":"10","x2":"7","y2":"10"}],["$","line",null,{"x1":"21","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"21","y1":"14","x2":"3","y2":"14"}],["$","line",null,{"x1":"21","y1":"18","x2":"7","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-anchor","children":[["$","circle",null,{"cx":"12","cy":"5","r":"3"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"8"}],["$","path",null,{"d":"M5 12H2a10 10 0 0 0 20 0h-3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-aperture","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"14.31","y1":"8","x2":"20","y2":"17.94"}],["$","line",null,{"x1":"9.69","y1":"8","x2":"21.17","y2":"8"}],["$","line",null,{"x1":"7.38","y1":"12","x2":"13.12","y2":"2"}],["$","line",null,{"x1":"9.69","y1":"16","x2":"4","y2":"6"}],["$","line",null,{"x1":"14.31","y1":"16","x2":"2.83","y2":"16"}],["$","line",null,{"x1":"16.62","y1":"12","x2":"10.88","y2":"21.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-archive","children":[["$","polyline",null,{"points":"21 8 21 21 3 21 3 8"}],["$","rect",null,{"x":"1","y":"3","width":"22","height":"5"}],["$","line",null,{"x1":"10","y1":"12","x2":"14","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"8 12 12 16 16 12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-left","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","polyline",null,{"points":"17 17 7 17 7 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down-right","children":[["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}],["$","polyline",null,{"points":"17 7 17 17 7 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-down","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","polyline",null,{"points":"19 12 12 19 5 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 8 8 12 12 16"}],["$","line",null,{"x1":"16","y1":"12","x2":"8","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-left","children":[["$","line",null,{"x1":"19","y1":"12","x2":"5","y2":"12"}],["$","polyline",null,{"points":"12 19 5 12 12 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 16 16 12 12 8"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-right","children":[["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}],["$","polyline",null,{"points":"12 5 19 12 12 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"16 12 12 8 8 12"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-left","children":[["$","line",null,{"x1":"17","y1":"17","x2":"7","y2":"7"}],["$","polyline",null,{"points":"7 17 7 7 17 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up-right","children":[["$","line",null,{"x1":"7","y1":"17","x2":"17","y2":"7"}],["$","polyline",null,{"points":"7 7 17 7 17 17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-arrow-up","children":[["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"5"}],["$","polyline",null,{"points":"5 12 12 5 19 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-at-sign","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","path",null,{"d":"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-award","children":[["$","circle",null,{"cx":"12","cy":"8","r":"7"}],["$","polyline",null,{"points":"8.21 13.89 7 23 12 20 17 23 15.79 13.88"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gauge","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","line",null,{"x1":"13.414","y1":"10.586","x2":"21","y2":"3"}],["$","path",null,{"d":"M4.929,19.071a10,10,0,0,1,10.692-16.4"}],["$","line",null,{"x1":"19","y1":"19","x2":"19","y2":"19"}],["$","line",null,{"x1":"22","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"21.239","y1":"15.827","x2":"21.239","y2":"15.827"}],["$","line",null,{"x1":"21.239","y1":"8.173","x2":"21.239","y2":"8.173"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-2","children":[["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"10"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart","children":[["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"10"}],["$","line",null,{"x1":"18","y1":"20","x2":"18","y2":"4"}],["$","line",null,{"x1":"6","y1":"20","x2":"6","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bar-chart-alt","children":[["$","line",null,{"x1":"3","y1":"20","x2":"3","y2":"15"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"9"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"11"}],["$","line",null,{"x1":"21","y1":"20","x2":"21","y2":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery-charging","children":[["$","path",null,{"d":"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}],["$","polyline",null,{"points":"11 6 7 12 13 12 9 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-battery","children":[["$","rect",null,{"x":"1","y":"6","width":"18","height":"12","rx":"2","ry":"2"}],["$","line",null,{"x1":"23","y1":"13","x2":"23","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell-off","children":[["$","path",null,{"d":"M8.56 2.9A7 7 0 0 1 19 9v4m-2 4H2a3 3 0 0 0 3-3V9a7 7 0 0 1 .78-3.22M13.73 21a2 2 0 0 1-3.46 0"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bell","children":["$","path",null,{"d":"M22 17H2a3 3 0 0 0 3-3V9a7 7 0 0 1 14 0v5a3 3 0 0 0 3 3zm-8.27 4a2 2 0 0 1-3.46 0"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bluetooth","children":["$","polyline",null,{"points":"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bold","children":[["$","path",null,{"d":"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}],["$","path",null,{"d":"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book-open","children":[["$","path",null,{"d":"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"}],["$","path",null,{"d":"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-book","children":[["$","path",null,{"d":"M4 19.5A2.5 2.5 0 0 1 6.5 17H20"}],["$","path",null,{"d":"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-bookmark","children":["$","path",null,{"d":"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-box","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-briefcase","children":[["$","rect",null,{"x":"2","y":"7","width":"20","height":"14","rx":"2","ry":"2"}],["$","path",null,{"d":"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-calendar","children":[["$","rect",null,{"x":"3","y":"4","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"16","y1":"2","x2":"16","y2":"6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"6"}],["$","line",null,{"x1":"3","y1":"10","x2":"21","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-camera","children":[["$","path",null,{"d":"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"}],["$","circle",null,{"cx":"12","cy":"13","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cast","children":[["$","path",null,{"d":"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"}],["$","line",null,{"x1":"2","y1":"20","x2":"2","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-circle","children":[["$","path",null,{"d":"M22 11.08V12a10 10 0 1 1-5.93-9.14"}],["$","polyline",null,{"points":"22 4 12 14 9 11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check-square","children":[["$","polyline",null,{"points":"9 11 12 14 22 4"}],["$","path",null,{"d":"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-check","children":["$","polyline",null,{"points":"20 6 9 17 4 12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-down","children":["$","polyline",null,{"points":"6 10 12 16 18 10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-left","children":["$","polyline",null,{"points":"14 18 8 12 14 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-right","children":["$","polyline",null,{"points":"11 18 17 12 11 6"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevron-up","children":["$","polyline",null,{"points":"18 14 12 8 6 14"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-down","children":[["$","polyline",null,{"points":"7 13 12 18 17 13"}],["$","polyline",null,{"points":"7 6 12 11 17 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-left","children":[["$","polyline",null,{"points":"11 17 6 12 11 7"}],["$","polyline",null,{"points":"18 17 13 12 18 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-right","children":[["$","polyline",null,{"points":"13 17 18 12 13 7"}],["$","polyline",null,{"points":"6 17 11 12 6 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chevrons-up","children":[["$","polyline",null,{"points":"17 11 12 6 7 11"}],["$","polyline",null,{"points":"17 18 12 13 7 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-chrome","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"21.17","y1":"8","x2":"12","y2":"8"}],["$","line",null,{"x1":"4","y1":"6","x2":"8.54","y2":"14"}],["$","line",null,{"x1":"10.88","y1":"22","x2":"15.46","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-circle","children":["$","circle",null,{"cx":"12","cy":"12","r":"10"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clipboard","children":[["$","path",null,{"d":"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"}],["$","rect",null,{"x":"8","y":"2","width":"8","height":"4","rx":"1","ry":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-clock","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polyline",null,{"points":"12 6 12 12 16 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-drizzle","children":[["$","line",null,{"x1":"8","y1":"19","x2":"8","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"15"}],["$","line",null,{"x1":"16","y1":"19","x2":"16","y2":"21"}],["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"15"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"17"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-lightning","children":[["$","path",null,{"d":"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"}],["$","polyline",null,{"points":"13 11 9 17 15 17 11 23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-off","children":[["$","path",null,{"d":"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-rain","children":[["$","line",null,{"x1":"16","y1":"13","x2":"16","y2":"21"}],["$","line",null,{"x1":"8","y1":"13","x2":"8","y2":"21"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"23"}],["$","path",null,{"d":"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud-snow","children":[["$","path",null,{"d":"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"}],["$","line",null,{"x1":"8","y1":"16","x2":"8","y2":"16"}],["$","line",null,{"x1":"8","y1":"20","x2":"8","y2":"20"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"22"}],["$","line",null,{"x1":"16","y1":"16","x2":"16","y2":"16"}],["$","line",null,{"x1":"16","y1":"20","x2":"16","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cloud","children":["$","path",null,{"d":"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-code","children":[["$","polyline",null,{"points":"16 18 22 12 16 6"}],["$","polyline",null,{"points":"8 6 2 12 8 18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-codepen","children":[["$","polygon",null,{"points":"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"15.5"}],["$","polyline",null,{"points":"22 8.5 12 15.5 2 8.5"}],["$","polyline",null,{"points":"2 15.5 12 8.5 22 15.5"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-command","children":["$","path",null,{"d":"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-compass","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-copy","children":[["$","rect",null,{"x":"9","y":"9","width":"13","height":"13","rx":"2","ry":"2"}],["$","path",null,{"d":"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-left","children":[["$","polyline",null,{"points":"9 10 4 15 9 20"}],["$","path",null,{"d":"M20 4v7a4 4 0 0 1-4 4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-down-right","children":[["$","polyline",null,{"points":"15 10 20 15 15 20"}],["$","path",null,{"d":"M4 4v7a4 4 0 0 0 4 4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-down","children":[["$","polyline",null,{"points":"14 15 9 20 4 15"}],["$","path",null,{"d":"M20 4h-7a4 4 0 0 0-4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-left-up","children":[["$","polyline",null,{"points":"14 9 9 4 4 9"}],["$","path",null,{"d":"M20 20h-7a4 4 0 0 1-4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-down","children":[["$","polyline",null,{"points":"10 15 15 20 20 15"}],["$","path",null,{"d":"M4 4h7a4 4 0 0 1 4 4v12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-right-up","children":[["$","polyline",null,{"points":"10 9 15 4 20 9"}],["$","path",null,{"d":"M4 20h7a4 4 0 0 0 4-4V4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-left","children":[["$","polyline",null,{"points":"9 14 4 9 9 4"}],["$","path",null,{"d":"M20 20v-7a4 4 0 0 0-4-4H4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-corner-up-right","children":[["$","polyline",null,{"points":"15 14 20 9 15 4"}],["$","path",null,{"d":"M4 20v-7a4 4 0 0 1 4-4h12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-cpu","children":[["$","rect",null,{"x":"4","y":"4","width":"16","height":"16","rx":"2","ry":"2"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}],["$","line",null,{"x1":"9","y1":"1","x2":"9","y2":"4"}],["$","line",null,{"x1":"15","y1":"1","x2":"15","y2":"4"}],["$","line",null,{"x1":"9","y1":"20","x2":"9","y2":"23"}],["$","line",null,{"x1":"15","y1":"20","x2":"15","y2":"23"}],["$","line",null,{"x1":"20","y1":"9","x2":"23","y2":"9"}],["$","line",null,{"x1":"20","y1":"14","x2":"23","y2":"14"}],["$","line",null,{"x1":"1","y1":"9","x2":"4","y2":"9"}],["$","line",null,{"x1":"1","y1":"14","x2":"4","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-credit-card","children":[["$","rect",null,{"x":"1","y":"4","width":"22","height":"16","rx":"2","ry":"2"}],["$","line",null,{"x1":"1","y1":"10","x2":"23","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crop","children":[["$","path",null,{"d":"M6.13 1L6 16a2 2 0 0 0 2 2h15"}],["$","path",null,{"d":"M1 6.13L16 6a2 2 0 0 1 2 2v15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-crosshair","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"22","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"6","y1":"12","x2":"2","y2":"12"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"2"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-database","children":[["$","ellipse",null,{"cx":"12","cy":"5","rx":"9","ry":"3"}],["$","path",null,{"d":"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"}],["$","path",null,{"d":"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-delete","children":[["$","path",null,{"d":"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"}],["$","line",null,{"x1":"18","y1":"9","x2":"12","y2":"15"}],["$","line",null,{"x1":"12","y1":"9","x2":"18","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-disc","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-dollar-sign","children":[["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"23"}],["$","path",null,{"d":"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download-cloud","children":[["$","polyline",null,{"points":"8 17 12 21 16 17"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-download","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"7 10 12 15 17 10"}],["$","line",null,{"x1":"12","y1":"15","x2":"12","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-droplet","children":["$","path",null,{"d":"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-2","children":["$","polygon",null,{"points":"16 3 21 8 8 21 3 21 3 16 16 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit-3","children":[["$","polygon",null,{"points":"14 2 18 6 7 17 3 17 3 13 14 2"}],["$","line",null,{"x1":"3","y1":"22","x2":"21","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-edit","children":[["$","path",null,{"d":"M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"}],["$","polygon",null,{"points":"18 2 22 6 12 16 8 16 8 12 18 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-external-link","children":[["$","path",null,{"d":"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}],["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","line",null,{"x1":"10","y1":"14","x2":"21","y2":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye-off","children":[["$","path",null,{"d":"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-eye","children":[["$","path",null,{"d":"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"}],["$","circle",null,{"cx":"12","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-facebook","children":["$","path",null,{"d":"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-fast-forward","children":[["$","polygon",null,{"points":"13 19 22 12 13 5 13 19"}],["$","polygon",null,{"points":"2 19 11 12 2 5 2 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-feather","children":[["$","path",null,{"d":"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"}],["$","line",null,{"x1":"16","y1":"8","x2":"2","y2":"22"}],["$","line",null,{"x1":"17","y1":"15","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-minus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-plus","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"12"}],["$","line",null,{"x1":"9","y1":"15","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file-text","children":[["$","path",null,{"d":"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"}],["$","polyline",null,{"points":"14 2 14 8 20 8"}],["$","line",null,{"x1":"16","y1":"13","x2":"8","y2":"13"}],["$","line",null,{"x1":"16","y1":"17","x2":"8","y2":"17"}],["$","polyline",null,{"points":"10 9 9 9 8 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-file","children":[["$","path",null,{"d":"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"}],["$","polyline",null,{"points":"13 2 13 9 20 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-film","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"2.18","ry":"2.18"}],["$","line",null,{"x1":"7","y1":"2","x2":"7","y2":"22"}],["$","line",null,{"x1":"17","y1":"2","x2":"17","y2":"22"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"2","y1":"7","x2":"7","y2":"7"}],["$","line",null,{"x1":"2","y1":"17","x2":"7","y2":"17"}],["$","line",null,{"x1":"17","y1":"17","x2":"22","y2":"17"}],["$","line",null,{"x1":"17","y1":"7","x2":"22","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter","children":["$","polygon",null,{"points":"22 4 2 4 10 13.5 10 19 14 21 14 13.5 22 4"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-filter-alt","children":[["$","line",null,{"x1":"2","y1":"6","x2":"22","y2":"6"}],["$","line",null,{"x1":"6","y1":"12","x2":"18","y2":"12"}],["$","line",null,{"x1":"10","y1":"18","x2":"14","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-flag","children":[["$","path",null,{"d":"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"}],["$","line",null,{"x1":"4","y1":"22","x2":"4","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-minus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder-plus","children":[["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}],["$","line",null,{"x1":"12","y1":"11","x2":"12","y2":"17"}],["$","line",null,{"x1":"9","y1":"14","x2":"15","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-folder","children":["$","path",null,{"d":"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gift","children":[["$","polyline",null,{"points":"20 12 20 22 4 22 4 12"}],["$","rect",null,{"x":"2","y":"7","width":"20","height":"5"}],["$","line",null,{"x1":"12","y1":"22","x2":"12","y2":"7"}],["$","path",null,{"d":"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"}],["$","path",null,{"d":"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tree","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"20","cy":"13","r":"1"}],["$","circle",null,{"cx":"20","cy":"6","r":"1"}],["$","circle",null,{"cx":"20","cy":"20","r":"1"}],["$","line",null,{"x1":"9","y1":"6","x2":"19","y2":"6"}],["$","path",null,{"d":"M14,6V18a2,2,0,0,0,2,2h3"}],["$","line",null,{"x1":"14","y1":"13","x2":"19","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-branch","children":[["$","line",null,{"x1":"6","y1":"3","x2":"6","y2":"15"}],["$","circle",null,{"cx":"18","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","path",null,{"d":"M18 9a9 9 0 0 1-9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-commit","children":[["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"1","y1":"12","x2":"7","y2":"12"}],["$","line",null,{"x1":"17","y1":"12","x2":"23","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-merge","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M6 21V9a9 9 0 0 0 9 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-git-pull-request","children":[["$","circle",null,{"cx":"18","cy":"18","r":"3"}],["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","path",null,{"d":"M13 6h3a2 2 0 0 1 2 2v7"}],["$","line",null,{"x1":"6","y1":"9","x2":"6","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-github","children":["$","path",null,{"d":"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-gitlab","children":["$","path",null,{"d":"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-globe","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","path",null,{"d":"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-grid","children":[["$","rect",null,{"x":"3","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"3","width":"7","height":"7"}],["$","rect",null,{"x":"14","y":"14","width":"7","height":"7"}],["$","rect",null,{"x":"3","y":"14","width":"7","height":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hard-drive","children":[["$","line",null,{"x1":"22","y1":"12","x2":"2","y2":"12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}],["$","line",null,{"x1":"6","y1":"16","x2":"6","y2":"16"}],["$","line",null,{"x1":"10","y1":"16","x2":"10","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-hash","children":[["$","line",null,{"x1":"4","y1":"9","x2":"20","y2":"9"}],["$","line",null,{"x1":"4","y1":"15","x2":"20","y2":"15"}],["$","line",null,{"x1":"10","y1":"3","x2":"8","y2":"21"}],["$","line",null,{"x1":"16","y1":"3","x2":"14","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-headphones","children":[["$","path",null,{"d":"M3 18v-6a9 9 0 0 1 18 0v6"}],["$","path",null,{"d":"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-heart","children":["$","path",null,{"d":"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-help-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","path",null,{"d":"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"}],["$","line",null,{"x1":"12","y1":"17","x2":"12","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-home","children":["$","path",null,{"d":"M3,9.489V20a1,1,0,0,0,1,1H8a1,1,0,0,0,1-1V13a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v7a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V9.489a1,1,0,0,0-.386-.789l-8-6.222a1,1,0,0,0-1.228,0l-8,6.222A1,1,0,0,0,3,9.489Z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-image","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","circle",null,{"cx":"8.5","cy":"8.5","r":"1.5"}],["$","polyline",null,{"points":"21 15 16 10 5 21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-inbox","children":[["$","polyline",null,{"points":"22 12 16 12 14 15 10 15 8 12 2 12"}],["$","path",null,{"d":"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-info","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"16","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-instagram","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"20","rx":"5","ry":"5"}],["$","path",null,{"d":"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"}],["$","line",null,{"x1":"17.5","y1":"6.5","x2":"17.5","y2":"6.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-italic","children":[["$","line",null,{"x1":"19","y1":"4","x2":"10","y2":"4"}],["$","line",null,{"x1":"14","y1":"20","x2":"5","y2":"20"}],["$","line",null,{"x1":"15","y1":"4","x2":"9","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layers","children":[["$","polygon",null,{"points":"12 2 2 7 12 12 22 7 12 2"}],["$","polyline",null,{"points":"2 17 12 22 22 17"}],["$","polyline",null,{"points":"2 12 12 17 22 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-layout","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"3","y1":"9","x2":"21","y2":"9"}],["$","line",null,{"x1":"9","y1":"21","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-life-buoy","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"4"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"9.17","y2":"9.17"}],["$","line",null,{"x1":"14.83","y1":"14.83","x2":"19","y2":"19"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"19","y2":"4.93"}],["$","line",null,{"x1":"14.83","y1":"9.17","x2":"18.36","y2":"5.64"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"9.17","y2":"14.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link-2","children":[["$","path",null,{"d":"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-link","children":[["$","path",null,{"d":"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"}],["$","path",null,{"d":"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-linkedin","children":[["$","path",null,{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect",null,{"x":"2","y":"9","width":"4","height":"12"}],["$","circle",null,{"cx":"4","cy":"4","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-list","children":[["$","line",null,{"x1":"8","y1":"6","x2":"21","y2":"6"}],["$","line",null,{"x1":"8","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"8","y1":"18","x2":"21","y2":"18"}],["$","line",null,{"x1":"3","y1":"6","x2":"3","y2":"6"}],["$","line",null,{"x1":"3","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"3","y1":"18","x2":"3","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-loader","children":[["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"6"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"22"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"7.76","y2":"7.76"}],["$","line",null,{"x1":"16.24","y1":"16.24","x2":"19","y2":"19"}],["$","line",null,{"x1":"2","y1":"12","x2":"6","y2":"12"}],["$","line",null,{"x1":"18","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"4.93","y1":"19","x2":"7.76","y2":"16.24"}],["$","line",null,{"x1":"16.24","y1":"7.76","x2":"19","y2":"4.93"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-lock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6A5,5,0,0,1,17,6V9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-in","children":[["$","path",null,{"d":"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"}],["$","polyline",null,{"points":"10 17 15 12 10 7"}],["$","line",null,{"x1":"15","y1":"12","x2":"3","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-log-out","children":[["$","path",null,{"d":"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"}],["$","polyline",null,{"points":"16 17 21 12 16 7"}],["$","line",null,{"x1":"21","y1":"12","x2":"9","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mail","children":[["$","path",null,{"d":"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"}],["$","polyline",null,{"points":"22,6 12,13 2,6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map-pin","children":[["$","path",null,{"d":"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"}],["$","circle",null,{"cx":"12","cy":"10","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-map","children":[["$","polygon",null,{"points":"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"}],["$","line",null,{"x1":"8","y1":"2","x2":"8","y2":"18"}],["$","line",null,{"x1":"16","y1":"6","x2":"16","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize-2","children":[["$","polyline",null,{"points":"15 3 21 3 21 9"}],["$","polyline",null,{"points":"9 21 3 21 3 15"}],["$","line",null,{"x1":"21","y1":"3","x2":"14","y2":"10"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-maximize","children":["$","path",null,{"d":"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-menu","children":[["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}],["$","line",null,{"x1":"3","y1":"5","x2":"21","y2":"5"}],["$","line",null,{"x1":"3","y1":"19","x2":"21","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-circle","children":["$","path",null,{"d":"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-message-square","children":["$","path",null,{"d":"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"}],["$","path",null,{"d":"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-mic","children":[["$","path",null,{"d":"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"}],["$","path",null,{"d":"M19 10v2a7 7 0 0 1-14 0v-2"}],["$","line",null,{"x1":"12","y1":"19","x2":"12","y2":"23"}],["$","line",null,{"x1":"8","y1":"23","x2":"16","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize-2","children":[["$","polyline",null,{"points":"4 14 10 14 10 20"}],["$","polyline",null,{"points":"20 10 14 10 14 4"}],["$","line",null,{"x1":"14","y1":"10","x2":"21","y2":"3"}],["$","line",null,{"x1":"3","y1":"21","x2":"10","y2":"14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minimize","children":["$","path",null,{"d":"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-minus","children":["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-monitor","children":[["$","rect",null,{"x":"2","y":"3","width":"20","height":"14","rx":"2","ry":"2"}],["$","line",null,{"x1":"8","y1":"21","x2":"16","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-moon","children":["$","path",null,{"d":"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-horizontal","children":[["$","line",null,{"x1":"4","y1":"12","x2":"4","y2":"12"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-more-vertical","children":[["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"4"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-move","children":[["$","polyline",null,{"points":"5 9 2 12 5 15"}],["$","polyline",null,{"points":"9 5 12 2 15 5"}],["$","polyline",null,{"points":"15 19 12 22 9 19"}],["$","polyline",null,{"points":"19 9 22 12 19 15"}],["$","line",null,{"x1":"2","y1":"12","x2":"22","y2":"12"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-music","children":[["$","path",null,{"d":"M9 17H5a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2zm12-2h-4a2 2 0 0 0-2 2 2 2 0 0 0 2 2h2a2 2 0 0 0 2-2z"}],["$","polyline",null,{"points":"9 17 9 5 21 3 21 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation-2","children":["$","polygon",null,{"points":"12 2 19 21 12 17 5 21 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-navigation","children":["$","polygon",null,{"points":"3 11 22 2 13 21 11 13 3 11"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-octagon","children":["$","polygon",null,{"points":"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-package","children":[["$","path",null,{"d":"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z"}],["$","polyline",null,{"points":"2.32 6.16 12 11 21.68 6.16"}],["$","line",null,{"x1":"12","y1":"22.76","x2":"12","y2":"11"}],["$","line",null,{"x1":"7","y1":"3.5","x2":"17","y2":"8.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-paperclip","children":["$","path",null,{"d":"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"10","y1":"15","x2":"10","y2":"9"}],["$","line",null,{"x1":"14","y1":"15","x2":"14","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pause","children":[["$","rect",null,{"x":"6","y":"4","width":"4","height":"16"}],["$","rect",null,{"x":"14","y":"4","width":"4","height":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-percent","children":[["$","line",null,{"x1":"19","y1":"5","x2":"5","y2":"19"}],["$","circle",null,{"cx":"6.5","cy":"6.5","r":"2.5"}],["$","circle",null,{"cx":"17.5","cy":"17.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-call","children":["$","path",null,{"d":"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-forwarded","children":[["$","polyline",null,{"points":"19 1 23 5 19 9"}],["$","line",null,{"x1":"15","y1":"5","x2":"23","y2":"5"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-incoming","children":[["$","polyline",null,{"points":"16 2 16 8 22 8"}],["$","line",null,{"x1":"23","y1":"1","x2":"16","y2":"8"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-missed","children":[["$","line",null,{"x1":"23","y1":"1","x2":"17","y2":"7"}],["$","line",null,{"x1":"17","y1":"1","x2":"23","y2":"7"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-off","children":[["$","path",null,{"d":"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"}],["$","line",null,{"x1":"23","y1":"1","x2":"1","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone-outgoing","children":[["$","polyline",null,{"points":"23 7 23 1 17 1"}],["$","line",null,{"x1":"16","y1":"8","x2":"23","y2":"1"}],["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-phone","children":["$","path",null,{"d":"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pie-chart","children":[["$","path",null,{"d":"M21.21 15.89A10 10 0 1 1 8 2.83"}],["$","path",null,{"d":"M22 12A10 10 0 0 0 12 2v10z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","polygon",null,{"points":"10 8 16 12 10 16 10 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-play","children":["$","polygon",null,{"points":"7 3 21 12 7 21 7 3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"16"}],["$","line",null,{"x1":"8","y1":"12","x2":"16","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-plus","children":[["$","line",null,{"x1":"12","y1":"5","x2":"12","y2":"19"}],["$","line",null,{"x1":"5","y1":"12","x2":"19","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-pocket","children":[["$","path",null,{"d":"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"}],["$","polyline",null,{"points":"8 10 12 14 16 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-power","children":[["$","path",null,{"d":"M18.36 6.64a9 9 0 1 1-12.73 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-printer","children":[["$","polyline",null,{"points":"6 9 6 2 18 2 18 9"}],["$","path",null,{"d":"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"}],["$","rect",null,{"x":"6","y":"14","width":"12","height":"8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-radio","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh","children":[["$","path",null,{"d":"M21,13v3a3,3,0,0,1-3,3H5"}],["$","path",null,{"d":"M3,11V8A3,3,0,0,1,6,5H19"}],["$","polyline",null,{"points":"9 23 5 19 9 15"}],["$","polyline",null,{"points":"15 1 19 5 15 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","polyline",null,{"points":"23 20 23 14 17 14"}],["$","path",null,{"d":"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-refresh-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","polyline",null,{"points":"1 20 1 14 7 14"}],["$","path",null,{"d":"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-repeat","children":[["$","polyline",null,{"points":"17 1 21 5 17 9"}],["$","path",null,{"d":"M3 11V9a4 4 0 0 1 4-4h14"}],["$","polyline",null,{"points":"7 23 3 19 7 15"}],["$","path",null,{"d":"M21 13v2a4 4 0 0 1-4 4H3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rewind","children":[["$","polygon",null,{"points":"11 19 2 12 11 5 11 19"}],["$","polygon",null,{"points":"22 19 13 12 22 5 22 19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-ccw","children":[["$","polyline",null,{"points":"1 4 1 10 7 10"}],["$","path",null,{"d":"M3.51 15a9 9 0 1 0 2.13-9.36L1 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rotate-cw","children":[["$","polyline",null,{"points":"23 4 23 10 17 10"}],["$","path",null,{"d":"M20.49 15a9 9 0 1 1-2.12-9.36L23 10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-rss","children":[["$","path",null,{"d":"M4 11a9 9 0 0 1 9 9"}],["$","path",null,{"d":"M4 4a16 16 0 0 1 16 16"}],["$","circle",null,{"cx":"5","cy":"19","r":"1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-save","children":[["$","path",null,{"d":"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"}],["$","polyline",null,{"points":"17 21 17 13 7 13 7 21"}],["$","polyline",null,{"points":"7 3 7 8 15 8"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-scissors","children":[["$","circle",null,{"cx":"6","cy":"6","r":"3"}],["$","circle",null,{"cx":"6","cy":"18","r":"3"}],["$","line",null,{"x1":"20","y1":"4","x2":"8.12","y2":"15.88"}],["$","line",null,{"x1":"14.47","y1":"14.48","x2":"20","y2":"20"}],["$","line",null,{"x1":"8.12","y1":"8.12","x2":"12","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-search","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-send","children":[["$","line",null,{"x1":"22","y1":"2","x2":"11","y2":"13"}],["$","polygon",null,{"points":"22 2 15 22 11 13 2 9 22 2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-server","children":[["$","rect",null,{"x":"2","y":"2","width":"20","height":"8","rx":"2","ry":"2"}],["$","rect",null,{"x":"2","y":"14","width":"20","height":"8","rx":"2","ry":"2"}],["$","line",null,{"x1":"6","y1":"6","x2":"6","y2":"6"}],["$","line",null,{"x1":"6","y1":"18","x2":"6","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-settings","children":[["$","circle",null,{"cx":"12","cy":"12","r":"2"}],["$","path",null,{"d":"M18.56,14.45c-.06.16-.12.31-.19.46a1,1,0,0,0,0,.86l1.07,2a.94.94,0,0,1-.17,1.11l-.42.42a.94.94,0,0,1-1.11.17l-2-1.07a1,1,0,0,0-.86,0l-.46.19a.91.91,0,0,0-.6.62l-.65,2.15a.93.93,0,0,1-.9.67h-.6a.93.93,0,0,1-.9-.67l-.65-2.15a.91.91,0,0,0-.6-.62l-.46-.19a1,1,0,0,0-.86,0l-2,1.07a.94.94,0,0,1-1.11-.17l-.42-.42a.94.94,0,0,1-.17-1.11l1.07-2a1,1,0,0,0,0-.86c-.07-.15-.13-.3-.19-.46a.91.91,0,0,0-.62-.6L2.67,13.2A.93.93,0,0,1,2,12.3v-.6a.93.93,0,0,1,.67-.9l2.15-.65a.91.91,0,0,0,.62-.6c.06-.16.12-.31.19-.46a1,1,0,0,0,0-.86l-1.07-2a.94.94,0,0,1,.17-1.11l.42-.42a.94.94,0,0,1,1.11-.17l2,1.07a1,1,0,0,0,.86,0l.46-.19a.91.91,0,0,0,.6-.62l.65-2.15A.93.93,0,0,1,11.7,2h.6a.93.93,0,0,1,.9.67l.65,2.15a.91.91,0,0,0,.6.62l.46.19a1,1,0,0,0,.86,0l2-1.07a.94.94,0,0,1,1.11.17l.42.42a.94.94,0,0,1,.17,1.11l-1.07,2a1,1,0,0,0,0,.86c.07.15.13.3.19.46a.91.91,0,0,0,.62.6l2.15.65a.93.93,0,0,1,.67.9v.6a.93.93,0,0,1-.67.9l-2.15.65A.91.91,0,0,0,18.56,14.45Z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share-2","children":[["$","circle",null,{"cx":"18","cy":"5","r":"3"}],["$","circle",null,{"cx":"6","cy":"12","r":"3"}],["$","circle",null,{"cx":"18","cy":"19","r":"3"}],["$","line",null,{"x1":"8.59","y1":"13.51","x2":"15.42","y2":"17.49"}],["$","line",null,{"x1":"15.41","y1":"6.51","x2":"8.59","y2":"10.49"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-share","children":[["$","path",null,{"d":"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"}],["$","polyline",null,{"points":"16 6 12 2 8 6"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield-off","children":[["$","path",null,{"d":"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"}],["$","path",null,{"d":"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shield","children":["$","path",null,{"d":"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-bag","children":[["$","path",null,{"d":"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"}],["$","line",null,{"x1":"3","y1":"6","x2":"21","y2":"6"}],["$","path",null,{"d":"M16 10a4 4 0 0 1-8 0"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart","children":[["$","circle",null,{"cx":"9","cy":"21","r":"1"}],["$","circle",null,{"cx":"20","cy":"21","r":"1"}],["$","path",null,{"d":"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shopping-cart-alt","children":[["$","circle",null,{"cx":"6","cy":"21","r":"1"}],["$","circle",null,{"cx":"18","cy":"21","r":"1"}],["$","polyline",null,{"points":"3 9 5 15 19 15 22 4 2 4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-shuffle","children":[["$","polyline",null,{"points":"16 3 21 3 21 8"}],["$","line",null,{"x1":"4","y1":"20","x2":"21","y2":"3"}],["$","polyline",null,{"points":"21 16 21 21 16 21"}],["$","line",null,{"x1":"15","y1":"15","x2":"21","y2":"21"}],["$","line",null,{"x1":"4","y1":"4","x2":"9","y2":"9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sidebar","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"3","x2":"9","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-back","children":[["$","polygon",null,{"points":"19 20 9 12 19 4 19 20"}],["$","line",null,{"x1":"5","y1":"19","x2":"5","y2":"5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-skip-forward","children":[["$","polygon",null,{"points":"5 4 15 12 5 20 5 4"}],["$","line",null,{"x1":"19","y1":"5","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slack","children":[["$","path",null,{"d":"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"}],["$","path",null,{"d":"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"}],["$","path",null,{"d":"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"}],["$","path",null,{"d":"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"}],["$","path",null,{"d":"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"}],["$","path",null,{"d":"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"}],["$","path",null,{"d":"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-slash","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"4.93","y1":"4.93","x2":"19","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sliders","children":[["$","line",null,{"x1":"4","y1":"21","x2":"4","y2":"14"}],["$","line",null,{"x1":"4","y1":"10","x2":"4","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"12"}],["$","line",null,{"x1":"12","y1":"8","x2":"12","y2":"3"}],["$","line",null,{"x1":"20","y1":"21","x2":"20","y2":"16"}],["$","line",null,{"x1":"20","y1":"12","x2":"20","y2":"3"}],["$","line",null,{"x1":"1","y1":"14","x2":"7","y2":"14"}],["$","line",null,{"x1":"9","y1":"8","x2":"15","y2":"8"}],["$","line",null,{"x1":"17","y1":"16","x2":"23","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-smartphone","children":[["$","rect",null,{"x":"6","y":"2","width":"12","height":"20","rx":"2","ry":"2"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-laptop","children":[["$","path",null,{"d":"M5,3H19a2,2,0,0,1,2,2V15a0,0,0,0,1,0,0H3a0,0,0,0,1,0,0V5A2,2,0,0,1,5,3Z"}],["$","path",null,{"d":"M21,15l1.8,3.4A1,1,0,0,1,22,20H2a1,1,0,0,1-.8-1.6L3,15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-speaker","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2"}],["$","circle",null,{"cx":"12","cy":"14","r":"4"}],["$","line",null,{"x1":"12","y1":"6","x2":"12","y2":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-square","children":["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-star","children":["$","polygon",null,{"points":"12 2 15 8.26 22 9.27 17 14.14 18.18 21 12 17.77 5.82 21 7 14.14 2 9.27 8.91 8.26 12 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-stop-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","rect",null,{"x":"9","y":"9","width":"6","height":"6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sun","children":[["$","circle",null,{"cx":"12","cy":"12","r":"5"}],["$","line",null,{"x1":"12","y1":"1","x2":"12","y2":"3"}],["$","line",null,{"x1":"12","y1":"21","x2":"12","y2":"23"}],["$","line",null,{"x1":"4.22","y1":"4.22","x2":"5.64","y2":"5.64"}],["$","line",null,{"x1":"18.36","y1":"18.36","x2":"19.78","y2":"19.78"}],["$","line",null,{"x1":"1","y1":"12","x2":"3","y2":"12"}],["$","line",null,{"x1":"21","y1":"12","x2":"23","y2":"12"}],["$","line",null,{"x1":"4.22","y1":"19.78","x2":"5.64","y2":"18.36"}],["$","line",null,{"x1":"18.36","y1":"5.64","x2":"19.78","y2":"4.22"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunrise","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"2","x2":"12","y2":"9"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"8 6 12 2 16 6"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sunset","children":[["$","path",null,{"d":"M17 18a5 5 0 0 0-10 0"}],["$","line",null,{"x1":"12","y1":"9","x2":"12","y2":"2"}],["$","line",null,{"x1":"4.22","y1":"10.22","x2":"5.64","y2":"11.64"}],["$","line",null,{"x1":"1","y1":"18","x2":"3","y2":"18"}],["$","line",null,{"x1":"21","y1":"18","x2":"23","y2":"18"}],["$","line",null,{"x1":"18.36","y1":"11.64","x2":"19.78","y2":"10.22"}],["$","line",null,{"x1":"23","y1":"22","x2":"1","y2":"22"}],["$","polyline",null,{"points":"16 5 12 9 8 5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tablet","children":[["$","rect",null,{"x":"4","y":"2","width":"16","height":"20","rx":"2","ry":"2","transform":"rotate(180 12 12)"}],["$","line",null,{"x1":"12","y1":"18","x2":"12","y2":"18"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tag","children":[["$","path",null,{"d":"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"}],["$","line",null,{"x1":"7","y1":"7","x2":"7","y2":"7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-target","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","circle",null,{"cx":"12","cy":"12","r":"6"}],["$","circle",null,{"cx":"12","cy":"12","r":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-terminal","children":[["$","polyline",null,{"points":"4 17 10 11 4 5"}],["$","line",null,{"x1":"12","y1":"19","x2":"20","y2":"19"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thermometer","children":["$","path",null,{"d":"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-down","children":["$","path",null,{"d":"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-thumbs-up","children":["$","path",null,{"d":"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-left","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"8","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-toggle-right","children":[["$","rect",null,{"x":"1","y":"5","width":"22","height":"14","rx":"7","ry":"7"}],["$","circle",null,{"cx":"16","cy":"12","r":"3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash-2","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}],["$","line",null,{"x1":"10","y1":"11","x2":"10","y2":"17"}],["$","line",null,{"x1":"14","y1":"11","x2":"14","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trash","children":[["$","polyline",null,{"points":"3 6 5 6 21 6"}],["$","path",null,{"d":"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-down","children":[["$","polyline",null,{"points":"23 18 13.5 8.5 8.5 13.5 1 6"}],["$","polyline",null,{"points":"17 18 23 18 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-trending-up","children":[["$","polyline",null,{"points":"23 6 13.5 15.5 8.5 10.5 1 18"}],["$","polyline",null,{"points":"17 6 23 6 23 12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-triangle","children":["$","path",null,{"d":"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-truck","children":[["$","rect",null,{"x":"1","y":"3","width":"15","height":"13"}],["$","polygon",null,{"points":"16 8 20 8 23 11 23 16 16 16 16 8"}],["$","circle",null,{"cx":"5.5","cy":"18.5","r":"2.5"}],["$","circle",null,{"cx":"18.5","cy":"18.5","r":"2.5"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-tv","children":[["$","rect",null,{"x":"2","y":"6","width":"20","height":"15","rx":"2","ry":"2"}],["$","polyline",null,{"points":"17 1 12 6 7 1"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-twitter","children":["$","path",null,{"d":"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-type","children":[["$","polyline",null,{"points":"4 7 4 4 20 4 20 7"}],["$","line",null,{"x1":"9","y1":"20","x2":"15","y2":"20"}],["$","line",null,{"x1":"12","y1":"4","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-umbrella","children":["$","path",null,{"d":"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-underline","children":[["$","path",null,{"d":"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"}],["$","line",null,{"x1":"4","y1":"21","x2":"20","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-unlock","children":[["$","rect",null,{"x":"3","y":"9","width":"18","height":"13","rx":"1","ry":"1"}],["$","path",null,{"d":"M7,9V6a5,5,0,0,1,9.384-2.406"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload-cloud","children":[["$","polyline",null,{"points":"16 16 12 12 8 16"}],["$","line",null,{"x1":"12","y1":"12","x2":"12","y2":"21"}],["$","path",null,{"d":"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-upload","children":[["$","path",null,{"d":"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}],["$","polyline",null,{"points":"17 8 12 3 7 8"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-check","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","polyline",null,{"points":"17 11 19 13 23 9"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-minus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-plus","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"20","y1":"8","x2":"20","y2":"14"}],["$","line",null,{"x1":"23","y1":"11","x2":"17","y2":"11"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user-x","children":[["$","path",null,{"d":"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"8.5","cy":"7","r":"4"}],["$","line",null,{"x1":"18","y1":"8","x2":"23","y2":"13"}],["$","line",null,{"x1":"23","y1":"8","x2":"18","y2":"13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-user","children":[["$","path",null,{"d":"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"12","cy":"7","r":"4"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-users","children":[["$","path",null,{"d":"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"}],["$","circle",null,{"cx":"9","cy":"7","r":"4"}],["$","path",null,{"d":"M23 21v-2a4 4 0 0 0-3-3.87"}],["$","path",null,{"d":"M16 3.13a4 4 0 0 1 0 7.75"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video-off","children":[["$","path",null,{"d":"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-video","children":[["$","polygon",null,{"points":"23 7 16 12 23 17 23 7"}],["$","rect",null,{"x":"1","y":"5","width":"15","height":"14","rx":"2","ry":"2"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-voicemail","children":[["$","circle",null,{"cx":"5.5","cy":"11.5","r":"4.5"}],["$","circle",null,{"cx":"18.5","cy":"11.5","r":"4.5"}],["$","line",null,{"x1":"5.5","y1":"16","x2":"18.5","y2":"16"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-1","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-2","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","path",null,{"d":"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume-x","children":[["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}],["$","line",null,{"x1":"23","y1":"9","x2":"17","y2":"15"}],["$","line",null,{"x1":"17","y1":"9","x2":"23","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-volume","children":["$","polygon",null,{"points":"11 5 6 9 2 9 2 15 6 15 11 19 11 5"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-watch","children":[["$","circle",null,{"cx":"12","cy":"12","r":"7"}],["$","polyline",null,{"points":"12 9 12 12 13.5 13.5"}],["$","path",null,{"d":"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi-off","children":[["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}],["$","path",null,{"d":"M16.72 11.06A10.94 10.94 0 0 1 19 12.55"}],["$","path",null,{"d":"M5 12.55a10.94 10.94 0 0 1 5.17-2.39"}],["$","path",null,{"d":"M10.71 5.05A16 16 0 0 1 22.58 9"}],["$","path",null,{"d":"M1.42 9a15.91 15.91 0 0 1 4.7-2.88"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wifi","children":[["$","path",null,{"d":"M5 12.55a11 11 0 0 1 14.08 0"}],["$","path",null,{"d":"M1.42 9a16 16 0 0 1 21.16 0"}],["$","path",null,{"d":"M8.53 16.11a6 6 0 0 1 6.95 0"}],["$","line",null,{"x1":"12","y1":"20","x2":"12","y2":"20"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-wind","children":["$","path",null,{"d":"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-circle","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x-square","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"2","ry":"2"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-x","children":[["$","line",null,{"x1":"17","y1":"7","x2":"7","y2":"17"}],["$","line",null,{"x1":"7","y1":"7","x2":"17","y2":"17"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-youtube","children":[["$","path",null,{"d":"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"}],["$","polygon",null,{"points":"9.75 15 15.5 11.75 9.75 8.48 9.75 15"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap-off","children":[["$","polyline",null,{"points":"12.41 6.75 13 2 10.57 4.92"}],["$","polyline",null,{"points":"18.57 12.91 21 10 15.66 10"}],["$","polyline",null,{"points":"8 8 3 14 12 14 11 22 16 16"}],["$","line",null,{"x1":"1","y1":"1","x2":"23","y2":"23"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zap","children":["$","polygon",null,{"points":"13 2 3 14 12 14 11 22 21 10 12 10 13 2"}]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-in","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"10","y1":"7","x2":"10","y2":"13"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-zoom-out","children":[["$","circle",null,{"cx":"10","cy":"10","r":"8"}],["$","line",null,{"x1":"21","y1":"21","x2":"15.65","y2":"15.65"}],["$","line",null,{"x1":"7","y1":"10","x2":"13","y2":"10"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-connection","children":[["$","line",null,{"x1":"3","y1":"7","x2":"21","y2":"7"}],["$","polyline",null,{"points":"17 3 21 7 17 11"}],["$","line",null,{"x1":"21","y1":"17","x2":"3","y2":"17"}],["$","polyline",null,{"points":"7 21 3 17 7 13"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-y","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"3","y1":"12","x2":"21","y2":"12"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-split-x","children":[["$","rect",null,{"x":"3","y":"3","width":"18","height":"18","rx":"1","ry":"1"}],["$","line",null,{"x1":"12","y1":"3","x2":"12","y2":"21"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-sync","children":[["$","line",null,{"x1":"6","y1":"7","x2":"19","y2":"7"}],["$","polyline",null,{"points":"16 4 19 7 16 10"}],["$","line",null,{"x1":"18","y1":"17","x2":"5","y2":"17"}],["$","polyline",null,{"points":"8 20 5 17 8 14"}]]}],["$","symbol",null,{"viewBox":"0 0 24 24","id":"glyph-history","children":[["$","polyline",null,{"points":"12 7.5 12 12 15 15"}],["$","polyline",null,{"points":"6 7.5 1.5 7.5 1.5 3"}],["$","path",null,{"d":"M2.52,16.5a10.5,10.5,0,1,0,0-9"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-check","children":[["$","polyline",null,{"points":"2 7 5 10 12 3","fill":"transparent"}],["$","rect",null,{"x":"2","y":"6","width":"10","height":"2","rx":"1","ry":"1","stroke":"transparent"}]]}],["$","symbol",null,{"viewBox":"0 0 14 14","id":"glyph-form-radio","children":["$","circle",null,{"cx":"7","cy":"7","r":"2","fill":"currentColor"}]}]]}]]}]]}]]}]
d:I{"id":4871,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","185:static/chunks/app/layout-8032c1cb404a348f.js"],"name":"ModelTreeClient","async":false}
e:I{"id":3137,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"SetActive","async":false}
f:I{"id":2201,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ColumnDetails","async":false}
12:I{"id":9941,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"ReferenceListClient","async":false}
32:I{"id":4431,"chunks":["795:static/chunks/795-9c49dc1a9d0e070b.js","300:static/chunks/300-2f21f75028d37aac.js","258:static/chunks/258-ce9da1e76dd2abbf.js","832:static/chunks/832-237573527834b74e.js","845:static/chunks/app/model/[id]/page-095c388c6388bd4d.js"],"name":"CodeBlock","async":false}
8:[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"\n          .menu ul ul {\n                margin-left: 12px;\n          }\n          .unselectable{\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n          }\n    "}}],["$","$Ld",null,{}]]
10:Te2f,{{ config({
    "alias": "zuora_account_source"
}) }}

-- depends_on: {{ ref('zuora_excluded_accounts') }}
WITH source AS (

    SELECT *
    FROM {{ source('zuora', 'account') }}

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("{{this.database}}".{{target.schema}}.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamed11:Tde2,

-- depends_on: "PROD".legacy.zuora_excluded_accounts
WITH source AS (

    SELECT *
    FROM "RAW".zuora_stitch.account

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("PREP".preparation.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamed13:T1783,{{ simple_cte ([
  ('gitlab_namespaces', 'gitlab_dotcom_namespaces_source'),
  ('gitlab_members', 'gitlab_dotcom_members_source'),
  ('gitlab_users', 'gitlab_dotcom_users_source'),
  ('customer_db_source', 'customers_db_customers_source'),
  ('zuora_account', 'zuora_account_source'),
  ('zuora_contact', 'zuora_contact_source'),
  ('dim_marketing_contact', 'dim_marketing_contact'),
  ('prep_namespace', 'prep_namespace')
]) }}

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2022-10-03"
) }}14:T19aa,

WITH gitlab_namespaces AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_namespaces_source

), gitlab_members AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_members_source

), gitlab_users AS (

    SELECT * 
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT * 
    FROM "PREP".customers.customers_db_customers_source

), zuora_account AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), dim_marketing_contact AS (

    SELECT * 
    FROM "PREP".sensitive.dim_marketing_contact

), prep_namespace AS (

    SELECT * 
    FROM "PROD".common_prep.prep_namespace

)

, bdg AS (

    SELECT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      owner_id                                                    AS user_id,
      NULL                                                        AS customer_db_customer_id,
      namespace_id                                                AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Personal Namespace Owner'                                  AS marketing_contact_role
    FROM gitlab_namespaces
    INNER JOIN gitlab_users 
      ON gitlab_users.user_id = gitlab_namespaces.owner_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email 
    WHERE owner_id IS NOT NULL
      AND namespace_type = 'User'
      AND parent_id IS NULL
  
    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Owner'                                     AS marketing_contact_role
      FROM gitlab_members
      INNER JOIN gitlab_users
        ON gitlab_users.user_id = gitlab_members.user_id
      LEFT JOIN dim_marketing_contact
        ON dim_marketing_contact.email_address = gitlab_users.notification_email
      WHERE gitlab_members.member_source_type = 'Namespace'
        AND gitlab_members.access_level = 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Member'                                    AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level <> 50

    UNION ALL

    SELECT DISTINCT
      dim_marketing_contact_id,
      gitlab_users.notification_email                             AS email_address,
      gitlab_users.user_id                                        AS user_id,
      NULL                                                        AS customer_db_customer_id,
      gitlab_members.source_id                                    AS namespace_id,
      NULL                                                        AS zuora_billing_account_id,
      'Group Namespace Maintainer'                                AS marketing_contact_role
    FROM gitlab_members
    INNER JOIN gitlab_users
      ON gitlab_users.user_id = gitlab_members.user_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = gitlab_users.notification_email
    WHERE gitlab_members.member_source_type = 'Namespace'
      AND gitlab_members.access_level = 40

    UNION ALL

    SELECT
      dim_marketing_contact_id,
      customer_db_source.customer_email                           AS email_address,
      NULL                                                        AS user_id,
      customer_id                                                 AS customer_db_customer_id,
      NULL                                                        AS namespace_id,
      CAST(NULL as varchar)                                       AS zuora_billing_account_id,
      'Customer DB Owner'                                         AS marketing_contact_role
    FROM customer_db_source
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = customer_db_source.customer_email
  
   UNION ALL

    SELECT
      dim_marketing_contact_id,
      zuora_contact.work_email                                   AS email_address,
      NULL                                                       AS user_id,
      NULL                                                       AS customer_db_customer_id,
      NULL                                                       AS namespace_id,
      zuora_account.account_id                                   AS zuora_billing_account_id,
      'Zuora Billing Contact'                                    AS marketing_contact_role
    FROM zuora_account
    INNER JOIN zuora_contact
      ON zuora_contact.account_id = zuora_account.account_id
    LEFT JOIN dim_marketing_contact
      ON dim_marketing_contact.email_address = zuora_contact.work_email
    
), final AS (

    SELECT bdg.*
    FROM bdg
    LEFT JOIN prep_namespace
      ON bdg.namespace_id = prep_namespace.dim_namespace_id
    WHERE bdg.namespace_id IS NULL
      OR prep_namespace.is_currently_valid = TRUE

)



SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2022-10-03'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final15:T5510,WITH sfdc_lead AS (

    SELECT *
    FROM {{ref('sfdc_lead_source') }}

), sfdc_contact AS (

    SELECT *
    FROM {{ref('sfdc_contact_source') }}

), sfdc_account AS (

    SELECT *
    FROM {{ref('sfdc_account_source') }}

), marketo AS (

    SELECT *
    FROM {{ref('marketo_lead_source') }}
    
), crm_account AS (

    SELECT *
    FROM {{ref('dim_crm_account') }}

), sales_segment AS (

    SELECT *
    FROM {{ref('prep_sales_segment') }}

), crm_person AS (

    SELECT *
    FROM {{ref('prep_crm_person') }}

), gitlab_users AS (

    SELECT *
    FROM {{ref('gitlab_dotcom_users_source') }}

), customer_db_source AS (

    SELECT *
    FROM {{ref('customers_db_customers_source') }}

), zuora_contact_source AS (

    SELECT *
    FROM {{ref('zuora_contact_source') }}

), zuora_account_source AS (

    SELECT *
    FROM {{ref('zuora_account_source') }}

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM {{ref('driveload_marketing_dnc_list_source')}}
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      {{ dbt_utils.surrogate_key(['emails.email_address']) }}                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      {{ days_buckets('days_since_saas_signup') }}                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      {{ days_buckets('days_since_self_managed_owner_signup') }}                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@rmistry",
    updated_by="@jpeguero",
    created_date="2021-01-19",
    updated_date="2023-06-19"
) }}16:T5da8,WITH sfdc_lead AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_lead_source

), sfdc_contact AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_contact_source

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source

), marketo AS (

    SELECT *
    FROM "PREP".marketo.marketo_lead_source
    
), crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common.dim_crm_account

), sales_segment AS (

    SELECT *
    FROM "PROD".common_prep.prep_sales_segment

), crm_person AS (

    SELECT *
    FROM "PROD".common_prep.prep_crm_person

), gitlab_users AS (

    SELECT *
    FROM "PREP".gitlab_dotcom.gitlab_dotcom_users_source

), customer_db_source AS (

    SELECT *
    FROM "PREP".customers.customers_db_customers_source

), zuora_contact_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source

), zuora_account_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), dnc_list AS (

    SELECT *,
      ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY CASE WHEN result IN ('undeliverable', 'do_not_send') THEN 2 ELSE 1 END DESC)                                                    AS record_number
    FROM "PREP".driveload.driveload_marketing_dnc_list_source
    QUALIFY record_number = 1

), sfdc AS (

    SELECT
      crm_person.sfdc_record_id,
      crm_person.dim_crm_account_id,
      CASE WHEN crm_person.sfdc_record_type = 'contact' THEN sfdc_contact.contact_email ELSE sfdc_lead.lead_email END        AS email_address,
      crm_person.dim_crm_person_id                                                                                           AS crm_person_id,
      crm_person.sfdc_record_type                                                                                            AS sfdc_lead_contact,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.contact_first_name
        ELSE sfdc_lead.lead_first_name
      END                                                                                                                    AS first_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_contact.contact_last_name  <> '[[unknown]]' THEN sfdc_contact.contact_last_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.lead_last_name <> '[[unknown]]' THEN sfdc_lead.lead_last_name
      END                                                                                                                    AS last_name,
      CASE
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name = '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'contact' AND sfdc_account.account_name <> '[[unknown]]' THEN sfdc_account.account_name
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company =  '[[unknown]]' THEN NULL
        WHEN sfdc_lead_contact = 'lead' AND sfdc_lead.company <>  '[[unknown]]' THEN sfdc_lead.company
      END                                                                                                                   AS company_name,
      crm_person.title                                                                                                      AS job_title,
      crm_person.it_job_title_hierarchy,
      crm_account.parent_crm_account_sales_segment                                                                          AS parent_crm_account_sales_segment,
      crm_account.parent_crm_account_region                                                                                 AS parent_crm_account_region,
      crm_person.account_demographics_geo                                                                                   AS crm_person_region,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.mailing_country
        ELSE sfdc_lead.country
      END                                                                                                                   AS country,
      sfdc_contact.mobile_phone,
      CASE
        WHEN sfdc_lead_contact = 'contact' THEN sfdc_contact.created_date
        ELSE sfdc_lead.created_date
      END                                                                                                                   AS sfdc_created_date,
      crm_person.has_opted_out_email                                                                                        AS opted_out_salesforce,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY sfdc_created_date DESC))                                      AS record_number

    FROM crm_person
    LEFT JOIN sfdc_contact
      ON sfdc_contact.contact_id = crm_person.sfdc_record_id
    LEFT JOIN sfdc_lead
      ON sfdc_lead.lead_id = sfdc_record_id
    LEFT JOIN sfdc_account
      ON sfdc_account.account_id = sfdc_contact.account_id
    LEFT JOIN crm_account
      ON crm_account.dim_crm_account_id = crm_person.dim_crm_account_id
    WHERE  email_address IS NOT NULL
      AND email_address <> ''
    QUALIFY record_number = 1

), marketo_lead AS (

    SELECT
      marketo_lead_id,
      email                                                                             AS email_address,
      first_name,
      last_name,
      IFF(company_name = '[[unknown]]', NULL, company_name)                             AS company_name,
      job_title,
      it_job_title_hierarchy,
      country,
      mobile_phone,
      is_lead_inactive,
      is_contact_inactive,
      IFF(sales_segmentation = 'Unknown', NULL, sales_segmentation)                     AS sales_segmentation,
      is_email_bounced                                                                  AS is_marketo_email_bounced,
      email_bounced_date                                                                AS marketo_email_bounced_date,
      is_unsubscribed                                                                   AS is_marketo_unsubscribed,
      COALESCE(is_marketo_unsubscribed, FALSE)                                          AS has_marketo_unsubscribed,
      is_opt_in                                                                         AS is_marketo_opted_in,
      compliance_segment_value                                                          AS marketo_compliance_segment_value,
      is_pql_marketo,
      is_paid_tier_marketo,
      is_ptpt_contact_marketo,
      is_ptp_contact_marketo,
      is_impacted_by_user_limit_marketo,
      is_currently_in_trial_marketo,
      trial_start_date_marketo,
      trial_end_date_marketo,
      (ROW_NUMBER() OVER (PARTITION BY email ORDER BY updated_at DESC))                 AS record_number

    FROM marketo
    WHERE email IS NOT NULL
      OR  email <> ''
    QUALIFY record_number = 1
  
), gitlab_dotcom AS (

    SELECT
      COALESCE(notification_email, email)                                                                                   AS email_address,
      user_id                                                                                                               AS user_id,
      SPLIT_PART(users_name,' ',1)                                                                                          AS first_name,
      SPLIT_PART(users_name,' ',2)                                                                                          AS last_name,
      user_name                                                                                                             AS user_name,
      organization                                                                                                          AS company_name,
      role                                                                                                                  AS job_title,
      it_job_title_hierarchy,
      created_at                                                                                                            AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      state                                                                                                                 AS active_state,
      last_sign_in_at                                                                                                       AS last_login_date,
      is_email_opted_in                                                                                                     AS email_opted_in,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM gitlab_users
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND active_state = 'active'
    QUALIFY record_number = 1

), customer_db AS (

    SELECT
      customer_email                                                                                                        AS email_address,
      customer_id                                                                                                           AS customer_id,
      customer_first_name                                                                                                   AS first_name,
      customer_last_name                                                                                                    AS last_name,
      company                                                                                                               AS company_name,
      country                                                                                                               AS country,
      customer_created_at                                                                                                   AS created_date,
      confirmed_at                                                                                                          AS confirmed_date,
      company_size                                                                                                          AS market_segment,
      last_sign_in_at                                                                                                       AS last_login_date,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY created_date DESC))                                           AS record_number
    FROM customer_db_source
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND confirmed_at IS NOT NULL
    QUALIFY record_number = 1

), zuora AS (

    SELECT
      zuora_contact_source.work_email                                                                                       AS email_address,
      zuora_contact_source.contact_id                                                                                       AS contact_id,
      zuora_contact_source.first_name                                                                                       AS first_name,
      zuora_contact_source.last_name                                                                                        AS last_name,
      zuora_account_source.account_name                                                                                     AS company_name,
      zuora_contact_source.country                                                                                          AS country,
      zuora_contact_source.created_date                                                                                     AS created_date,
      CASE
        WHEN zuora_contact_source.is_deleted = TRUE THEN 'Inactive'
        ELSE 'Active'
      END                                                                                                                   AS active_state,
      (ROW_NUMBER() OVER (PARTITION BY email_address ORDER BY zuora_contact_source.created_date DESC))                      AS record_number
    FROM zuora_contact_source
    INNER JOIN zuora_account_source
      ON zuora_account_source.account_id = zuora_contact_source.account_id
    WHERE email_address IS NOT NULL
      AND email_address <> ''
      AND zuora_contact_source.is_deleted = FALSE
    QUALIFY record_number = 1

), emails AS (

    SELECT email_address
    FROM sfdc

    UNION

    SELECT email_address
    FROM gitlab_dotcom

    UNION

    SELECT email_address
    FROM customer_db

    UNION

    SELECT email_address
    FROM zuora

    UNION

    SELECT email_address
    FROM marketo_lead

), final AS (

    SELECT
      md5(cast(coalesce(cast(emails.email_address as 
    varchar
), '') as 
    varchar
))                                                            AS dim_marketing_contact_id,
      emails.email_address,
      COALESCE(zuora.first_name, marketo_lead.first_name, sfdc.first_name, customer_db.first_name, gitlab_dotcom.first_name) 
                                                                                                                         AS first_name,
      COALESCE(zuora.last_name, marketo_lead.last_name, sfdc.last_name, customer_db.last_name, gitlab_dotcom.last_name)  AS last_name,
      gitlab_dotcom.user_name                                                                                            AS gitlab_user_name,
      COALESCE(zuora.company_name,  marketo_lead.company_name, sfdc.company_name, customer_db.company_name, gitlab_dotcom.company_name)
                                                                                                                         AS company_name,
      COALESCE(marketo_lead.job_title, sfdc.job_title, gitlab_dotcom.job_title)                                          AS job_title,
      CASE
        WHEN marketo_lead.job_title IS NOT NULL THEN marketo_lead.it_job_title_hierarchy
        WHEN sfdc.job_title IS NOT NULL THEN sfdc.it_job_title_hierarchy
        ELSE gitlab_dotcom.it_job_title_hierarchy
      END                                                                                                                AS it_job_title_hierarchy,
      COALESCE(zuora.country, marketo_lead.country, sfdc.country, customer_db.country)                                   AS country,
      sfdc.parent_crm_account_sales_segment                                                                              AS sfdc_parent_sales_segment,
      COALESCE(sfdc.parent_crm_account_region, sfdc.crm_person_region)                                                   AS sfdc_parent_crm_account_region,
      marketo_lead.marketo_lead_id                                                                                       AS marketo_lead_id,
      IFF(marketo_lead.email_address IS NOT NULL, TRUE, FALSE)                                                           AS is_marketo_lead,
      COALESCE(marketo_lead.is_marketo_email_bounced, FALSE)                                                             AS is_marketo_email_hard_bounced,
      marketo_lead.marketo_email_bounced_date                                                                            AS marketo_email_hard_bounced_date,
      marketo_lead.is_marketo_unsubscribed,
      marketo_lead.is_marketo_opted_in,
      marketo_lead.has_marketo_unsubscribed,
      marketo_lead.marketo_compliance_segment_value                                                                      AS marketo_compliance_segment_value,
      IFNULL(marketo_lead.is_pql_marketo, FALSE)                                                                         AS is_pql_marketo,
      IFNULL(marketo_lead.is_paid_tier_marketo, FALSE)                                                                   AS is_paid_tier_marketo,
      IFNULL(marketo_lead.is_ptpt_contact_marketo, FALSE)                                                                AS is_ptpt_contact_marketo,
      IFNULL(marketo_lead.is_ptp_contact_marketo, FALSE)                                                                 AS is_ptp_contact_marketo,
      IFNULL(marketo_lead.is_impacted_by_user_limit_marketo, FALSE)                                                      AS is_impacted_by_user_limit_marketo,
      IFNULL(marketo_lead.is_currently_in_trial_marketo, FALSE)                                                          AS is_currently_in_trial_marketo,
      marketo_lead.trial_start_date_marketo                                                                              AS trial_start_date_marketo,
      marketo_lead.trial_end_date_marketo                                                                                AS trial_end_date_marketo,
      CASE
        WHEN sfdc.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_sfdc_lead_contact,
      sfdc.sfdc_record_id,
      sfdc.dim_crm_account_id,
      sfdc.sfdc_lead_contact,
      COALESCE(marketo_lead.mobile_phone, sfdc.mobile_phone)                                                             AS mobile_phone,
      sfdc.sfdc_created_date                                                                                             AS sfdc_created_date,
      sfdc.opted_out_salesforce                                                                                          AS is_sfdc_opted_out,
      CASE
        WHEN gitlab_dotcom.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_gitlab_dotcom_user,
      gitlab_dotcom.user_id                                                                                              AS gitlab_dotcom_user_id,
      gitlab_dotcom.created_date                                                                                         AS gitlab_dotcom_created_date,
      gitlab_dotcom.confirmed_date                                                                                       AS gitlab_dotcom_confirmed_date,
      gitlab_dotcom.active_state                                                                                         AS gitlab_dotcom_active_state,
      gitlab_dotcom.last_login_date                                                                                      AS gitlab_dotcom_last_login_date,
      gitlab_dotcom.email_opted_in                                                                                       AS gitlab_dotcom_email_opted_in,
      DATEDIFF(DAY, gitlab_dotcom.confirmed_date, GETDATE())                                                             AS days_since_saas_signup,
      CASE 
  WHEN days_since_saas_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_saas_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_saas_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_saas_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_saas_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_saas_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_saas_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_saas_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_saas_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_saas_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_saas_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_saas_signup > 1095
    THEN '[12] 3+ Years'
END                                                                       AS days_since_saas_signup_bucket,
      CASE
        WHEN customer_db.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_customer_db_user,
      customer_db.customer_id                                                                                            AS customer_db_customer_id,
      customer_db.created_date                                                                                           AS customer_db_created_date,
      customer_db.confirmed_date                                                                                         AS customer_db_confirmed_date,
      DATEDIFF(DAY, customer_db.confirmed_date, GETDATE())                                                               AS days_since_self_managed_owner_signup,
      CASE 
  WHEN days_since_self_managed_owner_signup BETWEEN 0 AND 6
    THEN '[01] 0-6 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 7 AND 14
    THEN '[02] 7-14 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 15 AND 21
    THEN '[03] 15-21 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 22 AND 30
    THEN '[04] 22-30 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 31 AND 60
    THEN '[05] 31-60 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 61 AND 90
    THEN '[06] 61-90 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 91 AND 120
    THEN '[07] 91-120 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 121 AND 180
    THEN '[08] 121-180 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 181 AND 365
    THEN '[09] 181-365 Days'
  WHEN days_since_self_managed_owner_signup BETWEEN 366 AND 730
    THEN '[10] 1-2 Years'
  WHEN days_since_self_managed_owner_signup BETWEEN 731 AND 1095
    THEN '[11] 2-3 Years'
  WHEN days_since_self_managed_owner_signup > 1095
    THEN '[12] 3+ Years'
END                                                         AS days_since_self_managed_owner_signup_bucket,
      CASE
        WHEN zuora.email_address IS NOT NULL THEN TRUE
        ELSE FALSE
      END                                                                                                                AS is_zuora_billing_contact,
      zuora.contact_id                                                                                                   AS zuora_contact_id,
      zuora.created_date                                                                                                 AS zuora_created_date,
      zuora.active_state                                                                                                 AS zuora_active_state,
      dnc_list.result                                                                                                    AS dnc_list_result,
      CASE
        WHEN dnc_list.result IN ('undeliverable', 'do_not_send')
          THEN FALSE
        ELSE TRUE
      END                                                                                                                AS wip_is_valid_email_address,
      CASE
        WHEN NOT wip_is_valid_email_address
          THEN dnc_list.result
      END                                                                                                                AS wip_invalid_email_address_reason

    FROM emails
    LEFT JOIN sfdc
      ON sfdc.email_address = emails.email_address
    LEFT JOIN gitlab_dotcom
      ON gitlab_dotcom.email_address = emails.email_address
    LEFT JOIN customer_db
      ON customer_db.email_address = emails.email_address
    LEFT JOIN zuora
      ON zuora.email_address = emails.email_address
    LEFT JOIN marketo_lead
      ON marketo_lead.email_address = emails.email_address
    LEFT JOIN dnc_list
      ON dnc_list.email_address = emails.email_address

)

SELECT
      *,
      '@rmistry'::VARCHAR       AS created_by,
      '@jpeguero'::VARCHAR       AS updated_by,
      '2021-01-19'::DATE        AS model_created_date,
      '2023-06-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final17:T16cb,WITH date_table AS (

    SELECT *
    FROM {{ ref('date_details') }}
    WHERE day_of_month = 1

), zuora_accts AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE

), zuora_acct_period AS (

    SELECT *
    FROM {{ ref('zuora_accounting_period_source') }}

), zuora_contact AS (

    SELECT *
    FROM {{ ref('zuora_contact_source') }}
    WHERE is_deleted = FALSE

), zuora_product AS (

    SELECT *
    FROM {{ ref('zuora_product_source') }}
    WHERE is_deleted = FALSE

), zuora_rp AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}
    WHERE is_deleted = FALSE

), zuora_rpc AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), base_mrr AS (

    SELECT
      --primary key
      zuora_rpc.rate_plan_charge_id,

      --account info
      zuora_accts.account_id,
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --subscription info
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,

      --rate_plan info
      zuora_rpc.product_rate_plan_charge_id,
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      zuora_rpc.rate_plan_charge_number,
      zuora_rpc.unit_of_measure,
      zuora_rpc.quantity,
      zuora_rpc.mrr,
      zuora_rpc.charge_type,

      --date info
      date_trunc('month', zuora_subscription.subscription_start_date::DATE)     AS sub_start_month,
      date_trunc('month', zuora_subscription.subscription_end_date::DATE)       AS sub_end_month,
      subscription_start_date::DATE                                             AS subscription_start_date,
      subscription_end_date::DATE                                               AS subscription_end_date,
      zuora_rpc.effective_start_month,
      zuora_rpc.effective_end_month,
      zuora_rpc.effective_start_date::DATE                                      AS effective_start_date,
      zuora_rpc.effective_end_date::DATE                                        AS effective_end_date
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rpc.product_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND zuora_rpc.charge_type = 'Recurring'
      AND mrr != 0

), month_base_mrr AS (

    SELECT
      date_actual                               AS mrr_month,
      account_number,
      crm_id,
      account_name,
      account_id,
      subscription_id,
      subscription_name_slugify,
      sub_start_month,
      sub_end_month,
      subscription_start_date,
      subscription_end_date,
      effective_start_month,
      effective_end_month,
      effective_start_date,
      effective_end_date,
      country,
      {{product_category('rate_plan_name')}},
      {{ delivery('product_category')}},
      CASE
        WHEN lower(rate_plan_name) like '%support%'
          THEN 'Support Only'
        ELSE 'Full Service'
      END                                       AS service_type,
      product_rate_plan_charge_id,
      rate_plan_name,
      rate_plan_charge_name,
      charge_type,
      unit_of_measure,
      SUM(mrr)                                  AS mrr,
      SUM(quantity)                             AS quantity
    FROM base_mrr
    INNER JOIN date_table
      ON base_mrr.effective_start_month <= date_table.date_actual
      AND (base_mrr.effective_end_month > date_table.date_actual OR base_mrr.effective_end_month IS NULL)
    {{ dbt_utils.group_by(n=24) }}

), current_mrr AS (

    SELECT
      zuora_accts.account_id,
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,
      SUM(zuora_rpc.mrr)    AS total_current_mrr
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND effective_start_date <= current_date
      AND (effective_end_date > current_date OR effective_end_date IS NULL)
    {{ dbt_utils.group_by(n=3) }}

)

SELECT
  mrr_month,
  month_base_mrr.account_id,
  account_number,
  account_name,
  crm_id,
  month_base_mrr.subscription_id,
  month_base_mrr.subscription_name_slugify,
  sub_start_month,
  sub_end_month,
  effective_start_month,
  effective_end_month,
  country,
  product_category,
  delivery,
  service_type,
  product_rate_plan_charge_id,
  rate_plan_name,
  rate_plan_charge_name,
  charge_type,
  unit_of_measure,
  SUM(mrr)                                                              AS mrr,
  SUM(mrr*12)                                                           AS arr,
  SUM(quantity)                                                         AS quantity,
  MAX(total_current_mrr)                                                AS total_current_mrr
FROM month_base_mrr
LEFT JOIN current_mrr
  ON month_base_mrr.subscription_id = current_mrr.subscription_id
{{ dbt_utils.group_by(n=20) }}18:T2b31,WITH date_table AS (

    SELECT *
    FROM "PROD".legacy.date_details
    WHERE day_of_month = 1

), zuora_accts AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE

), zuora_acct_period AS (

    SELECT *
    FROM "PREP".zuora.zuora_accounting_period_source

), zuora_contact AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source
    WHERE is_deleted = FALSE

), zuora_product AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_source
    WHERE is_deleted = FALSE

), zuora_rp AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source
    WHERE is_deleted = FALSE

), zuora_rpc AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), base_mrr AS (

    SELECT
      --primary key
      zuora_rpc.rate_plan_charge_id,

      --account info
      zuora_accts.account_id,
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --subscription info
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,

      --rate_plan info
      zuora_rpc.product_rate_plan_charge_id,
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      zuora_rpc.rate_plan_charge_number,
      zuora_rpc.unit_of_measure,
      zuora_rpc.quantity,
      zuora_rpc.mrr,
      zuora_rpc.charge_type,

      --date info
      date_trunc('month', zuora_subscription.subscription_start_date::DATE)     AS sub_start_month,
      date_trunc('month', zuora_subscription.subscription_end_date::DATE)       AS sub_end_month,
      subscription_start_date::DATE                                             AS subscription_start_date,
      subscription_end_date::DATE                                               AS subscription_end_date,
      zuora_rpc.effective_start_month,
      zuora_rpc.effective_end_month,
      zuora_rpc.effective_start_date::DATE                                      AS effective_start_date,
      zuora_rpc.effective_end_date::DATE                                        AS effective_end_date
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rpc.product_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND zuora_rpc.charge_type = 'Recurring'
      AND mrr != 0

), month_base_mrr AS (

    SELECT
      date_actual                               AS mrr_month,
      account_number,
      crm_id,
      account_name,
      account_id,
      subscription_id,
      subscription_name_slugify,
      sub_start_month,
      sub_end_month,
      subscription_start_date,
      subscription_end_date,
      effective_start_month,
      effective_end_month,
      effective_start_date,
      effective_end_date,
      country,
      CASE
  WHEN LOWER(rate_plan_name) LIKE '%gold%'
    THEN 'SaaS - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%silver%'
    THEN 'SaaS - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%dedicated - ultimate%'
    THEN 'Dedicated - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%ultimate%'
    THEN 'Self-Managed - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%premium%'
    THEN 'Self-Managed - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%bronze%'
    THEN 'SaaS - Bronze'
  WHEN LOWER(rate_plan_name) LIKE '%starter%'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab enterprise edition%'
    THEN 'Self-Managed - Starter'
  WHEN rate_plan_name = 'Pivotal Cloud Foundry Tile for GitLab EE'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'plus%'
    THEN 'Plus'
  WHEN LOWER(rate_plan_name) LIKE 'standard%'
    THEN 'Standard'
  WHEN LOWER(rate_plan_name) LIKE 'basic%'
    THEN 'Basic'
  WHEN rate_plan_name = 'Trueup'
    THEN 'Trueup'
  WHEN LTRIM(LOWER(rate_plan_name)) LIKE 'githost%'
    THEN 'GitHost'
  WHEN LOWER(rate_plan_name) LIKE ANY ('%quick start with ha%', '%proserv training per-seat add-on%')
    THEN 'Support'
  WHEN TRIM(rate_plan_name) IN (
                                      'GitLab Service Package'
                                    , 'Implementation Services Quick Start'
                                    , 'Implementation Support'
                                    , 'Support Package'
                                    , 'Admin Training'
                                    , 'CI/CD Training'
                                    , 'GitLab Project Management Training'
                                    , 'GitLab with Git Basics Training'
                                    , 'Travel Expenses'
                                    , 'Training Workshop'
                                    , 'GitLab for Project Managers Training - Remote'
                                    , 'GitLab with Git Basics Training - Remote'
                                    , 'GitLab for System Administrators Training - Remote'
                                    , 'GitLab CI/CD Training - Remote'
                                    , 'InnerSourcing Training - Remote for your team'
                                    , 'GitLab DevOps Fundamentals Training'
                                    , 'Self-Managed Rapid Results Consulting'
                                    , 'Gitlab.com Rapid Results Consulting'
                                    , 'GitLab Security Essentials Training - Remote Delivery'
                                    , 'InnerSourcing Training - At your site'
                                    , 'Migration+'
                                    , 'One Time Discount'
                                    , 'LDAP Integration'
                                    , 'Dedicated Implementation Services'
                                    , 'Quick Start without HA, less than 500 users'
                                    , 'Jenkins Integration'
                                    , 'Hourly Consulting'
                                    , 'JIRA Integration'
                                    , 'Custom PS Education Services'
                                    , 'Dedicated Engineer - 3 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 12 Month'
                                    , 'Dedicated Engineer - 3 Month'
                                    , 'Dedicated Engineer - 6 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 6 Month'
                                    , 'GitLab System Administration Training - Remote'
                                    , 'Expert Services (48 Hours)'
                                    )
    THEN 'Support'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab geo%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'ci runner%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'discount%'
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      '#movingtogitlab'
                                    , 'Payment Gateway Test'
                                    , 'EdCast Settlement Revenue'
                                    , 'GitLab Certification Exam'
                                    )
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      'File Locking'
                                    , 'Time Tracking'
                                    , '1,000 CI Minutes'
                                    )
    THEN 'SaaS - Other'
  WHEN TRIM(rate_plan_name) IN ('Gitlab Storage 10GB')
    THEN 'Storage'
  ELSE 'Not Applicable'
END AS product_category,
      CASE 
  WHEN LOWER(product_category) LIKE ANY ('%saas%', 'storage', 'standard', 'basic', 'plus', 'githost', '%dedicated - ultimate%')
    THEN 'SaaS'
  WHEN LOWER(product_category) LIKE '%self-managed%'
    THEN 'Self-Managed'
  WHEN product_category IN (
                                        'Other'
                                      , 'Support'
                                      , 'Trueup'
                                      )
    THEN 'Others'
  ELSE NULL
END AS delivery,
      CASE
        WHEN lower(rate_plan_name) like '%support%'
          THEN 'Support Only'
        ELSE 'Full Service'
      END                                       AS service_type,
      product_rate_plan_charge_id,
      rate_plan_name,
      rate_plan_charge_name,
      charge_type,
      unit_of_measure,
      SUM(mrr)                                  AS mrr,
      SUM(quantity)                             AS quantity
    FROM base_mrr
    INNER JOIN date_table
      ON base_mrr.effective_start_month <= date_table.date_actual
      AND (base_mrr.effective_end_month > date_table.date_actual OR base_mrr.effective_end_month IS NULL)
    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24

), current_mrr AS (

    SELECT
      zuora_accts.account_id,
      zuora_subscription.subscription_id,
      zuora_subscription.subscription_name_slugify,
      SUM(zuora_rpc.mrr)    AS total_current_mrr
    FROM zuora_accts
    INNER JOIN zuora_subscription
      ON zuora_accts.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rp
      ON zuora_rp.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_rpc
      ON zuora_rpc.rate_plan_id = zuora_rp.rate_plan_id
    WHERE zuora_subscription.subscription_status NOT IN ('Draft','Expired')
      AND effective_start_date <= current_date
      AND (effective_end_date > current_date OR effective_end_date IS NULL)
    group by 1,2,3

)

SELECT
  mrr_month,
  month_base_mrr.account_id,
  account_number,
  account_name,
  crm_id,
  month_base_mrr.subscription_id,
  month_base_mrr.subscription_name_slugify,
  sub_start_month,
  sub_end_month,
  effective_start_month,
  effective_end_month,
  country,
  product_category,
  delivery,
  service_type,
  product_rate_plan_charge_id,
  rate_plan_name,
  rate_plan_charge_name,
  charge_type,
  unit_of_measure,
  SUM(mrr)                                                              AS mrr,
  SUM(mrr*12)                                                           AS arr,
  SUM(quantity)                                                         AS quantity,
  MAX(total_current_mrr)                                                AS total_current_mrr
FROM month_base_mrr
LEFT JOIN current_mrr
  ON month_base_mrr.subscription_id = current_mrr.subscription_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,2019:T1722,WITH map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM {{ ref('zuora_invoice_source') }}
    WHERE is_deleted = FALSE

), zuora_invoice_item AS (

    SELECT *
    FROM  {{ ref('zuora_invoice_item_source') }}
    WHERE is_deleted = FALSE

), zuora_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}
    WHERE is_deleted = FALSE

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_revenue_bill AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_bill_source') }}

), base_charges AS (

    SELECT
      zuora_account.account_id                                                  AS billing_account_id_subscription,
      map_merged_crm_account.dim_crm_account_id                                 AS crm_account_id_subscription,
      zuora_subscription.subscription_id,
      zuora_rate_plan_charge.rate_plan_charge_id                                AS charge_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.segment                                            AS rate_plan_charge_segment,
      zuora_rate_plan_charge.version                                            AS rate_plan_charge_version,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.mrr*12                                             AS arr,
      zuora_rate_plan_charge.quantity,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_start_date::DATE)     AS effective_start_month,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_end_date::DATE)       AS effective_end_month
    FROM zuora_account
    INNER JOIN zuora_subscription
      ON zuora_account.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rate_plan
      ON zuora_subscription.subscription_id = zuora_rate_plan.subscription_id
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id

), invoice_charges AS (

    SELECT
      zuora_invoice_item.invoice_item_id                AS invoice_item_id,
      zuora_invoice.invoice_id                          AS invoice_id,
      zuora_invoice.invoice_number,
      zuora_invoice.invoice_date::DATE                  AS invoice_date,
      zuora_invoice_item.service_start_date::DATE       AS service_start_date,
      zuora_invoice_item.service_end_date::DATE         AS service_end_date,
      zuora_invoice.account_id                          AS billing_account_id_invoice,
      map_merged_crm_account.dim_crm_account_id         AS crm_account_id_invoice,
      zuora_invoice_item.rate_plan_charge_id            AS charge_id,
      zuora_invoice_item.product_rate_plan_charge_id    AS product_details_id,
      zuora_invoice_item.sku                            AS sku,
      zuora_invoice_item.tax_amount                     AS tax_amount_sum,
      zuora_invoice.amount_without_tax                  AS invoice_amount_without_tax,
      zuora_invoice_item.charge_amount                  AS invoice_item_charge_amount,
      zuora_invoice_item.unit_price                     AS invoice_item_unit_price
    FROM zuora_invoice_item
    INNER JOIN zuora_invoice
      ON zuora_invoice_item.invoice_id = zuora_invoice.invoice_id
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE zuora_invoice.status='Posted'

), final AS (

    SELECT
      invoice_charges.invoice_item_id,
      invoice_charges.invoice_id                    AS dim_invoice_id,
      base_charges.billing_account_id_subscription  AS dim_billing_account_id_subscription,
      base_charges.crm_account_id_subscription      AS dim_crm_account_id_subscription,
      invoice_charges.billing_account_id_invoice    AS dim_billing_account_id_invoice,
      invoice_charges.crm_account_id_invoice        AS dim_crm_account_id_invoice,
      base_charges.subscription_id                  AS dim_subscription_id,
      zuora_revenue_bill.revenue_contract_line_id   AS dim_revenue_contract_line_id,
      invoice_charges.charge_id,
      invoice_charges.product_details_id            AS dim_product_detail_id,
      invoice_charges.invoice_number,
      invoice_charges.invoice_date,
      invoice_charges.service_start_date,
      invoice_charges.service_end_date,
      base_charges.effective_start_month,
      base_charges.effective_end_month,
      base_charges.quantity,
      base_charges.mrr,
      base_charges.arr,
      invoice_charges.invoice_item_charge_amount,
      invoice_charges.invoice_item_unit_price,
      invoice_charges.invoice_amount_without_tax,
      invoice_charges.tax_amount_sum,
      IFF(ROW_NUMBER() OVER (
          PARTITION BY rate_plan_charge_number, rate_plan_charge_segment
          ORDER BY rate_plan_charge_version DESC, service_start_date DESC) = 1,
          TRUE, FALSE
      )                                 AS is_last_segment_version
    FROM base_charges
    INNER JOIN invoice_charges
      ON base_charges.charge_id = invoice_charges.charge_id
    LEFT JOIN zuora_revenue_bill
      ON invoice_charges.invoice_item_id = zuora_revenue_bill.invoice_item_id

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@mcooperDD",
    updated_by="@michellecooper",
    created_date="2021-01-15",
    updated_date="2021-06-21"
) }}1a:T1834,WITH map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM "PREP".zuora.zuora_invoice_source
    WHERE is_deleted = FALSE

), zuora_invoice_item AS (

    SELECT *
    FROM  "PREP".zuora.zuora_invoice_item_source
    WHERE is_deleted = FALSE

), zuora_rate_plan AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source
    WHERE is_deleted = FALSE

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source
    WHERE is_deleted = FALSE

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), zuora_revenue_bill AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_bill_source

), base_charges AS (

    SELECT
      zuora_account.account_id                                                  AS billing_account_id_subscription,
      map_merged_crm_account.dim_crm_account_id                                 AS crm_account_id_subscription,
      zuora_subscription.subscription_id,
      zuora_rate_plan_charge.rate_plan_charge_id                                AS charge_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.segment                                            AS rate_plan_charge_segment,
      zuora_rate_plan_charge.version                                            AS rate_plan_charge_version,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.mrr*12                                             AS arr,
      zuora_rate_plan_charge.quantity,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_start_date::DATE)     AS effective_start_month,
      DATE_TRUNC('month',zuora_rate_plan_charge.effective_end_date::DATE)       AS effective_end_month
    FROM zuora_account
    INNER JOIN zuora_subscription
      ON zuora_account.account_id = zuora_subscription.account_id
    INNER JOIN zuora_rate_plan
      ON zuora_subscription.subscription_id = zuora_rate_plan.subscription_id
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id

), invoice_charges AS (

    SELECT
      zuora_invoice_item.invoice_item_id                AS invoice_item_id,
      zuora_invoice.invoice_id                          AS invoice_id,
      zuora_invoice.invoice_number,
      zuora_invoice.invoice_date::DATE                  AS invoice_date,
      zuora_invoice_item.service_start_date::DATE       AS service_start_date,
      zuora_invoice_item.service_end_date::DATE         AS service_end_date,
      zuora_invoice.account_id                          AS billing_account_id_invoice,
      map_merged_crm_account.dim_crm_account_id         AS crm_account_id_invoice,
      zuora_invoice_item.rate_plan_charge_id            AS charge_id,
      zuora_invoice_item.product_rate_plan_charge_id    AS product_details_id,
      zuora_invoice_item.sku                            AS sku,
      zuora_invoice_item.tax_amount                     AS tax_amount_sum,
      zuora_invoice.amount_without_tax                  AS invoice_amount_without_tax,
      zuora_invoice_item.charge_amount                  AS invoice_item_charge_amount,
      zuora_invoice_item.unit_price                     AS invoice_item_unit_price
    FROM zuora_invoice_item
    INNER JOIN zuora_invoice
      ON zuora_invoice_item.invoice_id = zuora_invoice.invoice_id
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE zuora_invoice.status='Posted'

), final AS (

    SELECT
      invoice_charges.invoice_item_id,
      invoice_charges.invoice_id                    AS dim_invoice_id,
      base_charges.billing_account_id_subscription  AS dim_billing_account_id_subscription,
      base_charges.crm_account_id_subscription      AS dim_crm_account_id_subscription,
      invoice_charges.billing_account_id_invoice    AS dim_billing_account_id_invoice,
      invoice_charges.crm_account_id_invoice        AS dim_crm_account_id_invoice,
      base_charges.subscription_id                  AS dim_subscription_id,
      zuora_revenue_bill.revenue_contract_line_id   AS dim_revenue_contract_line_id,
      invoice_charges.charge_id,
      invoice_charges.product_details_id            AS dim_product_detail_id,
      invoice_charges.invoice_number,
      invoice_charges.invoice_date,
      invoice_charges.service_start_date,
      invoice_charges.service_end_date,
      base_charges.effective_start_month,
      base_charges.effective_end_month,
      base_charges.quantity,
      base_charges.mrr,
      base_charges.arr,
      invoice_charges.invoice_item_charge_amount,
      invoice_charges.invoice_item_unit_price,
      invoice_charges.invoice_amount_without_tax,
      invoice_charges.tax_amount_sum,
      IFF(ROW_NUMBER() OVER (
          PARTITION BY rate_plan_charge_number, rate_plan_charge_segment
          ORDER BY rate_plan_charge_version DESC, service_start_date DESC) = 1,
          TRUE, FALSE
      )                                 AS is_last_segment_version
    FROM base_charges
    INNER JOIN invoice_charges
      ON base_charges.charge_id = invoice_charges.charge_id
    LEFT JOIN zuora_revenue_bill
      ON invoice_charges.invoice_item_id = zuora_revenue_bill.invoice_item_id

)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-15'::DATE        AS model_created_date,
      '2021-06-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1b:T13e5,{{ config({
        "tags": ["mnpi_exception"],
    })
}}

{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_contact','zuora_contact_source'),
    ('zuora_payment_method', 'zuora_payment_method_source'),
    ('customers_billing_account','customers_db_billing_accounts_source')
]) }}

, zuora_account AS (

    SELECT *
    FROM {{ref('zuora_account_source')}}
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_billing_account AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account.account_number                          AS billing_account_number,
      zuora_account.account_name                            AS billing_account_name,
      zuora_account.status                                  AS account_status,
      zuora_account.parent_id,
      zuora_account.sfdc_account_code,
      zuora_account.sfdc_entity,
      zuora_account.currency                                AS account_currency,
      zuora_contact.country                                 AS sold_to_country,
      zuora_account.ssp_channel,
      CASE
        WHEN zuora_account.po_required = '' THEN 'NO'
        WHEN zuora_account.po_required IS NULL THEN 'NO'
        ELSE zuora_account.po_required
      END                                                   AS po_required,
      zuora_account.auto_pay,
      zuora_payment_method.payment_method_type              AS default_payment_method_type,
      zuora_account.is_deleted,
      zuora_account.batch,
      'Y' as exists_in_zuora
    FROM zuora_account
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_account.sold_to_contact_id, zuora_account.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN zuora_payment_method
      ON zuora_account.default_payment_method_id = zuora_payment_method.payment_method_id

), cdot_billing_account AS (

    SELECT 
      billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account_id,
      zuora_account_name,
      customers_billing_account.sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      'Y' as exists_in_cdot
    FROM customers_billing_account
    LEFT JOIN map_merged_crm_account
      ON customers_billing_account.sfdc_account_id = map_merged_crm_account.sfdc_account_id
    --Exclude Batch20(test records) from CDot by using Zuora test account IDs.
    WHERE zuora_account_id NOT IN 
      (SELECT DISTINCT 
        account_id 
       FROM {{ref('zuora_account_source')}}
       WHERE LOWER(batch) = 'batch20'
       OR is_deleted = TRUE)

), final AS (

    SELECT 
      --surrogate key
      {{ dbt_utils.surrogate_key(['COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id)']) }}  AS dim_billing_account_sk,

      --natural key
      COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id)                                     AS dim_billing_account_id,

      --foreign key
      COALESCE(zuora_billing_account.dim_crm_account_id, cdot_billing_account.dim_crm_account_id)                                       AS dim_crm_account_id,

      --other relevant attributes
      zuora_billing_account.billing_account_number,
      COALESCE(zuora_billing_account.billing_account_name, cdot_billing_account.zuora_account_name)                                     AS billing_account_name,
      zuora_billing_account.account_status,
      zuora_billing_account.parent_id,
      zuora_billing_account.sfdc_account_code,
      zuora_billing_account.sfdc_entity,
      zuora_billing_account.account_currency,
      zuora_billing_account.sold_to_country,
      zuora_billing_account.ssp_channel,
      zuora_billing_account.po_required,
      zuora_billing_account.auto_pay,
      zuora_billing_account.default_payment_method_type,
      zuora_billing_account.is_deleted,
      zuora_billing_account.batch,
      CASE 
            WHEN exists_in_zuora = 'Y' and exists_in_cdot = 'Y' THEN 'exists in CDot & Zuora'
            WHEN exists_in_zuora = 'Y' and exists_in_cdot IS NULL THEN 'exists only in Zuora'
            WHEN exists_in_zuora IS NULL and exists_in_cdot = 'Y' THEN 'exists only in CDot'
            ELSE NULL 
      END                                                                                                                               AS record_data_source
      FROM zuora_billing_account 
    FULL JOIN cdot_billing_account 
      ON zuora_billing_account.dim_billing_account_id = cdot_billing_account.zuora_account_id
) 


{{ dbt_audit(
    cte_ref="final",
    created_by="@snalamaru",
    updated_by="@snalamaru",
    created_date="2023-04-24",
    updated_date="2023-06-14"
) }}1c:T1558,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_contact AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), zuora_payment_method AS (

    SELECT * 
    FROM "PREP".zuora.zuora_payment_method_source

), customers_billing_account AS (

    SELECT * 
    FROM "PREP".customers.customers_db_billing_accounts_source

)

, zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
    WHERE LOWER(batch) != 'batch20'
      AND is_deleted = FALSE

), zuora_billing_account AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account.account_number                          AS billing_account_number,
      zuora_account.account_name                            AS billing_account_name,
      zuora_account.status                                  AS account_status,
      zuora_account.parent_id,
      zuora_account.sfdc_account_code,
      zuora_account.sfdc_entity,
      zuora_account.currency                                AS account_currency,
      zuora_contact.country                                 AS sold_to_country,
      zuora_account.ssp_channel,
      CASE
        WHEN zuora_account.po_required = '' THEN 'NO'
        WHEN zuora_account.po_required IS NULL THEN 'NO'
        ELSE zuora_account.po_required
      END                                                   AS po_required,
      zuora_account.auto_pay,
      zuora_payment_method.payment_method_type              AS default_payment_method_type,
      zuora_account.is_deleted,
      zuora_account.batch,
      'Y' as exists_in_zuora
    FROM zuora_account
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_account.sold_to_contact_id, zuora_account.bill_to_contact_id) = zuora_contact.contact_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN zuora_payment_method
      ON zuora_account.default_payment_method_id = zuora_payment_method.payment_method_id

), cdot_billing_account AS (

    SELECT 
      billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id,
      zuora_account_id,
      zuora_account_name,
      customers_billing_account.sfdc_account_id,
      billing_account_created_at,
      billing_account_updated_at,
      'Y' as exists_in_cdot
    FROM customers_billing_account
    LEFT JOIN map_merged_crm_account
      ON customers_billing_account.sfdc_account_id = map_merged_crm_account.sfdc_account_id
    --Exclude Batch20(test records) from CDot by using Zuora test account IDs.
    WHERE zuora_account_id NOT IN 
      (SELECT DISTINCT 
        account_id 
       FROM "PREP".zuora.zuora_account_source
       WHERE LOWER(batch) = 'batch20'
       OR is_deleted = TRUE)

), final AS (

    SELECT 
      --surrogate key
      md5(cast(coalesce(cast(COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id) as 
    varchar
), '') as 
    varchar
))  AS dim_billing_account_sk,

      --natural key
      COALESCE(zuora_billing_account.dim_billing_account_id, cdot_billing_account.zuora_account_id)                                     AS dim_billing_account_id,

      --foreign key
      COALESCE(zuora_billing_account.dim_crm_account_id, cdot_billing_account.dim_crm_account_id)                                       AS dim_crm_account_id,

      --other relevant attributes
      zuora_billing_account.billing_account_number,
      COALESCE(zuora_billing_account.billing_account_name, cdot_billing_account.zuora_account_name)                                     AS billing_account_name,
      zuora_billing_account.account_status,
      zuora_billing_account.parent_id,
      zuora_billing_account.sfdc_account_code,
      zuora_billing_account.sfdc_entity,
      zuora_billing_account.account_currency,
      zuora_billing_account.sold_to_country,
      zuora_billing_account.ssp_channel,
      zuora_billing_account.po_required,
      zuora_billing_account.auto_pay,
      zuora_billing_account.default_payment_method_type,
      zuora_billing_account.is_deleted,
      zuora_billing_account.batch,
      CASE 
            WHEN exists_in_zuora = 'Y' and exists_in_cdot = 'Y' THEN 'exists in CDot & Zuora'
            WHEN exists_in_zuora = 'Y' and exists_in_cdot IS NULL THEN 'exists only in Zuora'
            WHEN exists_in_zuora IS NULL and exists_in_cdot = 'Y' THEN 'exists only in CDot'
            ELSE NULL 
      END                                                                                                                               AS record_data_source
      FROM zuora_billing_account 
    FULL JOIN cdot_billing_account 
      ON zuora_billing_account.dim_billing_account_id = cdot_billing_account.zuora_account_id
) 


SELECT
      *,
      '@snalamaru'::VARCHAR       AS created_by,
      '@snalamaru'::VARCHAR       AS updated_by,
      '2023-04-24'::DATE        AS model_created_date,
      '2023-06-14'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1d:T2abd,WITH lines_source AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_line_source') }}

), pob AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_performance_obligation_source') }}

), dim_date AS (

    SELECT *
    FROM {{ ref('date_details_source') }}

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}

), prep_quote AS (

    SELECT *
    FROM {{ ref('prep_quote') }}

), final AS (

    SELECT 

      -- ids
      lines_source.revenue_contract_line_id                                             AS dim_revenue_contract_line_id,
      lines_source.revenue_contract_id                                                  AS dim_revenue_contract_id,
      lines_source.revenue_contract_batch_id,

      -- pob ids
      lines_source.revenue_contract_performance_obligation_id                           AS dim_revenue_contract_performance_obligation_id,
      pob.event_id  											                        AS dim_accounting_event_id_performance_obligation,

      -- account ids
      lines_source.billing_account_id 							                        AS dim_billing_account_id,
      zuora_account.crm_id 										                        AS dim_crm_account_id,

      -- order ids
      lines_source.sales_order_number,
      lines_source.sales_order_line_id,
      lines_source.sales_order_line_number,

      -- subscription ids
      lines_source.subscription_id 								                        AS dim_subscription_id,
      lines_source.amendment_id  								                        AS dim_amendment_id,


      -- purchase order ids
      lines_source.purchase_order_number,
      prep_quote.dim_quote_id,

      -- contract ids
      lines_source.contract_number,
      lines_source.contract_line_number,
      lines_source.contract_line_id,

      -- order ids
      lines_source.order_id,
      lines_source.order_item_id,
      lines_source.order_action_id,


      -- product ids
      lines_source.product_id,
      lines_source.rate_plan_id,
      lines_source.rate_plan_charge_id,
      lines_source.original_rate_plan_charge_id,
      lines_source.product_rate_plan_id,
      lines_source.product_rate_plan_charge_id 					                        AS dim_product_detail_id,
      lines_source.revenue_contract_bill_item_id				                        AS dim_invoice_item_id,
      lines_source.zbilling_batch_id,
      lines_source.ramp_deal_id,
      lines_source.k2_batch_id,
      lines_source.ramp_id,

      -- miscellaneous ids
      lines_source.set_of_books_id,
      lines_source.bundle_configuration_id,
      lines_source.variable_consideration_type_id,
      lines_source.bundle_parent_id,
      lines_source.fair_value_group_id,
      lines_source.fair_value_template_id,
      lines_source.material_rights_line_id,
      lines_source.reference_document_line_id,
      lines_source.split_reference_document_line_id,

      -- dates
      {{ get_date_id('lines_source.sales_order_book_date') }}                           AS sales_order_book_date_id,
      {{ get_date_id('lines_source.revenue_start_date') }}                              AS revenue_start_date_id,
      {{ get_date_id('lines_source.revenue_end_date') }}                                AS revenue_end_date_id,
      {{ get_date_id('lines_source.scheduled_ship_date') }}                             AS scheduled_ship_date_id,
      {{ get_date_id('lines_source.ship_date') }}                                       AS ship_date_id,
      {{ get_date_id('lines_source.contract_modification_date') }}                      AS contract_modification_date_id,
      {{ get_date_id('lines_source.contract_date') }}                                   AS contract_date_id,
      {{ get_date_id('lines_source.fair_value_date') }}                                 AS fair_value_date_id,
      {{ get_date_id('lines_source.original_fair_value_date') }}                        AS original_fair_value_date_id,
      {{ get_date_id('lines_source.fair_value_expiration') }}                           AS fair_value_expiration_id,
      {{ get_date_id('lines_source.forecast_date') }}                                   AS forecast_date_id,
      {{ get_date_id('lines_source.unbilled_reversal_period') }}                        AS unbilled_reversal_period_date_id,
      {{ get_date_id('lines_source.deferred_period_id') }}                              AS deferred_period_date_id,
      {{ get_date_id('pob.revenue_contract_performance_obligation_created_date') }}     AS revenue_contract_performance_obligation_created_date_id,
      {{ get_date_id('pob.revenue_contract_performance_obligation_updated_date') }}     AS revenue_contract_performance_obligation_updated_date_id,

      -- attributes
      pob.revenue_contract_performance_obligation_name,
      lines_source.revenue_contract_line_term,
      lines_source.revenue_amortization_duration,
      lines_source.product_life_term,
      lines_source.link_identifier,
      lines_source.ramp_identifier,

      -- price details
      lines_source.unit_sell_price,
      lines_source.ssp_sell_price,
      lines_source.old_sell_price,
      lines_source.net_sell_price,
      lines_source.extended_selling_price,
      lines_source.list_price,
      lines_source.unit_list_price,
      lines_source.ssp_list_price,
      lines_source.net_list_price,
      lines_source.fair_value_price,
      lines_source.previous_fair_value,
      lines_source.extended_fair_value_price,
      lines_source.allocatable_price,
      lines_source.allocatable_functional_price,
      lines_source.allocated_price,
      lines_source.below_fair_value_price,
      lines_source.above_fair_value_price,
      
      
      -- amounts
      lines_source.deferred_amount,
      lines_source.recognized_amount,
      lines_source.billed_deferred_amount,
      lines_source.billed_recognized_amount,
      lines_source.pord_deferred_amount,
      lines_source.pord_recognized_amount,
      lines_source.carve_amount,
      lines_source.carve_amount_imprtmt,
      lines_source.cumulative_carve_amount,
      lines_source.discount_amount,
      lines_source.cumulative_allocated_amount,
      lines_source.varaiable_consideration_amount,
      lines_source.impairment_retrieve_amount,
      lines_source.overstated_amount,
      lines_source.overstated_list_price_amount,
      lines_source.ramp_carve_amount,
      lines_source.ramp_cumulative_carve_amount,
      lines_source.ramp_cumulative_allocated_amount,
      lines_source.unscheduled_adjustment,

      -- quantities
      lines_source.order_quantity,
      lines_source.invoice_quantity,
      lines_source.return_quantity,
      lines_source.original_quantity,
      
      -- exchange rates
      lines_source.functional_currency_exchage_rate,
      lines_source.reporting_currency_exchange_rate,

      -- percents
      lines_source.discount_percent,
      lines_source.fair_value_percent,
      lines_source.posted_percent,
      lines_source.released_percent,
      lines_source.transaction_price_ssp_percent,
      lines_source.material_rights_org_percent,
      lines_source.ramp_allocation_percent,
      lines_source.ramp_allocatable_percent,
      lines_source.ramp_allocted_percent,
      lines_source.total_budget_hours,
      lines_source.total_budget_cost,

      -- flags
      lines_source.is_carve_eligible,
      lines_source.is_return,
      lines_source.is_within_fair_value_range,
      lines_source.is_stated,
      lines_source.is_standalone,
      lines_source.is_discount_adjustment,
      lines_source.is_fair_value_eligible,
      lines_source.is_manual_fair_value,
      lines_source.is_unbilled,
      lines_source.is_manual_created,
      lines_source.is_variable_consideration_clearing,
      lines_source.is_manual_journal_entry_line,
      lines_source.is_update_or_insert,
      lines_source.is_cancelled,
      lines_source.is_allocation_recognition_hold,
      lines_source.is_allocation_schedule_hold,
      lines_source.is_allocation_treatment,
      lines_source.is_contra_entry,
      lines_source.is_conv_waterfall,
      lines_source.is_reclass,
      lines_source.is_revenue_recognition_hold,
      lines_source.is_revenue_schedule_hold,
      lines_source.is_revevnue_schedule,
      lines_source.is_transfer_hold,
      lines_source.is_allocation_delink,
      lines_source.is_canceled_by_reduction_order,
      lines_source.is_level_2_carve_eligible,
      lines_source.is_rssp_failed,
      lines_source.is_variable_consideration_eligible,
      lines_source.is_ghost_line,
      lines_source.is_initial_contract,
      lines_source.is_material_rights,
      lines_source.is_ramp_up,
      lines_source.is_split,
      lines_source.is_ord_orch,
      lines_source.is_new_performance_obligation,
      lines_source.full_cm_flag,
      lines_source.is_skip_contract_modification,
      lines_source.is_impairment_exception,
      lines_source.is_pros_deferred,
      lines_source.is_manual_sales_order,
      lines_source.is_zero_dollar_recognition,
      lines_source.is_full_pord_discount,
      lines_source.is_zero_dollar_reduction_order,
      lines_source.is_restricted_sales_order_value_update,
      lines_source.is_zbilling_complete,
      lines_source.is_zbilling_unscheduled_adjustment,
      lines_source.is_zbillling_cancelled_line,
      lines_source.is_non_distinct_performance_obligation,
      lines_source.is_zbilling_contract_modification_rule,
      lines_source.is_system_inv_exist,
      lines_source.is_zbillling_manual_sales_order,
      lines_source.is_sales_order_term_change,
      lines_source.is_overage_exists,
      lines_source.is_zbilling_ramp,
      lines_source.is_updated_by_reduction_order,
      lines_source.is_unbilled_evergreen,
      lines_source.is_ramp_carve,
      lines_source.is_zero_f,
      lines_source.is_pros_decrse_p,

      --metadata
      lines_source.security_attribute_value,
      {{ get_date_id('lines_source.revenue_contract_line_created_date') }}                      AS revenue_contract_line_created_date_id,
      {{ get_date_id('lines_source.revenue_contract_line_updated_date') }}                      AS revenue_contract_line_updated_date_id,
      {{ get_date_id('lines_source.incremental_update_date') }}                                 AS incremental_update_date_id,
      pob.revenue_contract_performance_obligation_created_by,
      pob.revenue_contract_performance_obligation_updated_by

    FROM lines_source
    LEFT JOIN pob 
      ON lines_source.revenue_contract_performance_obligation_id = pob.revenue_contract_performance_obligation_id
    LEFT JOIN zuora_account 
      ON lines_source.billing_account_id = zuora_account.account_id
    LEFT JOIN prep_quote
      ON lines_source.quote_number = prep_quote.quote_number

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2021-06-21",
    updated_date="2021-06-21",
 	) 
 }}1e:T2e20,WITH lines_source AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source

), pob AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_performance_obligation_source

), dim_date AS (

    SELECT *
    FROM "PREP".date.date_details_source

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), prep_quote AS (

    SELECT *
    FROM "PROD".restricted_safe_common_prep.prep_quote

), final AS (

    SELECT 

      -- ids
      lines_source.revenue_contract_line_id                                             AS dim_revenue_contract_line_id,
      lines_source.revenue_contract_id                                                  AS dim_revenue_contract_id,
      lines_source.revenue_contract_batch_id,

      -- pob ids
      lines_source.revenue_contract_performance_obligation_id                           AS dim_revenue_contract_performance_obligation_id,
      pob.event_id  											                        AS dim_accounting_event_id_performance_obligation,

      -- account ids
      lines_source.billing_account_id 							                        AS dim_billing_account_id,
      zuora_account.crm_id 										                        AS dim_crm_account_id,

      -- order ids
      lines_source.sales_order_number,
      lines_source.sales_order_line_id,
      lines_source.sales_order_line_number,

      -- subscription ids
      lines_source.subscription_id 								                        AS dim_subscription_id,
      lines_source.amendment_id  								                        AS dim_amendment_id,


      -- purchase order ids
      lines_source.purchase_order_number,
      prep_quote.dim_quote_id,

      -- contract ids
      lines_source.contract_number,
      lines_source.contract_line_number,
      lines_source.contract_line_id,

      -- order ids
      lines_source.order_id,
      lines_source.order_item_id,
      lines_source.order_action_id,


      -- product ids
      lines_source.product_id,
      lines_source.rate_plan_id,
      lines_source.rate_plan_charge_id,
      lines_source.original_rate_plan_charge_id,
      lines_source.product_rate_plan_id,
      lines_source.product_rate_plan_charge_id 					                        AS dim_product_detail_id,
      lines_source.revenue_contract_bill_item_id				                        AS dim_invoice_item_id,
      lines_source.zbilling_batch_id,
      lines_source.ramp_deal_id,
      lines_source.k2_batch_id,
      lines_source.ramp_id,

      -- miscellaneous ids
      lines_source.set_of_books_id,
      lines_source.bundle_configuration_id,
      lines_source.variable_consideration_type_id,
      lines_source.bundle_parent_id,
      lines_source.fair_value_group_id,
      lines_source.fair_value_template_id,
      lines_source.material_rights_line_id,
      lines_source.reference_document_line_id,
      lines_source.split_reference_document_line_id,

      -- dates
      

  TO_NUMBER(TO_CHAR(lines_source.sales_order_book_date::DATE,'YYYYMMDD'),'99999999')

                           AS sales_order_book_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.revenue_start_date::DATE,'YYYYMMDD'),'99999999')

                              AS revenue_start_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.revenue_end_date::DATE,'YYYYMMDD'),'99999999')

                                AS revenue_end_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.scheduled_ship_date::DATE,'YYYYMMDD'),'99999999')

                             AS scheduled_ship_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.ship_date::DATE,'YYYYMMDD'),'99999999')

                                       AS ship_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.contract_modification_date::DATE,'YYYYMMDD'),'99999999')

                      AS contract_modification_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.contract_date::DATE,'YYYYMMDD'),'99999999')

                                   AS contract_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.fair_value_date::DATE,'YYYYMMDD'),'99999999')

                                 AS fair_value_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.original_fair_value_date::DATE,'YYYYMMDD'),'99999999')

                        AS original_fair_value_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.fair_value_expiration::DATE,'YYYYMMDD'),'99999999')

                           AS fair_value_expiration_id,
      

  TO_NUMBER(TO_CHAR(lines_source.forecast_date::DATE,'YYYYMMDD'),'99999999')

                                   AS forecast_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.unbilled_reversal_period::DATE,'YYYYMMDD'),'99999999')

                        AS unbilled_reversal_period_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.deferred_period_id::DATE,'YYYYMMDD'),'99999999')

                              AS deferred_period_date_id,
      

  TO_NUMBER(TO_CHAR(pob.revenue_contract_performance_obligation_created_date::DATE,'YYYYMMDD'),'99999999')

     AS revenue_contract_performance_obligation_created_date_id,
      

  TO_NUMBER(TO_CHAR(pob.revenue_contract_performance_obligation_updated_date::DATE,'YYYYMMDD'),'99999999')

     AS revenue_contract_performance_obligation_updated_date_id,

      -- attributes
      pob.revenue_contract_performance_obligation_name,
      lines_source.revenue_contract_line_term,
      lines_source.revenue_amortization_duration,
      lines_source.product_life_term,
      lines_source.link_identifier,
      lines_source.ramp_identifier,

      -- price details
      lines_source.unit_sell_price,
      lines_source.ssp_sell_price,
      lines_source.old_sell_price,
      lines_source.net_sell_price,
      lines_source.extended_selling_price,
      lines_source.list_price,
      lines_source.unit_list_price,
      lines_source.ssp_list_price,
      lines_source.net_list_price,
      lines_source.fair_value_price,
      lines_source.previous_fair_value,
      lines_source.extended_fair_value_price,
      lines_source.allocatable_price,
      lines_source.allocatable_functional_price,
      lines_source.allocated_price,
      lines_source.below_fair_value_price,
      lines_source.above_fair_value_price,
      
      
      -- amounts
      lines_source.deferred_amount,
      lines_source.recognized_amount,
      lines_source.billed_deferred_amount,
      lines_source.billed_recognized_amount,
      lines_source.pord_deferred_amount,
      lines_source.pord_recognized_amount,
      lines_source.carve_amount,
      lines_source.carve_amount_imprtmt,
      lines_source.cumulative_carve_amount,
      lines_source.discount_amount,
      lines_source.cumulative_allocated_amount,
      lines_source.varaiable_consideration_amount,
      lines_source.impairment_retrieve_amount,
      lines_source.overstated_amount,
      lines_source.overstated_list_price_amount,
      lines_source.ramp_carve_amount,
      lines_source.ramp_cumulative_carve_amount,
      lines_source.ramp_cumulative_allocated_amount,
      lines_source.unscheduled_adjustment,

      -- quantities
      lines_source.order_quantity,
      lines_source.invoice_quantity,
      lines_source.return_quantity,
      lines_source.original_quantity,
      
      -- exchange rates
      lines_source.functional_currency_exchage_rate,
      lines_source.reporting_currency_exchange_rate,

      -- percents
      lines_source.discount_percent,
      lines_source.fair_value_percent,
      lines_source.posted_percent,
      lines_source.released_percent,
      lines_source.transaction_price_ssp_percent,
      lines_source.material_rights_org_percent,
      lines_source.ramp_allocation_percent,
      lines_source.ramp_allocatable_percent,
      lines_source.ramp_allocted_percent,
      lines_source.total_budget_hours,
      lines_source.total_budget_cost,

      -- flags
      lines_source.is_carve_eligible,
      lines_source.is_return,
      lines_source.is_within_fair_value_range,
      lines_source.is_stated,
      lines_source.is_standalone,
      lines_source.is_discount_adjustment,
      lines_source.is_fair_value_eligible,
      lines_source.is_manual_fair_value,
      lines_source.is_unbilled,
      lines_source.is_manual_created,
      lines_source.is_variable_consideration_clearing,
      lines_source.is_manual_journal_entry_line,
      lines_source.is_update_or_insert,
      lines_source.is_cancelled,
      lines_source.is_allocation_recognition_hold,
      lines_source.is_allocation_schedule_hold,
      lines_source.is_allocation_treatment,
      lines_source.is_contra_entry,
      lines_source.is_conv_waterfall,
      lines_source.is_reclass,
      lines_source.is_revenue_recognition_hold,
      lines_source.is_revenue_schedule_hold,
      lines_source.is_revevnue_schedule,
      lines_source.is_transfer_hold,
      lines_source.is_allocation_delink,
      lines_source.is_canceled_by_reduction_order,
      lines_source.is_level_2_carve_eligible,
      lines_source.is_rssp_failed,
      lines_source.is_variable_consideration_eligible,
      lines_source.is_ghost_line,
      lines_source.is_initial_contract,
      lines_source.is_material_rights,
      lines_source.is_ramp_up,
      lines_source.is_split,
      lines_source.is_ord_orch,
      lines_source.is_new_performance_obligation,
      lines_source.full_cm_flag,
      lines_source.is_skip_contract_modification,
      lines_source.is_impairment_exception,
      lines_source.is_pros_deferred,
      lines_source.is_manual_sales_order,
      lines_source.is_zero_dollar_recognition,
      lines_source.is_full_pord_discount,
      lines_source.is_zero_dollar_reduction_order,
      lines_source.is_restricted_sales_order_value_update,
      lines_source.is_zbilling_complete,
      lines_source.is_zbilling_unscheduled_adjustment,
      lines_source.is_zbillling_cancelled_line,
      lines_source.is_non_distinct_performance_obligation,
      lines_source.is_zbilling_contract_modification_rule,
      lines_source.is_system_inv_exist,
      lines_source.is_zbillling_manual_sales_order,
      lines_source.is_sales_order_term_change,
      lines_source.is_overage_exists,
      lines_source.is_zbilling_ramp,
      lines_source.is_updated_by_reduction_order,
      lines_source.is_unbilled_evergreen,
      lines_source.is_ramp_carve,
      lines_source.is_zero_f,
      lines_source.is_pros_decrse_p,

      --metadata
      lines_source.security_attribute_value,
      

  TO_NUMBER(TO_CHAR(lines_source.revenue_contract_line_created_date::DATE,'YYYYMMDD'),'99999999')

                      AS revenue_contract_line_created_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.revenue_contract_line_updated_date::DATE,'YYYYMMDD'),'99999999')

                      AS revenue_contract_line_updated_date_id,
      

  TO_NUMBER(TO_CHAR(lines_source.incremental_update_date::DATE,'YYYYMMDD'),'99999999')

                                 AS incremental_update_date_id,
      pob.revenue_contract_performance_obligation_created_by,
      pob.revenue_contract_performance_obligation_updated_by

    FROM lines_source
    LEFT JOIN pob 
      ON lines_source.revenue_contract_performance_obligation_id = pob.revenue_contract_performance_obligation_id
    LEFT JOIN zuora_account 
      ON lines_source.billing_account_id = zuora_account.account_id
    LEFT JOIN prep_quote
      ON lines_source.quote_number = prep_quote.quote_number

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-06-21'::DATE        AS model_created_date,
      '2021-06-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final1f:T3303,WITH map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), sfdc_account AS (

    SELECT *
    FROM {{ ref('sfdc_account_source') }}
    WHERE account_id IS NOT NULL

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM {{ ref('zuora_revenue_revenue_contract_line_source') }}
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM {{ ref('zuora_revenue_manual_journal_entry_source') }}

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    {{ dbt_utils.group_by(n=1) }}

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    {{ dbt_utils.group_by(n=7) }}

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      adjustment,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      {{ get_date_id('manual_charges_prep.effective_start_date') }}                         AS effective_start_date_id,
      {{ get_date_id('manual_charges_prep.effective_end_date') }}                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      adjustment,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

)

{{ dbt_audit(
    cte_ref="manual_charges",
    created_by="@michellecooper",
    updated_by="@lisvinueza",
    created_date="2021-10-28",
    updated_date="2023-05-21",
) }}20:T3443,WITH map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source
    WHERE account_id IS NOT NULL

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')

), revenue_contract_line AS (

    SELECT *
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM "PREP".zuora_revenue.zuora_revenue_manual_journal_entry_source

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    group by 1

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    group by 1,2,3,4,5,6,7

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      adjustment,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_start_date::DATE,'YYYYMMDD'),'99999999')

                         AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_end_date::DATE,'YYYYMMDD'),'99999999')

                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      adjustment,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                         AS estimated_total_future_billings
    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-10-28'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM manual_charges21:T950,{{ simple_cte([
    ('map_merged_crm_account','map_merged_crm_account'),
    ('zuora_account_source', 'zuora_account_source'),
    ('zuora_contact_source', 'zuora_contact_source'),
    ('zuora_query_api_users_source', 'zuora_query_api_users_source')
]) }}

, zuora_account AS (

    SELECT zuora_account_source.*
    FROM zuora_account_source
    LEFT JOIN zuora_contact_source AS bill_to_contact
      ON zuora_account_source.bill_to_contact_id = bill_to_contact.contact_id
    LEFT JOIN zuora_contact_source AS sold_to_contact
      ON sold_to_contact_id = sold_to_contact.contact_id
    LEFT JOIN zuora_query_api_users_source
      ON zuora_account_source.updated_by_id = zuora_query_api_users_source.zuora_user_id
    WHERE -- filters to remove known data quality issues based on feedback from Enterprise Apps
      LOWER(zuora_account_source.batch) != 'batch20'
      AND zuora_account_source.is_deleted = FALSE
      AND zuora_account_source.status != 'Canceled'
      AND (LOWER(bill_to_contact.work_email) NOT LIKE '%@gitlab.com%' AND LOWER(sold_to_contact.work_email) NOT LIKE '%@gitlab.com%')
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) IS NOT NULL
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) != '' -- sometimes these values look null, but are actually blank spaces
      AND zuora_query_api_users_source.email != 'svc_zuora_fulfillment_int@gitlab.com'

), final AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id_merged,
      zuora_account.crm_id                                  AS dim_crm_account_id_zuora,
      zuora_account.account_number                          AS billing_account_number
    FROM zuora_account
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE dim_crm_account_id_merged != dim_crm_account_id_zuora
      OR dim_crm_account_id_zuora IS NULL
      OR dim_crm_account_id_merged IS NULL

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2022-10-07",
    updated_date="2023-05-01"
) }}22:Tade,

WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), zuora_contact_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_contact_source

), zuora_query_api_users_source AS (

    SELECT * 
    FROM "PREP".zuora_query_api.zuora_query_api_users_source

)

, zuora_account AS (

    SELECT zuora_account_source.*
    FROM zuora_account_source
    LEFT JOIN zuora_contact_source AS bill_to_contact
      ON zuora_account_source.bill_to_contact_id = bill_to_contact.contact_id
    LEFT JOIN zuora_contact_source AS sold_to_contact
      ON sold_to_contact_id = sold_to_contact.contact_id
    LEFT JOIN zuora_query_api_users_source
      ON zuora_account_source.updated_by_id = zuora_query_api_users_source.zuora_user_id
    WHERE -- filters to remove known data quality issues based on feedback from Enterprise Apps
      LOWER(zuora_account_source.batch) != 'batch20'
      AND zuora_account_source.is_deleted = FALSE
      AND zuora_account_source.status != 'Canceled'
      AND (LOWER(bill_to_contact.work_email) NOT LIKE '%@gitlab.com%' AND LOWER(sold_to_contact.work_email) NOT LIKE '%@gitlab.com%')
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) IS NOT NULL
      AND COALESCE(bill_to_contact.work_email, bill_to_contact.personal_email, sold_to_contact.work_email, sold_to_contact.personal_email) != '' -- sometimes these values look null, but are actually blank spaces
      AND zuora_query_api_users_source.email != 'svc_zuora_fulfillment_int@gitlab.com'

), final AS (

    SELECT
      zuora_account.account_id                              AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id             AS dim_crm_account_id_merged,
      zuora_account.crm_id                                  AS dim_crm_account_id_zuora,
      zuora_account.account_number                          AS billing_account_number
    FROM zuora_account
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    WHERE dim_crm_account_id_merged != dim_crm_account_id_zuora
      OR dim_crm_account_id_zuora IS NULL
      OR dim_crm_account_id_merged IS NULL

)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2022-10-07'::DATE        AS model_created_date,
      '2023-05-01'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final23:T1d7a,{{ config(
    tags=["mnpi_exception"]
) }}

{{ simple_cte([
      ('map_merged_crm_account', 'map_merged_crm_account'),
      ('date_details', 'date_details'),
      ('zuora_account_source', 'zuora_account_source'),
      ('prep_billing_account_user', 'prep_billing_account_user'),
      ('sfdc_customer_subscription_source', 'sfdc_customer_subscription_source')

])}}

, zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

{{ dbt_audit(
    cte_ref="joined",
    created_by="@ischweickartDD",
    updated_by="@michellecooper",
    created_date="2021-01-07",
    updated_date="2023-04-12"
) }}24:T1f00,



WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), date_details AS (

    SELECT * 
    FROM "PROD".legacy.date_details

), zuora_account_source AS (

    SELECT * 
    FROM "PREP".zuora.zuora_account_source

), prep_billing_account_user AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_prep.prep_billing_account_user

), sfdc_customer_subscription_source AS (

    SELECT * 
    FROM "PREP".sfdc.sfdc_customer_subscription_source

)

, zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), joined AS (

    SELECT
      zuora_subscription.subscription_id                                        AS dim_subscription_id,
      map_merged_crm_account.dim_crm_account_id                                 AS dim_crm_account_id,
      zuora_account_source.account_id                                           AS dim_billing_account_id,
      zuora_subscription.invoice_owner_id                                       AS dim_billing_account_id_invoice_owner_account,
      zuora_subscription.creator_account_id                                     AS dim_billing_account_id_creator_account,
      zuora_subscription.sfdc_opportunity_id                                    AS dim_crm_opportunity_id,
      sfdc_customer_subscription_source.current_open_renewal_id                 AS dim_crm_opportunity_id_current_open_renewal,
      sfdc_customer_subscription_source.closed_lost_renewal_id                  AS dim_crm_opportunity_id_closed_lost_renewal,
      zuora_subscription.original_id                                            AS dim_subscription_id_original,
      zuora_subscription.previous_subscription_id                               AS dim_subscription_id_previous,
      zuora_subscription.amendment_id                                           AS dim_amendment_id_subscription,
      zuora_subscription.created_by_id,
      zuora_subscription.updated_by_id,
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.subscription_status,
      zuora_subscription.version                                                AS subscription_version,
      zuora_subscription.zuora_renewal_subscription_name,
      zuora_subscription.zuora_renewal_subscription_name_slugify,
      zuora_subscription.current_term,
      zuora_subscription.renewal_term,
      zuora_subscription.renewal_term_period_type,
      zuora_subscription.eoa_starter_bronze_offer_accepted,
      CASE 
        WHEN prep_billing_account_user.is_integration_user = 1
          THEN 'Self-Service'
        ELSE 'Sales-Assisted'
      END                                                                       AS subscription_sales_type,
      zuora_subscription.namespace_name,
      zuora_subscription.namespace_id,
      invoice_owner.account_name                                                AS invoice_owner_account,
      creator_account.account_name                                              AS creator_account,
      IFF(dim_billing_account_id_invoice_owner_account != dim_billing_account_id_creator_account, TRUE, FALSE)
                                                                                AS was_purchased_through_reseller,
      zuora_subscription.multi_year_deal_subscription_linkage                   AS multi_year_deal_subscription_linkage,

      --Date Information
      zuora_subscription.subscription_start_date                                AS subscription_start_date,
      zuora_subscription.subscription_end_date                                  AS subscription_end_date,
      DATE_TRUNC('month', zuora_subscription.subscription_start_date::DATE)     AS subscription_start_month,
      DATE_TRUNC('month', zuora_subscription.subscription_end_date::DATE)       AS subscription_end_month,
      date_details.fiscal_year                                                  AS subscription_end_fiscal_year,
      date_details.fiscal_quarter_name_fy                                       AS subscription_end_fiscal_quarter_name_fy,
      zuora_subscription.term_start_date::DATE                                  AS term_start_date,
      zuora_subscription.term_end_date::DATE                                    AS term_end_date,
      DATE_TRUNC('month', zuora_subscription.term_start_date::DATE)             AS term_start_month,
      DATE_TRUNC('month', zuora_subscription.term_end_date::DATE)               AS term_end_month,
      term_start_date.fiscal_year                                               AS term_start_fiscal_year,
      term_end_date.fiscal_year                                                 AS term_end_fiscal_year,
      CASE 
        WHEN term_start_date.fiscal_year = term_end_date.fiscal_year 
          THEN TRUE 
        ELSE FALSE 
      END                                                                       AS is_single_fiscal_year_term_subscription,
      CASE
        WHEN LOWER(zuora_subscription.subscription_status) = 'active' AND subscription_end_date > CURRENT_DATE
          THEN DATE_TRUNC('month',DATEADD('month', zuora_subscription.current_term, zuora_subscription.subscription_end_date::DATE))
        ELSE NULL
      END                                                                       AS second_active_renewal_month,
      zuora_subscription.cancelled_date,
      zuora_subscription.auto_renew_native_hist,
      zuora_subscription.auto_renew_customerdot_hist,
      zuora_subscription.turn_on_cloud_licensing,
      zuora_subscription.turn_on_operational_metrics,
      zuora_subscription.contract_operational_metrics,
      -- zuora_subscription.turn_on_usage_ping_required_metrics,
      NULL                                                                      AS turn_on_usage_ping_required_metrics, -- https://gitlab.com/gitlab-data/analytics/-/issues/10172
      zuora_subscription.contract_auto_renewal,
      zuora_subscription.turn_on_auto_renewal,
      zuora_subscription.contract_seat_reconciliation,
      zuora_subscription.turn_on_seat_reconciliation,
      zuora_subscription.created_date::DATE                                     AS subscription_created_date,
      zuora_subscription.updated_date::DATE                                     AS subscription_updated_date
    FROM zuora_subscription
    INNER JOIN zuora_account_source
      ON zuora_subscription.account_id = zuora_account_source.account_id
    LEFT JOIN zuora_account_source AS invoice_owner
      ON zuora_subscription.invoice_owner_id = invoice_owner.account_id
    LEFT JOIN zuora_account_source AS creator_account
      ON zuora_subscription.creator_account_id = creator_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account_source.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN date_details
      ON zuora_subscription.subscription_end_date::DATE = date_details.date_day
    LEFT JOIN date_details term_start_date
      ON zuora_subscription.term_start_date = term_start_date.date_day 
    LEFT JOIN date_details term_end_date 
      ON zuora_subscription.term_end_date = term_end_date.date_day
    LEFT JOIN prep_billing_account_user
      ON zuora_subscription.created_by_id = prep_billing_account_user.zuora_user_id
    LEFT JOIN sfdc_customer_subscription_source
      ON zuora_subscription.subscription_id = sfdc_customer_subscription_source.current_zuora_subscription_id

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-01-07'::DATE        AS model_created_date,
      '2023-04-12'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM joined25:Ta199,WITH zuora_account_source AS (
  
    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = 'FALSE'
      AND batch != 'Batch20'
  
), sfdc_opportunity_source AS (
  
    SELECT *
    FROM {{ ref('sfdc_opportunity_source') }}
    WHERE is_deleted = 'FALSE'
      AND stage_name != '10-Duplicate'
  
 ), zuora_subscription_source AS (

    SELECT 
      prep_subscription.*
    FROM {{ ref('prep_subscription') }}
    INNER JOIN zuora_account_source
      ON prep_subscription.dim_billing_account_id = zuora_account_source.account_id
  
), subscription_opps AS (

    SELECT DISTINCT
      dim_subscription_id       AS subscription_id, 
      dim_crm_opportunity_id    AS opportunity_id
    FROM zuora_subscription_source
    WHERE opportunity_id IS NOT NULL
      AND (subscription_created_date >= '2021-04-12'
        OR subscription_sales_type = 'Self-Service')
       
), zuora_rate_plan_source AS (
  
    SELECT *
    FROM  {{ ref('zuora_rate_plan_source') }}
    WHERE is_deleted = 'FALSE'
  
), zuora_rate_plan_charge_source AS (
  
    SELECT 
      zuora_rate_plan_charge_source.*,
      zuora_rate_plan_source.subscription_id
    FROM  {{ ref('zuora_rate_plan_charge_source') }}
    LEFT JOIN zuora_rate_plan_source
      ON zuora_rate_plan_charge_source.rate_plan_id = zuora_rate_plan_source.rate_plan_id
    WHERE zuora_rate_plan_charge_source.is_deleted = 'FALSE'
  
), prep_crm_account AS (
  
    SELECT *
    FROM {{ ref('prep_crm_account') }}
    WHERE is_deleted = 'FALSE'

), zuora_invoice_item_source AS (

    SELECT *
    FROM {{ ref('zuora_invoice_item_source') }}
    WHERE is_deleted = 'FALSE'

), zuora_invoice_source AS (
  
    SELECT *
    FROM {{ ref('zuora_invoice_source') }}
    WHERE is_deleted = 'FALSE'
  
), sfdc_zqu_quote_source AS (

    SELECT *
    FROM {{ ref('sfdc_zqu_quote_source') }}
    WHERE is_deleted = 'FALSE'
      AND sfdc_zqu_quote_source.zqu__primary = 'TRUE'
  
), quote_opps AS (

    SELECT DISTINCT
      sfdc_zqu_quote_source.zqu__zuora_subscription_id  AS subscription_id, 
      sfdc_zqu_quote_source.zqu__opportunity            AS opportunity_id,
      sfdc_opportunity_source.account_id                AS quote_opp_account_id,
      sfdc_opportunity_source.created_date              AS quote_opp_created_date,
      sfdc_opportunity_source.amount                    AS quote_opp_total_contract_value
    FROM sfdc_zqu_quote_source
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id
    WHERE sfdc_zqu_quote_source.zqu__opportunity IS NOT NULL
      AND sfdc_zqu_quote_source.zqu__zuora_subscription_id IS NOT NULL

), invoice_opps AS (

    SELECT DISTINCT
      zuora_invoice_item_source.subscription_id,
      zuora_invoice_source.invoice_number,
      SUM(zuora_invoice_item_source.charge_amount)           AS invoice_item_charge_amount,
      SUM(zuora_invoice_item_source.quantity)                AS invoice_item_quantity,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id                     AS invoice_opp_account_id,
      sfdc_opportunity_source.created_date                   AS invoice_opp_created_date,
      sfdc_opportunity_source.amount                         AS invoice_opp_total_contract_value
    FROM zuora_invoice_item_source
    LEFT JOIN zuora_invoice_source
      ON zuora_invoice_item_source.invoice_id = zuora_invoice_source.invoice_id
    INNER JOIN sfdc_opportunity_source
      ON zuora_invoice_source.invoice_number = sfdc_opportunity_source.invoice_number
    WHERE zuora_invoice_source.status = 'Posted'
      AND zuora_invoice_source.invoice_number IS NOT NULL
      AND sfdc_opportunity_source.opportunity_id IS NOT NULL
    GROUP BY 1,2,5,6,7,8

), subscription_quote_number_opps AS (

    SELECT 
      zuora.subscription_id,
      zuora.sfdc_opportunity_id,
      zuora.crm_opportunity_name,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id            AS subscription_quote_number_opp_account_id,
      sfdc_opportunity_source.created_date          AS subscription_quote_number_opp_created_date,
      sfdc_opportunity_source.amount                AS subscription_quote_number_opp_total_contract_value
    FROM {{ ref('zuora_subscription_source') }} zuora
    LEFT JOIN sfdc_zqu_quote_source
      ON zuora.quote_number = sfdc_zqu_quote_source.zqu__number
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id

), final AS (

    SELECT DISTINCT
      zuora_subscription_source.dim_subscription_id                                                                                                                                                                                                                                                                                                                                     AS dim_subscription_id,
      zuora_subscription_source.dim_billing_account_id                                                                                                                                                                                                                                                                                                                                  AS dim_billing_account_id,
      zuora_subscription_source.subscription_name                                                                                                                                                                                                                                                                                                                                       AS subscription_name,
      zuora_subscription_source.subscription_sales_type                                                                                                                                                                                                                                                                                                                          AS subscription_sales_type,
      zuora_subscription_source.dim_crm_account_id                                                                                                                                                                                                                                                                                                                                      AS subscription_account_id,
      prep_crm_account.dim_parent_crm_account_id                                                                                                                                                                                                                                                                                                                                        AS subscription_parent_account_id,
      COALESCE(invoice_opps.invoice_opp_account_id, LAG(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                 AS invoice_opp_account_id_forward,
      COALESCE(invoice_opps.invoice_opp_account_id, LEAD(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                AS invoice_opp_account_id_backward,
      COALESCE(quote_opps.quote_opp_account_id, LAG(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                         AS quote_opp_account_id_forward,
      COALESCE(quote_opps.quote_opp_account_id, LEAD(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                        AS quote_opp_account_id_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LAG(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                         AS subscription_opp_name_opp_account_id_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                        AS subscription_opp_name_opp_account_id_backward,
      zuora_subscription_source.subscription_version                                                                                                                                                                                                                                                                                                                                    AS subscription_version,
      zuora_subscription_source.term_start_date                                                                                                                                                                                                                                                                                                                                         AS term_start_date,
      zuora_subscription_source.term_end_date                                                                                                                                                                                                                                                                                                                                           AS term_end_date,
      zuora_subscription_source.subscription_start_date                                                                                                                                                                                                                                                                                                                                 AS subscription_start_date,
      zuora_subscription_source.subscription_end_date                                                                                                                                                                                                                                                                                                                                   AS subscription_end_date,
      zuora_subscription_source.subscription_status                                                                                                                                                                                                                                                                                                                                     AS subscription_status,
      zuora_subscription_source.subscription_created_date                                                                                                                                                                                                                                                                                                                               AS subscription_created_date, 
      zuora_subscription_source.dim_crm_opportunity_id                                                                                                                                                                                                                                                                                                                                  AS subscription_source_opp_id,
      subscription_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                  AS subscription_opp_id,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                 AS invoice_opp_id_forward,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                AS invoice_opp_id_backward,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                  AS invoice_opp_id_forward_term_based,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                 AS invoice_opp_id_backward_term_based,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                      AS invoice_opp_id_forward_sub_name,
      invoice_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                       AS unfilled_invoice_opp_id,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                     AS quote_opp_id_forward,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                    AS quote_opp_id_backward,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                      AS quote_opp_id_forward_term_based,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_id_backward_term_based,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                          AS quote_opp_id_forward_sub_name,
      quote_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                         AS unfilled_quote_opp_id,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS subscription_quote_number_opp_id_forward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS subscription_quote_number_opp_id_backward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                              AS subscription_quote_number_opp_id_forward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                             AS subscription_quote_number_opp_id_backward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                  AS subscription_quote_number_opp_id_forward_sub_name,
      subscription_quote_number_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                     AS unfilled_subscription_quote_number_opp_id,
      CASE
        WHEN zuora_subscription_source.subscription_sales_type = 'Sales-Assisted' 
          THEN COALESCE(subscription_opp_id, 
                        subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward,  
                        invoice_opp_id_forward, invoice_opp_id_backward,
                        quote_opp_id_forward, quote_opp_id_backward,
                        subscription_quote_number_opp_id_backward_term_based,
                        invoice_opp_id_backward_term_based,invoice_opp_id_forward_term_based,
                        quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                        subscription_quote_number_opp_id_forward_sub_name, invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                       ) -- prefer quote number on subscription if sales-assisted
        ELSE COALESCE(subscription_opp_id, 
                      invoice_opp_id_forward, invoice_opp_id_backward, 
                      quote_opp_id_forward, quote_opp_id_backward, 
                      invoice_opp_id_backward_term_based, invoice_opp_id_forward_term_based,
                      quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                      invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                     ) -- don't take quote_number on subscription for self-service
      END                                                                                                                                                                                                                                                                                                                                                                               AS combined_opportunity_id,
      COALESCE(invoice_opps.invoice_opp_created_date, LEAD(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                            AS invoice_opp_created_date_forward,
      COALESCE(invoice_opps.invoice_opp_created_date, LAG(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                             AS invoice_opp_created_date_backward,
      COALESCE(quote_opps.quote_opp_created_date, LEAD(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                    AS quote_opp_created_date_forward,
      COALESCE(quote_opps.quote_opp_created_date, LAG(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                     AS quote_opp_created_date_backward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LEAD(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS invoice_opp_total_contract_value_forward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LAG(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS invoice_opp_total_contract_value_backward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LEAD(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                    AS quote_opp_total_contract_value_forward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LAG(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_total_contract_value_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))    AS subscription_quote_number_opp_total_contract_value_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LAG(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))     AS subscription_quote_number_opp_total_contract_value_backward,
      invoice_opps.invoice_number                                                                                                                                                                                                                                                                                                                                                       AS invoice_number,
      invoice_opps.invoice_item_charge_amount                                                                                                                                                                                                                                                                                                                                           AS invoice_item_charge_amount,
      invoice_opps.invoice_item_quantity                                                                                                                                                                                                                                                                                                                                                AS invoice_item_quantity
    FROM zuora_subscription_source
    LEFT JOIN subscription_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_opps.subscription_id
    LEFT JOIN invoice_opps
      ON zuora_subscription_source.dim_subscription_id = invoice_opps.subscription_id
    LEFT JOIN quote_opps
      ON zuora_subscription_source.dim_subscription_id = quote_opps.subscription_id
    LEFT JOIN subscription_quote_number_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_quote_number_opps.subscription_id
    LEFT JOIN prep_crm_account
      ON zuora_subscription_source.dim_crm_account_id = prep_crm_account.dim_crm_account_id

), final_subs_opps AS (

    SELECT
      final.*
    FROM final
    INNER JOIN zuora_account_source
      ON final.dim_billing_account_id = zuora_account_source.account_id
    WHERE subscription_created_date >= '2019-02-01'
  
), complete_subs AS (
  
    SELECT
      subscription_name,
      COUNT_IF(combined_opportunity_id IS NOT NULL)                         AS other_count_test,
      SUM(CASE WHEN combined_opportunity_id IS NOT NULL THEN 1 ELSE 0 END)  AS count_test,
      COUNT(dim_subscription_id)                                            AS sub_count
    FROM final_subs_opps
    GROUP BY 1
  
), non_duplicates AS ( -- All subscription_ids that do not have multiple opportunities associated with them
  
    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id NOT IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 
    
), dupes AS ( -- GET ALL SUBSCRIPTION_IDS WITH MULTIPLE OPPORTUNITY_IDS, DUPLICATES (6,620) (4,600 -- with stage_name != '10-duplicate')

    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 

),invoice_item_amount AS (
  
    SELECT 
      dim_invoice_id, 
      invoice_number, 
      dim_subscription_id, 
      SUM(invoice_item_charge_amount) AS invoice_item_charge_amount, 
      AVG(quantity) AS quantity
    FROM {{ ref('fct_invoice_item') }}
    {{ dbt_utils.group_by(n=3) }}

), multiple_opps_on_one_invoice AS (

    SELECT DISTINCT
      ii.dim_subscription_id,
      dupes.subscription_name,
      dupes.subscription_version,
      ii.dim_invoice_id, 
      ii.invoice_number,
      ii.quantity,
      to_varchar(quantity, '999,999,999,999')   AS formatted_quantity,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            opp.opportunity_name
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS opp_name_slugify,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            formatted_quantity
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS formatted_quantity_slugify,
      opp.dim_crm_opportunity_id,
      opp.opportunity_name, 
      fct_opp.amount                                                                                                    AS opportunity_amount, 
      ii.invoice_item_charge_amount, 
      IFF(ROUND(opportunity_amount,2) = ROUND(ii.invoice_item_charge_amount,2),5,0)                                     AS opp_invoice_amount_match, 
      IFF(CONTAINS(opp_name_slugify, formatted_quantity_slugify),5,0)                                                   AS slugify_quantity_name_match,
      IFF(CONTAINS(opportunity_name, formatted_quantity),1,0)                                                           AS formatted_quantity_name_match,  
      opp_invoice_amount_match + slugify_quantity_name_match + formatted_quantity_name_match AS total
    FROM dupes
    INNER JOIN invoice_item_amount ii
      ON dupes.dim_subscription_id = ii.dim_subscription_id
        AND dupes.invoice_number = ii.invoice_number
    INNER JOIN {{ ref('dim_crm_opportunity') }} AS opp
      ON ii.invoice_number = opp.invoice_number
    INNER JOIN {{ ref('fct_crm_opportunity') }} AS fct_opp
      ON opp.dim_crm_opportunity_id = fct_opp.dim_crm_opportunity_id
    WHERE opp.stage_name <> '10-Duplicate'

), multiple_opps_on_one_invoice_matches AS (
  
    SELECT *
    FROM multiple_opps_on_one_invoice
    QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_subscription_id ORDER BY total DESC) = 1

), dupes_with_amount_matches AS (

    SELECT dupes.*
    FROM dupes
    INNER JOIN multiple_opps_on_one_invoice_matches 
      ON dupes.dim_subscription_id = multiple_opps_on_one_invoice_matches.dim_subscription_id
        AND dupes.unfilled_invoice_opp_id = multiple_opps_on_one_invoice_matches.dim_crm_opportunity_id
    WHERE total > 0

), dupes_without_amount_matches AS (

    SELECT *
    FROM dupes 
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM dupes_with_amount_matches) -- 460 non-distinct, 200 distinct
  
), multi_invoice_subs_with_opp_amounts AS (

    SELECT
       dim_subscription_id,
       ROUND(AVG(invoice_item_charge_amount),4)                                                  AS invoice_amount, 
       ROUND(SUM(invoice_opp_total_contract_value_forward),4)                                    AS invoice_opp_amount_forward, 
       ROUND(SUM(invoice_opp_total_contract_value_backward),4)                                   AS invoice_opp_amount_backward,
       ROUND(AVG(quote_opp_total_contract_value_forward),4)                                      AS quote_opp_amount_forward,
       ROUND(AVG(quote_opp_total_contract_value_backward),4)                                     AS quote_opp_amount_backward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_forward),4)                  AS subscription_quote_number_opp_amount_forward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_backward),4)                 AS subscription_quote_number_opp_amount_backward
    FROM dupes_without_amount_matches
    GROUP BY 1
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total AS (
   
    SELECT *
    FROM multi_invoice_subs_with_opp_amounts
    WHERE invoice_amount = invoice_opp_amount_forward
      OR invoice_amount = invoice_opp_amount_backward
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp AS (
  
    SELECT *
    FROM dupes
    WHERE dim_subscription_id IN (SELECT DISTINCT dim_subscription_id FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total)
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_created_date_forward) = 1
  
), final_matches_part_1 AS (
  
    SELECT *, 'non-duplicates' AS source
    FROM non_duplicates
    
    UNION 
  
    -- for invoices that have multiple subscriptions on the invoice, take the subscription-opportunity mapping where the invoice amount = opportunity amount 
    SELECT *, 'invoice amount matches opp amount' AS source
    FROM dupes_with_amount_matches
  
    UNION
    
    -- for subscriptions spread across multiple invoices where the opp totals match the total across the invoices, take the first opportunity based on the opportunity created date
    SELECT *, 'multi-invoice single sub' AS source
    FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp

), dupes_part_2 AS ( -- the fixes applied to these duplicates are not as strong, so we are peeling them out and applying different solutions

    SELECT *
    FROM dupes
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM final_matches_part_1)
  
), self_service_dupes_with_subscription_opp AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Self-Service'
      AND subscription_opp_id IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1

), sales_assisted_dupes_with_quote_num_on_sub AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Sales-Assisted'
      AND COALESCE(subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward, subscription_quote_number_opp_id_backward_term_based) IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1
  
), dupes_all_raw_sub_options_match AS (
  
    SELECT *
    FROM dupes_part_2
    WHERE unfilled_invoice_opp_id = unfilled_quote_opp_id
      AND unfilled_quote_opp_id = unfilled_subscription_quote_number_opp_id
      AND dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM self_service_dupes_with_subscription_opp
                                     UNION
                                     SELECT DISTINCT dim_subscription_id FROM sales_assisted_dupes_with_quote_num_on_sub)

 ), final_matches AS (
   
    SELECT *
    FROM final_matches_part_1
    UNION
  
    -- for self-service dupes, take the most reliable connection (opportunity id on subscription)
    SELECT *, 'self-service' AS source
    FROM self_service_dupes_with_subscription_opp
  
    UNION
   
    -- for sales_assisted dupes, take the most reliable connection (quote number on subscription)
    SELECT *, 'sales-assisted' AS source
    FROM sales_assisted_dupes_with_quote_num_on_sub  
  
    UNION
  
    -- for all dupes, take the subscription-opportunity options where the raw fields (opp on subscription, opp on invoice, and opp on quote number from subscription) match
    SELECT *, 'all matching opps' AS source
    FROM dupes_all_raw_sub_options_match

), final_matches_with_bad_data_flag AS (

    SELECT 
      final_matches.*,
      IFF(len(SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))=0, NULL, SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))    AS opp_id_remove_salesforce_url,
      {{zuora_slugify("combined_opportunity_id") }}                                                                                                                             AS opp_id_slugify,
      opp_name.opportunity_id                                                                                                                                                   AS opp_id_name,
      COALESCE(opp_id_remove_salesforce_url, opp_id_name, IFF(combined_opportunity_id NOT LIKE '0%', opp_id_slugify, combined_opportunity_id))                                  AS combined_oportunity_id_coalesced,
      CASE 
        WHEN subscription_opp_id IS NULL
          AND invoice_opp_id_forward IS NULL
            AND invoice_opp_id_backward IS NULL
              AND invoice_opp_id_forward_term_based IS NULL
                AND invoice_opp_id_backward_term_based IS NULL
                  AND unfilled_invoice_opp_id IS NULL
                    AND quote_opp_id_forward IS NULL
                      AND quote_opp_id_backward IS NULL
                        AND quote_opp_id_forward_term_based IS NULL
                          AND quote_opp_id_backward_term_based IS NULL
                            AND unfilled_quote_opp_id IS NULL
                              AND subscription_quote_number_opp_id_forward IS NULL
                                AND subscription_quote_number_opp_id_backward IS NULL
                                  AND subscription_quote_number_opp_id_forward_term_based IS NULL
                                    AND subscription_quote_number_opp_id_backward_term_based IS NULL
                                      AND subscription_quote_number_opp_id_forward_sub_name IS NULL
                                        AND unfilled_subscription_quote_number_opp_id IS NULL
                                          AND ( invoice_opp_id_forward_sub_name IS NOT NULL
                                                OR subscription_quote_number_opp_id_forward_sub_name IS NOT NULL
                                                OR quote_opp_id_forward_sub_name IS NOT NULL
                                              )
          THEN 1
        ELSE 0
      END                                                                                                           AS is_questionable_opportunity_mapping
    FROM final_matches
    LEFT JOIN {{ ref('sfdc_opportunity_source') }} opp_name
      ON {{ zuora_slugify("final_matches.combined_opportunity_id") }}  = {{ zuora_slugify("opp_name.opportunity_name") }}

), short_oppty_id AS (

SELECT
  opportunity_id              AS long_oppty_id,
  LEFT(opportunity_id,15)     AS short_oppty_id
FROM  {{ ref('sfdc_opportunity_source') }}

), final_matches_with_long_oppty_id AS (

SELECT 
  final_matches_with_bad_data_flag.*,
  short_oppty_id.long_oppty_id        AS dim_crm_opportunity_id
FROM final_matches_with_bad_data_flag
LEFT JOIN short_oppty_id
  ON LEFT(final_matches_with_bad_data_flag.combined_oportunity_id_coalesced,15) = short_oppty_id.short_oppty_id
  
)

{{ dbt_audit(
    cte_ref="final_matches_with_long_oppty_id",
    created_by="@michellecooper",
    updated_by="@michellecooper",
    created_date="2021-11-10",
    updated_date="2022-01-19"
) }}26:Tcad,Prep table for the mapping table for subscriptions to opportunities. This incorporates logic from previous processes which includes taking opportunity-subscription connections from quotes, invoices, and the subscription object itself. Based on the created date, term dates, or subscription name, we fill in missing opportunity ids.

 The process is described in this [flow diagram](https://lucid.app/lucidchart/e7661694-61ed-4317-b648-d054be9aff0e/edit?viewport_loc=-76%2C296%2C3590%2C1856%2C0_0&invitationId=inv_f50ea2e1-1ea8-47ca-b950-75b723273b00)

 The final result yields the distinct combination of subscriptions and opportunities with the best match based on the rules defined in the flow diagram.

 For self-service subscriptions:
 - Take the opportunity_id from the subscription object
 - Using the quote_number from the subscription's invoice, get the opportunity_id from the opportunity which has that quote_number on it.
 - Out of all quotes, take any opportunity_id where the quote has the subscription_id on it.
 - Fill forward/backwards when the subscription created dates are the same.
 - Fill forward/backwards when the subscription term dates are the same.
 - Fill forward when the subscription name is the same.

 For sales-assisted subscriptions:
 - Take the opportunity_id from the subscription object if it was created after 2021-04-11. This is when automation was set up to reliably relate subscriptions and opportunities.
 - Using the quote_number from the subscription object, get the opportunity_id from the opportunity which has that quote_number on it.
 - Using the quote_number from the subscription's invoice, get the opportunity_id from the opportunity which has that quote_number on it.
 - Out of all quotes, take any opportunity_id where the quote has the subscription_id on it.
 - Fill forward/backwards when the subscription created dates are the same.
 - Fill forward/backwards when the subscription term dates are the same.
 - Fill forward when the subscription name is the same.

 In both cases there where multiple opportunities are assigned to a single subscription. This can be caused by a variety of reasons, and we apply the following logic to all subscriptions to determine which opportunity is the best match:
 - Select the opportunity whith the amount that matches the amount on the subscription's invoice. This is the best solution for when a subscription is one of many on an invoice, and we need to match up each subscription with the appropriate opportunity.
 - Select the opportunity created first if all of the possible opportunities' amounts sums to the amount on the subscription's invoices. This is the best solution for when a subscription is billed on multiple invoices and new opportunity is created for each invoice. Ex. Ramp deals
 - If the subscription is self-service and has an opportunity_id on the subscription object, take the opportunity_id from the subscription object.
 - If the subscription is sales_assisted and there is a quote_number on the subscription, take the opportunity_id from the opportunity associated with this quote_number.
 - If all of the methods for finding an opportunity-subscription mapping match for one record, select this subscription-opportunity pair.27:Ta5ca,WITH zuora_account_source AS (
  
    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = 'FALSE'
      AND batch != 'Batch20'
  
), sfdc_opportunity_source AS (
  
    SELECT *
    FROM "PREP".sfdc.sfdc_opportunity_source
    WHERE is_deleted = 'FALSE'
      AND stage_name != '10-Duplicate'
  
 ), zuora_subscription_source AS (

    SELECT 
      prep_subscription.*
    FROM "PROD".common_prep.prep_subscription
    INNER JOIN zuora_account_source
      ON prep_subscription.dim_billing_account_id = zuora_account_source.account_id
  
), subscription_opps AS (

    SELECT DISTINCT
      dim_subscription_id       AS subscription_id, 
      dim_crm_opportunity_id    AS opportunity_id
    FROM zuora_subscription_source
    WHERE opportunity_id IS NOT NULL
      AND (subscription_created_date >= '2021-04-12'
        OR subscription_sales_type = 'Self-Service')
       
), zuora_rate_plan_source AS (
  
    SELECT *
    FROM  "PREP".zuora.zuora_rate_plan_source
    WHERE is_deleted = 'FALSE'
  
), zuora_rate_plan_charge_source AS (
  
    SELECT 
      zuora_rate_plan_charge_source.*,
      zuora_rate_plan_source.subscription_id
    FROM  "PREP".zuora.zuora_rate_plan_charge_source
    LEFT JOIN zuora_rate_plan_source
      ON zuora_rate_plan_charge_source.rate_plan_id = zuora_rate_plan_source.rate_plan_id
    WHERE zuora_rate_plan_charge_source.is_deleted = 'FALSE'
  
), prep_crm_account AS (
  
    SELECT *
    FROM "PROD".restricted_safe_common_prep.prep_crm_account
    WHERE is_deleted = 'FALSE'

), zuora_invoice_item_source AS (

    SELECT *
    FROM "PREP".zuora.zuora_invoice_item_source
    WHERE is_deleted = 'FALSE'

), zuora_invoice_source AS (
  
    SELECT *
    FROM "PREP".zuora.zuora_invoice_source
    WHERE is_deleted = 'FALSE'
  
), sfdc_zqu_quote_source AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_zqu_quote_source
    WHERE is_deleted = 'FALSE'
      AND sfdc_zqu_quote_source.zqu__primary = 'TRUE'
  
), quote_opps AS (

    SELECT DISTINCT
      sfdc_zqu_quote_source.zqu__zuora_subscription_id  AS subscription_id, 
      sfdc_zqu_quote_source.zqu__opportunity            AS opportunity_id,
      sfdc_opportunity_source.account_id                AS quote_opp_account_id,
      sfdc_opportunity_source.created_date              AS quote_opp_created_date,
      sfdc_opportunity_source.amount                    AS quote_opp_total_contract_value
    FROM sfdc_zqu_quote_source
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id
    WHERE sfdc_zqu_quote_source.zqu__opportunity IS NOT NULL
      AND sfdc_zqu_quote_source.zqu__zuora_subscription_id IS NOT NULL

), invoice_opps AS (

    SELECT DISTINCT
      zuora_invoice_item_source.subscription_id,
      zuora_invoice_source.invoice_number,
      SUM(zuora_invoice_item_source.charge_amount)           AS invoice_item_charge_amount,
      SUM(zuora_invoice_item_source.quantity)                AS invoice_item_quantity,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id                     AS invoice_opp_account_id,
      sfdc_opportunity_source.created_date                   AS invoice_opp_created_date,
      sfdc_opportunity_source.amount                         AS invoice_opp_total_contract_value
    FROM zuora_invoice_item_source
    LEFT JOIN zuora_invoice_source
      ON zuora_invoice_item_source.invoice_id = zuora_invoice_source.invoice_id
    INNER JOIN sfdc_opportunity_source
      ON zuora_invoice_source.invoice_number = sfdc_opportunity_source.invoice_number
    WHERE zuora_invoice_source.status = 'Posted'
      AND zuora_invoice_source.invoice_number IS NOT NULL
      AND sfdc_opportunity_source.opportunity_id IS NOT NULL
    GROUP BY 1,2,5,6,7,8

), subscription_quote_number_opps AS (

    SELECT 
      zuora.subscription_id,
      zuora.sfdc_opportunity_id,
      zuora.crm_opportunity_name,
      sfdc_opportunity_source.opportunity_id,
      sfdc_opportunity_source.account_id            AS subscription_quote_number_opp_account_id,
      sfdc_opportunity_source.created_date          AS subscription_quote_number_opp_created_date,
      sfdc_opportunity_source.amount                AS subscription_quote_number_opp_total_contract_value
    FROM "PREP".zuora.zuora_subscription_source zuora
    LEFT JOIN sfdc_zqu_quote_source
      ON zuora.quote_number = sfdc_zqu_quote_source.zqu__number
    INNER JOIN sfdc_opportunity_source
      ON sfdc_zqu_quote_source.zqu__opportunity = sfdc_opportunity_source.opportunity_id

), final AS (

    SELECT DISTINCT
      zuora_subscription_source.dim_subscription_id                                                                                                                                                                                                                                                                                                                                     AS dim_subscription_id,
      zuora_subscription_source.dim_billing_account_id                                                                                                                                                                                                                                                                                                                                  AS dim_billing_account_id,
      zuora_subscription_source.subscription_name                                                                                                                                                                                                                                                                                                                                       AS subscription_name,
      zuora_subscription_source.subscription_sales_type                                                                                                                                                                                                                                                                                                                          AS subscription_sales_type,
      zuora_subscription_source.dim_crm_account_id                                                                                                                                                                                                                                                                                                                                      AS subscription_account_id,
      prep_crm_account.dim_parent_crm_account_id                                                                                                                                                                                                                                                                                                                                        AS subscription_parent_account_id,
      COALESCE(invoice_opps.invoice_opp_account_id, LAG(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                 AS invoice_opp_account_id_forward,
      COALESCE(invoice_opps.invoice_opp_account_id, LEAD(invoice_opps.invoice_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                AS invoice_opp_account_id_backward,
      COALESCE(quote_opps.quote_opp_account_id, LAG(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                         AS quote_opp_account_id_forward,
      COALESCE(quote_opps.quote_opp_account_id, LEAD(quote_opps.quote_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                        AS quote_opp_account_id_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LAG(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                         AS subscription_opp_name_opp_account_id_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_account_id, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_account_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                        AS subscription_opp_name_opp_account_id_backward,
      zuora_subscription_source.subscription_version                                                                                                                                                                                                                                                                                                                                    AS subscription_version,
      zuora_subscription_source.term_start_date                                                                                                                                                                                                                                                                                                                                         AS term_start_date,
      zuora_subscription_source.term_end_date                                                                                                                                                                                                                                                                                                                                           AS term_end_date,
      zuora_subscription_source.subscription_start_date                                                                                                                                                                                                                                                                                                                                 AS subscription_start_date,
      zuora_subscription_source.subscription_end_date                                                                                                                                                                                                                                                                                                                                   AS subscription_end_date,
      zuora_subscription_source.subscription_status                                                                                                                                                                                                                                                                                                                                     AS subscription_status,
      zuora_subscription_source.subscription_created_date                                                                                                                                                                                                                                                                                                                               AS subscription_created_date, 
      zuora_subscription_source.dim_crm_opportunity_id                                                                                                                                                                                                                                                                                                                                  AS subscription_source_opp_id,
      subscription_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                  AS subscription_opp_id,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                 AS invoice_opp_id_forward,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                AS invoice_opp_id_backward,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                  AS invoice_opp_id_forward_term_based,
      COALESCE(invoice_opps.opportunity_id, LEAD(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                 AS invoice_opp_id_backward_term_based,
      COALESCE(invoice_opps.opportunity_id, LAG(invoice_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                      AS invoice_opp_id_forward_sub_name,
      invoice_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                       AS unfilled_invoice_opp_id,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                     AS quote_opp_id_forward,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                                    AS quote_opp_id_backward,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                      AS quote_opp_id_forward_term_based,
      COALESCE(quote_opps.opportunity_id, LEAD(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_id_backward_term_based,
      COALESCE(quote_opps.opportunity_id, LAG(quote_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                                                          AS quote_opp_id_forward_sub_name,
      quote_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                                         AS unfilled_quote_opp_id,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS subscription_quote_number_opp_id_forward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS subscription_quote_number_opp_id_backward,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                              AS subscription_quote_number_opp_id_forward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LEAD(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.term_start_date, zuora_subscription_source.term_end_date ORDER BY zuora_subscription_source.subscription_version))                                             AS subscription_quote_number_opp_id_backward_term_based,
      COALESCE(subscription_quote_number_opps.opportunity_id, LAG(subscription_quote_number_opps.opportunity_id) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name ORDER BY zuora_subscription_source.subscription_version))                                                                                                                                  AS subscription_quote_number_opp_id_forward_sub_name,
      subscription_quote_number_opps.opportunity_id                                                                                                                                                                                                                                                                                                                                     AS unfilled_subscription_quote_number_opp_id,
      CASE
        WHEN zuora_subscription_source.subscription_sales_type = 'Sales-Assisted' 
          THEN COALESCE(subscription_opp_id, 
                        subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward,  
                        invoice_opp_id_forward, invoice_opp_id_backward,
                        quote_opp_id_forward, quote_opp_id_backward,
                        subscription_quote_number_opp_id_backward_term_based,
                        invoice_opp_id_backward_term_based,invoice_opp_id_forward_term_based,
                        quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                        subscription_quote_number_opp_id_forward_sub_name, invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                       ) -- prefer quote number on subscription if sales-assisted
        ELSE COALESCE(subscription_opp_id, 
                      invoice_opp_id_forward, invoice_opp_id_backward, 
                      quote_opp_id_forward, quote_opp_id_backward, 
                      invoice_opp_id_backward_term_based, invoice_opp_id_forward_term_based,
                      quote_opp_id_backward_term_based,quote_opp_id_forward_term_based,
                      invoice_opp_id_forward_sub_name, quote_opp_id_forward_sub_name
                     ) -- don't take quote_number on subscription for self-service
      END                                                                                                                                                                                                                                                                                                                                                                               AS combined_opportunity_id,
      COALESCE(invoice_opps.invoice_opp_created_date, LEAD(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                            AS invoice_opp_created_date_forward,
      COALESCE(invoice_opps.invoice_opp_created_date, LAG(invoice_opps.invoice_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                             AS invoice_opp_created_date_backward,
      COALESCE(quote_opps.quote_opp_created_date, LEAD(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                    AS quote_opp_created_date_forward,
      COALESCE(quote_opps.quote_opp_created_date, LAG(quote_opps.quote_opp_created_date) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                                     AS quote_opp_created_date_backward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LEAD(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                            AS invoice_opp_total_contract_value_forward,
      COALESCE(invoice_opps.invoice_opp_total_contract_value, LAG(invoice_opps.invoice_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                             AS invoice_opp_total_contract_value_backward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LEAD(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                    AS quote_opp_total_contract_value_forward,
      COALESCE(quote_opps.quote_opp_total_contract_value, LAG(quote_opps.quote_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))                                                                                     AS quote_opp_total_contract_value_backward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LEAD(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))    AS subscription_quote_number_opp_total_contract_value_forward,
      COALESCE(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value, LAG(subscription_quote_number_opps.subscription_quote_number_opp_total_contract_value) IGNORE NULLS OVER (PARTITION BY zuora_subscription_source.subscription_name, zuora_subscription_source.subscription_created_date ORDER BY zuora_subscription_source.subscription_version))     AS subscription_quote_number_opp_total_contract_value_backward,
      invoice_opps.invoice_number                                                                                                                                                                                                                                                                                                                                                       AS invoice_number,
      invoice_opps.invoice_item_charge_amount                                                                                                                                                                                                                                                                                                                                           AS invoice_item_charge_amount,
      invoice_opps.invoice_item_quantity                                                                                                                                                                                                                                                                                                                                                AS invoice_item_quantity
    FROM zuora_subscription_source
    LEFT JOIN subscription_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_opps.subscription_id
    LEFT JOIN invoice_opps
      ON zuora_subscription_source.dim_subscription_id = invoice_opps.subscription_id
    LEFT JOIN quote_opps
      ON zuora_subscription_source.dim_subscription_id = quote_opps.subscription_id
    LEFT JOIN subscription_quote_number_opps
      ON zuora_subscription_source.dim_subscription_id = subscription_quote_number_opps.subscription_id
    LEFT JOIN prep_crm_account
      ON zuora_subscription_source.dim_crm_account_id = prep_crm_account.dim_crm_account_id

), final_subs_opps AS (

    SELECT
      final.*
    FROM final
    INNER JOIN zuora_account_source
      ON final.dim_billing_account_id = zuora_account_source.account_id
    WHERE subscription_created_date >= '2019-02-01'
  
), complete_subs AS (
  
    SELECT
      subscription_name,
      COUNT_IF(combined_opportunity_id IS NOT NULL)                         AS other_count_test,
      SUM(CASE WHEN combined_opportunity_id IS NOT NULL THEN 1 ELSE 0 END)  AS count_test,
      COUNT(dim_subscription_id)                                            AS sub_count
    FROM final_subs_opps
    GROUP BY 1
  
), non_duplicates AS ( -- All subscription_ids that do not have multiple opportunities associated with them
  
    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id NOT IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 
    
), dupes AS ( -- GET ALL SUBSCRIPTION_IDS WITH MULTIPLE OPPORTUNITY_IDS, DUPLICATES (6,620) (4,600 -- with stage_name != '10-duplicate')

    SELECT *
    FROM final_subs_opps
    WHERE dim_subscription_id IN (SELECT dim_subscription_id FROM final GROUP BY dim_subscription_id HAVING COUNT(*) > 1) 

),invoice_item_amount AS (
  
    SELECT 
      dim_invoice_id, 
      invoice_number, 
      dim_subscription_id, 
      SUM(invoice_item_charge_amount) AS invoice_item_charge_amount, 
      AVG(quantity) AS quantity
    FROM "PROD".restricted_safe_common.fct_invoice_item
    group by 1,2,3

), multiple_opps_on_one_invoice AS (

    SELECT DISTINCT
      ii.dim_subscription_id,
      dupes.subscription_name,
      dupes.subscription_version,
      ii.dim_invoice_id, 
      ii.invoice_number,
      ii.quantity,
      to_varchar(quantity, '999,999,999,999')   AS formatted_quantity,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            opp.opportunity_name
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS opp_name_slugify,
      trim(
            lower(
                regexp_replace(
                    regexp_replace(
                        regexp_replace(
                            formatted_quantity
                        , '\\s+\\|{2}\\s+', '|')
                    , '[ ]{2,}', ' ')
                , '[^A-Za-z0-9|]', '-')
                )
            )                                                                                                           AS formatted_quantity_slugify,
      opp.dim_crm_opportunity_id,
      opp.opportunity_name, 
      fct_opp.amount                                                                                                    AS opportunity_amount, 
      ii.invoice_item_charge_amount, 
      IFF(ROUND(opportunity_amount,2) = ROUND(ii.invoice_item_charge_amount,2),5,0)                                     AS opp_invoice_amount_match, 
      IFF(CONTAINS(opp_name_slugify, formatted_quantity_slugify),5,0)                                                   AS slugify_quantity_name_match,
      IFF(CONTAINS(opportunity_name, formatted_quantity),1,0)                                                           AS formatted_quantity_name_match,  
      opp_invoice_amount_match + slugify_quantity_name_match + formatted_quantity_name_match AS total
    FROM dupes
    INNER JOIN invoice_item_amount ii
      ON dupes.dim_subscription_id = ii.dim_subscription_id
        AND dupes.invoice_number = ii.invoice_number
    INNER JOIN "PROD".restricted_safe_common.dim_crm_opportunity AS opp
      ON ii.invoice_number = opp.invoice_number
    INNER JOIN "PROD".restricted_safe_common.fct_crm_opportunity AS fct_opp
      ON opp.dim_crm_opportunity_id = fct_opp.dim_crm_opportunity_id
    WHERE opp.stage_name <> '10-Duplicate'

), multiple_opps_on_one_invoice_matches AS (
  
    SELECT *
    FROM multiple_opps_on_one_invoice
    QUALIFY ROW_NUMBER() OVER (PARTITION BY dim_subscription_id ORDER BY total DESC) = 1

), dupes_with_amount_matches AS (

    SELECT dupes.*
    FROM dupes
    INNER JOIN multiple_opps_on_one_invoice_matches 
      ON dupes.dim_subscription_id = multiple_opps_on_one_invoice_matches.dim_subscription_id
        AND dupes.unfilled_invoice_opp_id = multiple_opps_on_one_invoice_matches.dim_crm_opportunity_id
    WHERE total > 0

), dupes_without_amount_matches AS (

    SELECT *
    FROM dupes 
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM dupes_with_amount_matches) -- 460 non-distinct, 200 distinct
  
), multi_invoice_subs_with_opp_amounts AS (

    SELECT
       dim_subscription_id,
       ROUND(AVG(invoice_item_charge_amount),4)                                                  AS invoice_amount, 
       ROUND(SUM(invoice_opp_total_contract_value_forward),4)                                    AS invoice_opp_amount_forward, 
       ROUND(SUM(invoice_opp_total_contract_value_backward),4)                                   AS invoice_opp_amount_backward,
       ROUND(AVG(quote_opp_total_contract_value_forward),4)                                      AS quote_opp_amount_forward,
       ROUND(AVG(quote_opp_total_contract_value_backward),4)                                     AS quote_opp_amount_backward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_forward),4)                  AS subscription_quote_number_opp_amount_forward,
       ROUND(AVG(subscription_quote_number_opp_total_contract_value_backward),4)                 AS subscription_quote_number_opp_amount_backward
    FROM dupes_without_amount_matches
    GROUP BY 1
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total AS (
   
    SELECT *
    FROM multi_invoice_subs_with_opp_amounts
    WHERE invoice_amount = invoice_opp_amount_forward
      OR invoice_amount = invoice_opp_amount_backward
  
), multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp AS (
  
    SELECT *
    FROM dupes
    WHERE dim_subscription_id IN (SELECT DISTINCT dim_subscription_id FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total)
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_created_date_forward) = 1
  
), final_matches_part_1 AS (
  
    SELECT *, 'non-duplicates' AS source
    FROM non_duplicates
    
    UNION 
  
    -- for invoices that have multiple subscriptions on the invoice, take the subscription-opportunity mapping where the invoice amount = opportunity amount 
    SELECT *, 'invoice amount matches opp amount' AS source
    FROM dupes_with_amount_matches
  
    UNION
    
    -- for subscriptions spread across multiple invoices where the opp totals match the total across the invoices, take the first opportunity based on the opportunity created date
    SELECT *, 'multi-invoice single sub' AS source
    FROM multi_invoice_subs_with_opp_amounts_that_sum_to_invoice_total_first_opp

), dupes_part_2 AS ( -- the fixes applied to these duplicates are not as strong, so we are peeling them out and applying different solutions

    SELECT *
    FROM dupes
    WHERE dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM final_matches_part_1)
  
), self_service_dupes_with_subscription_opp AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Self-Service'
      AND subscription_opp_id IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1

), sales_assisted_dupes_with_quote_num_on_sub AS (

    SELECT *
    FROM dupes_part_2
    WHERE subscription_sales_type = 'Sales-Assisted'
      AND COALESCE(subscription_quote_number_opp_id_forward, subscription_quote_number_opp_id_backward, subscription_quote_number_opp_id_backward_term_based) IS NOT NULL
    QUALIFY RANK() OVER (PARTITION BY dim_subscription_id ORDER BY invoice_opp_id_forward, invoice_opp_id_backward, invoice_opp_id_backward_term_based) = 1
  
), dupes_all_raw_sub_options_match AS (
  
    SELECT *
    FROM dupes_part_2
    WHERE unfilled_invoice_opp_id = unfilled_quote_opp_id
      AND unfilled_quote_opp_id = unfilled_subscription_quote_number_opp_id
      AND dim_subscription_id NOT IN (SELECT DISTINCT dim_subscription_id FROM self_service_dupes_with_subscription_opp
                                     UNION
                                     SELECT DISTINCT dim_subscription_id FROM sales_assisted_dupes_with_quote_num_on_sub)

 ), final_matches AS (
   
    SELECT *
    FROM final_matches_part_1
    UNION
  
    -- for self-service dupes, take the most reliable connection (opportunity id on subscription)
    SELECT *, 'self-service' AS source
    FROM self_service_dupes_with_subscription_opp
  
    UNION
   
    -- for sales_assisted dupes, take the most reliable connection (quote number on subscription)
    SELECT *, 'sales-assisted' AS source
    FROM sales_assisted_dupes_with_quote_num_on_sub  
  
    UNION
  
    -- for all dupes, take the subscription-opportunity options where the raw fields (opp on subscription, opp on invoice, and opp on quote number from subscription) match
    SELECT *, 'all matching opps' AS source
    FROM dupes_all_raw_sub_options_match

), final_matches_with_bad_data_flag AS (

    SELECT 
      final_matches.*,
      IFF(len(SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))=0, NULL, SPLIT_PART(combined_opportunity_id,'https://gitlab.my.salesforce.com/',2))    AS opp_id_remove_salesforce_url,
      trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        combined_opportunity_id
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )                                                                                                                             AS opp_id_slugify,
      opp_name.opportunity_id                                                                                                                                                   AS opp_id_name,
      COALESCE(opp_id_remove_salesforce_url, opp_id_name, IFF(combined_opportunity_id NOT LIKE '0%', opp_id_slugify, combined_opportunity_id))                                  AS combined_oportunity_id_coalesced,
      CASE 
        WHEN subscription_opp_id IS NULL
          AND invoice_opp_id_forward IS NULL
            AND invoice_opp_id_backward IS NULL
              AND invoice_opp_id_forward_term_based IS NULL
                AND invoice_opp_id_backward_term_based IS NULL
                  AND unfilled_invoice_opp_id IS NULL
                    AND quote_opp_id_forward IS NULL
                      AND quote_opp_id_backward IS NULL
                        AND quote_opp_id_forward_term_based IS NULL
                          AND quote_opp_id_backward_term_based IS NULL
                            AND unfilled_quote_opp_id IS NULL
                              AND subscription_quote_number_opp_id_forward IS NULL
                                AND subscription_quote_number_opp_id_backward IS NULL
                                  AND subscription_quote_number_opp_id_forward_term_based IS NULL
                                    AND subscription_quote_number_opp_id_backward_term_based IS NULL
                                      AND subscription_quote_number_opp_id_forward_sub_name IS NULL
                                        AND unfilled_subscription_quote_number_opp_id IS NULL
                                          AND ( invoice_opp_id_forward_sub_name IS NOT NULL
                                                OR subscription_quote_number_opp_id_forward_sub_name IS NOT NULL
                                                OR quote_opp_id_forward_sub_name IS NOT NULL
                                              )
          THEN 1
        ELSE 0
      END                                                                                                           AS is_questionable_opportunity_mapping
    FROM final_matches
    LEFT JOIN "PREP".sfdc.sfdc_opportunity_source opp_name
      ON trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        final_matches.combined_opportunity_id
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )  = trim(
        lower(
            regexp_replace(
                regexp_replace(
                    regexp_replace(
                        opp_name.opportunity_name
                    , '\\s+\\|{2}\\s+', '|')
                , '[ ]{2,}', ' ')
            , '[^A-Za-z0-9|]', '-')
            )
        )

), short_oppty_id AS (

SELECT
  opportunity_id              AS long_oppty_id,
  LEFT(opportunity_id,15)     AS short_oppty_id
FROM  "PREP".sfdc.sfdc_opportunity_source

), final_matches_with_long_oppty_id AS (

SELECT 
  final_matches_with_bad_data_flag.*,
  short_oppty_id.long_oppty_id        AS dim_crm_opportunity_id
FROM final_matches_with_bad_data_flag
LEFT JOIN short_oppty_id
  ON LEFT(final_matches_with_bad_data_flag.combined_oportunity_id_coalesced,15) = short_oppty_id.short_oppty_id
  
)

SELECT
      *,
      '@michellecooper'::VARCHAR       AS created_by,
      '@michellecooper'::VARCHAR       AS updated_by,
      '2021-11-10'::DATE        AS model_created_date,
      '2022-01-19'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final_matches_with_long_oppty_id28:Tbb7,WITH crm_account_dimensions AS (

    SELECT *
    FROM {{ ref('map_crm_account')}}

), map_merged_crm_account AS (

    SELECT *
    FROM {{ ref('map_merged_crm_account') }}

), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM {{ ref('zuora_invoice_source') }}
    WHERE is_deleted = FALSE

), final_invoice AS (

    SELECT
    --ids
      zuora_invoice.invoice_id                                          AS dim_invoice_id,

      --shared dimension keys
      zuora_invoice.account_id                                          AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                        AS dim_crm_account_id,
      crm_account_dimensions.dim_parent_crm_account_id,
      crm_account_dimensions.dim_parent_sales_segment_id,
      crm_account_dimensions.dim_parent_sales_territory_id,
      crm_account_dimensions.dim_parent_industry_id,
      crm_account_dimensions.dim_account_sales_segment_id,
      crm_account_dimensions.dim_account_sales_territory_id,
      crm_account_dimensions.dim_account_industry_id,
      crm_account_dimensions.dim_account_location_country_id,
      crm_account_dimensions.dim_account_location_region_id,

      --invoice dates
      {{ get_date_id('zuora_invoice.invoice_date') }}                   AS invoice_date_id,
      {{ get_date_id('zuora_invoice.created_date') }}                   AS created_date_id,
      {{ get_date_id('zuora_invoice.due_date') }}                       AS due_date_id,
      {{ get_date_id('zuora_invoice.posted_date') }}                    AS posted_date_id,
      {{ get_date_id('zuora_invoice.target_date') }}                    AS target_date_id,

      --invoice flags
      zuora_invoice.includes_one_time,
      zuora_invoice.includesrecurring,
      zuora_invoice.includes_usage,
      zuora_invoice.transferred_to_accounting,

      --additive fields
      zuora_invoice.adjustment_amount,
      zuora_invoice.amount,
      zuora_invoice.amount_without_tax,
      zuora_invoice.balance,
      zuora_invoice.credit_balance_adjustment_amount,
      zuora_invoice.payment_amount,
      zuora_invoice.refund_amount,
      zuora_invoice.tax_amount,
      zuora_invoice.tax_exempt_amount,

      -- metadata
      zuora_invoice.created_by_id,
      zuora_invoice.updated_by_id,
      {{ get_date_id('zuora_invoice.updated_date') }}                   AS updated_date_id

    FROM zuora_invoice
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN crm_account_dimensions
      ON map_merged_crm_account.dim_crm_account_id = crm_account_dimensions.dim_crm_account_id
)

{{ dbt_audit(
    cte_ref="final_invoice",
    created_by="@mcooperDD",
    updated_by="@lisvinueza",
    created_date="2021-01-20",
    updated_date="2023-05-21"
) }}29:Tda1,WITH crm_account_dimensions AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_crm_account

), map_merged_crm_account AS (

    SELECT *
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE

), zuora_invoice AS (

    SELECT *
    FROM "PREP".zuora.zuora_invoice_source
    WHERE is_deleted = FALSE

), final_invoice AS (

    SELECT
    --ids
      zuora_invoice.invoice_id                                          AS dim_invoice_id,

      --shared dimension keys
      zuora_invoice.account_id                                          AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                        AS dim_crm_account_id,
      crm_account_dimensions.dim_parent_crm_account_id,
      crm_account_dimensions.dim_parent_sales_segment_id,
      crm_account_dimensions.dim_parent_sales_territory_id,
      crm_account_dimensions.dim_parent_industry_id,
      crm_account_dimensions.dim_account_sales_segment_id,
      crm_account_dimensions.dim_account_sales_territory_id,
      crm_account_dimensions.dim_account_industry_id,
      crm_account_dimensions.dim_account_location_country_id,
      crm_account_dimensions.dim_account_location_region_id,

      --invoice dates
      

  TO_NUMBER(TO_CHAR(zuora_invoice.invoice_date::DATE,'YYYYMMDD'),'99999999')

                   AS invoice_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.created_date::DATE,'YYYYMMDD'),'99999999')

                   AS created_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.due_date::DATE,'YYYYMMDD'),'99999999')

                       AS due_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.posted_date::DATE,'YYYYMMDD'),'99999999')

                    AS posted_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.target_date::DATE,'YYYYMMDD'),'99999999')

                    AS target_date_id,

      --invoice flags
      zuora_invoice.includes_one_time,
      zuora_invoice.includesrecurring,
      zuora_invoice.includes_usage,
      zuora_invoice.transferred_to_accounting,

      --additive fields
      zuora_invoice.adjustment_amount,
      zuora_invoice.amount,
      zuora_invoice.amount_without_tax,
      zuora_invoice.balance,
      zuora_invoice.credit_balance_adjustment_amount,
      zuora_invoice.payment_amount,
      zuora_invoice.refund_amount,
      zuora_invoice.tax_amount,
      zuora_invoice.tax_exempt_amount,

      -- metadata
      zuora_invoice.created_by_id,
      zuora_invoice.updated_by_id,
      

  TO_NUMBER(TO_CHAR(zuora_invoice.updated_date::DATE,'YYYYMMDD'),'99999999')

                   AS updated_date_id

    FROM zuora_invoice
    INNER JOIN zuora_account
      ON zuora_invoice.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN crm_account_dimensions
      ON map_merged_crm_account.dim_crm_account_id = crm_account_dimensions.dim_crm_account_id
)

SELECT
      *,
      '@mcooperDD'::VARCHAR       AS created_by,
      '@lisvinueza'::VARCHAR       AS updated_by,
      '2021-01-20'::DATE        AS model_created_date,
      '2023-05-21'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final_invoice2a:T5872,{{ simple_cte([
    ('map_merged_crm_account', 'map_merged_crm_account'),
    ('zuora_rate_plan', 'zuora_rate_plan_source'),
    ('zuora_rate_plan_charge', 'zuora_rate_plan_charge_source'),
    ('zuora_order_action_rate_plan','zuora_query_api_order_action_rate_plan_source'),
    ('zuora_order_action', 'zuora_order_action_source'),
    ('revenue_contract_line', 'zuora_revenue_revenue_contract_line_source'),
    ('zuora_order', 'zuora_order_source')
])}}

, sfdc_account AS (

    SELECT *
    FROM {{ ref('sfdc_account_source') }}
    WHERE account_id IS NOT NULL
    
), zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM {{ ref('zuora_revenue_manual_journal_entry_source') }}

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    {{ dbt_utils.group_by(n=1) }}

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    {{ dbt_utils.group_by(n=7) }}

), charge_to_order AS (

    SELECT 
      zuora_rate_plan_charge.rate_plan_charge_id,
      zuora_order_action.order_id
    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_order_action_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_order_action_rate_plan.rate_plan_id
    INNER JOIN zuora_order_action
      ON zuora_order_action_rate_plan.order_action_id = zuora_order_action.order_action_id
    {{ dbt_utils.group_by(n=2) }}

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_subscription.created_by_id                                  AS subscription_created_by_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendement_id                                     AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                           AS dim_parent_crm_account_id,
      charge_to_order.order_id                                          AS dim_order_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_start_date') }}  AS effective_start_date_id,
      {{ get_date_id('zuora_rate_plan_charge.effective_end_date') }}    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendement_type                                   AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings,
      0                                                                 AS is_manual_charge

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN charge_to_order
      ON zuora_rate_plan_charge.rate_plan_charge_id = charge_to_order.rate_plan_charge_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      active_zuora_subscription.created_by_id                                               AS subscription_created_by_id,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      MD5(-1)                                                                               AS dim_order_id,
      {{ get_date_id('manual_charges_prep.effective_start_date') }}                         AS effective_start_date_id,
      {{ get_date_id('manual_charges_prep.effective_end_date') }}                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                                   AS estimated_total_future_billings,
      1                                                                                     AS is_manual_charge

    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id


), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

{{ dbt_audit(
    cte_ref="arr_analysis_framework",
    created_by="@iweeks",
    updated_by="@chrissharp",
    created_date="2021-04-28",
    updated_date="2023-06-13"
) }}2b:T5adb,

WITH map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), zuora_rate_plan AS (

    SELECT * 
    FROM "PREP".zuora.zuora_rate_plan_source

), zuora_rate_plan_charge AS (

    SELECT * 
    FROM "PREP".zuora.zuora_rate_plan_charge_source

), zuora_order_action_rate_plan AS (

    SELECT * 
    FROM "PREP".zuora_query_api.zuora_query_api_order_action_rate_plan_source

), zuora_order_action AS (

    SELECT * 
    FROM "PREP".zuora_order.zuora_order_action_source

), revenue_contract_line AS (

    SELECT * 
    FROM "PREP".zuora_revenue.zuora_revenue_revenue_contract_line_source

), zuora_order AS (

    SELECT * 
    FROM "PREP".zuora_order.zuora_order_source

)

, sfdc_account AS (

    SELECT *
    FROM "PREP".sfdc.sfdc_account_source
    WHERE account_id IS NOT NULL
    
), zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), active_zuora_subscription AS (

    SELECT *
    FROM zuora_subscription
    WHERE subscription_status IN ('Active', 'Cancelled')
  
), mje AS (

    SELECT 
      *,
      CASE 
        WHEN debit_activity_type = 'Revenue' AND  credit_activity_type = 'Contract Liability' 
          THEN -amount           
        WHEN credit_activity_type = 'Revenue' AND  debit_activity_type = 'Contract Liability' 
          THEN amount
        ELSE amount                                                                             
      END                                                                                       AS adjustment_amount
    FROM "PREP".zuora_revenue.zuora_revenue_manual_journal_entry_source

), true_up_lines_dates AS (
  
    SELECT 
      subscription_name,
      revenue_contract_line_attribute_16,
      MIN(revenue_start_date)               AS revenue_start_date,
      MAX(revenue_end_date)                 AS revenue_end_date
    FROM revenue_contract_line
    GROUP BY 1,2

), true_up_lines AS (

    SELECT 
      revenue_contract_line_id,
      revenue_contract_id,
      zuora_account.account_id                                  AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                 AS dim_crm_account_id,
      MD5(rate_plan_charge_id)                                  AS dim_charge_id,
      active_zuora_subscription.subscription_id                 AS dim_subscription_id,
      active_zuora_subscription.subscription_name               AS subscription_name,
      active_zuora_subscription.subscription_status             AS subscription_status,
      product_rate_plan_charge_id                               AS dim_product_detail_id,
      true_up_lines_dates.revenue_start_date                    AS revenue_start_date,
      true_up_lines_dates.revenue_end_date                      AS revenue_end_date,
      revenue_contract_line.revenue_contract_line_created_date  AS revenue_contract_line_created_date,
      revenue_contract_line.revenue_contract_line_updated_date  AS revenue_contract_line_updated_date
    FROM revenue_contract_line
    INNER JOIN active_zuora_subscription
      ON revenue_contract_line.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON revenue_contract_line.customer_number = zuora_account.account_number
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN true_up_lines_dates
      ON revenue_contract_line.subscription_name = true_up_lines_dates.subscription_name
        AND revenue_contract_line.revenue_contract_line_attribute_16 = true_up_lines_dates.revenue_contract_line_attribute_16
    WHERE revenue_contract_line.revenue_contract_line_attribute_16 LIKE '%True-up ARR Allocation%'
  
), mje_summed AS (
  
    SELECT
      mje.revenue_contract_line_id,
      SUM(adjustment_amount) AS adjustment
    FROM mje
    INNER JOIN true_up_lines
      ON mje.revenue_contract_line_id = true_up_lines.revenue_contract_line_id
        AND mje.revenue_contract_id = true_up_lines.revenue_contract_id
    group by 1

), true_up_lines_subcription_grain AS (
  
    SELECT
      lns.dim_billing_account_id,
      lns.dim_crm_account_id,
      lns.dim_charge_id,
      lns.dim_subscription_id,
      lns.subscription_name,
      lns.subscription_status,
      lns.dim_product_detail_id,
      MIN(lns.revenue_contract_line_created_date)   AS revenue_contract_line_created_date,
      MAX(lns.revenue_contract_line_updated_date)   AS revenue_contract_line_updated_date,
      SUM(mje.adjustment)                           AS adjustment,
      MIN(revenue_start_date)                       AS revenue_start_date,
      MAX(revenue_end_date)                         AS revenue_end_date
    FROM true_up_lines lns
    LEFT JOIN mje_summed mje
      ON lns.revenue_contract_line_id = mje.revenue_contract_line_id
    WHERE adjustment IS NOT NULL
      AND ABS(ROUND(adjustment,5)) > 0
    group by 1,2,3,4,5,6,7

), charge_to_order AS (

    SELECT 
      zuora_rate_plan_charge.rate_plan_charge_id,
      zuora_order_action.order_id
    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_order_action_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_order_action_rate_plan.rate_plan_id
    INNER JOIN zuora_order_action
      ON zuora_order_action_rate_plan.order_action_id = zuora_order_action.order_action_id
    group by 1,2

), non_manual_charges AS (

    SELECT
      --Natural Key
      zuora_subscription.subscription_name,
      zuora_subscription.subscription_name_slugify,
      zuora_subscription.version                                        AS subscription_version,
      zuora_subscription.created_by_id                                  AS subscription_created_by_id,
      zuora_rate_plan_charge.rate_plan_charge_number,
      zuora_rate_plan_charge.version                                    AS rate_plan_charge_version,
      zuora_rate_plan_charge.segment                                    AS rate_plan_charge_segment,

      --Surrogate Key
      zuora_rate_plan_charge.rate_plan_charge_id                        AS dim_charge_id,

      --Common Dimension Keys
      zuora_rate_plan_charge.product_rate_plan_charge_id                AS dim_product_detail_id,
      zuora_rate_plan.amendement_id                                     AS dim_amendment_id_charge,
      zuora_rate_plan.subscription_id                                   AS dim_subscription_id,
      zuora_rate_plan_charge.account_id                                 AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                         AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                           AS dim_parent_crm_account_id,
      charge_to_order.order_id                                          AS dim_order_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_start_date::DATE,'YYYYMMDD'),'99999999')

  AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(zuora_rate_plan_charge.effective_end_date::DATE,'YYYYMMDD'),'99999999')

    AS effective_end_date_id,

      --Information
      zuora_subscription.subscription_status                            AS subscription_status,
      zuora_rate_plan.rate_plan_name                                    AS rate_plan_name,
      zuora_rate_plan_charge.rate_plan_charge_name,
      zuora_rate_plan_charge.description                                AS rate_plan_charge_description,
      zuora_rate_plan_charge.is_last_segment,
      zuora_rate_plan_charge.discount_level,
      zuora_rate_plan_charge.charge_type,
      zuora_rate_plan.amendement_type                                   AS rate_plan_charge_amendement_type,
      zuora_rate_plan_charge.unit_of_measure,
      CASE
        WHEN DATE_TRUNC('month',zuora_rate_plan_charge.charged_through_date) = zuora_rate_plan_charge.effective_end_month::DATE
          THEN TRUE ELSE FALSE
      END                                                               AS is_paid_in_full,
      CASE
        WHEN charged_through_date IS NULL THEN zuora_subscription.current_term
        ELSE DATEDIFF('month',DATE_TRUNC('month', zuora_rate_plan_charge.charged_through_date::DATE), zuora_rate_plan_charge.effective_end_month::DATE)
      END                                                               AS months_of_future_billings,
      CASE
        WHEN effective_end_month > effective_start_month OR effective_end_month IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                               AS is_included_in_arr_calc,

      --Dates
      zuora_subscription.subscription_end_date                          AS subscription_end_date,
      zuora_rate_plan_charge.effective_start_date::DATE                 AS effective_start_date,
      zuora_rate_plan_charge.effective_end_date::DATE                   AS effective_end_date,
      zuora_rate_plan_charge.effective_start_month::DATE                AS effective_start_month,
      zuora_rate_plan_charge.effective_end_month::DATE                  AS effective_end_month,
      zuora_rate_plan_charge.charged_through_date::DATE                 AS charged_through_date,
      zuora_rate_plan_charge.created_date::DATE                         AS charge_created_date,
      zuora_rate_plan_charge.updated_date::DATE                         AS charge_updated_date,
      DATEDIFF(month, zuora_rate_plan_charge.effective_start_month::DATE, zuora_rate_plan_charge.effective_end_month::DATE)
                                                                        AS charge_term,

      --Additive Fields
      zuora_rate_plan_charge.mrr,
      LAG(zuora_rate_plan_charge.mrr,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                              ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_mrr_calc,
      CASE
        WHEN previous_mrr_calc IS NULL
          THEN 0 ELSE previous_mrr_calc
      END                                                               AS previous_mrr,
      zuora_rate_plan_charge.mrr - previous_mrr                         AS delta_mrr_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_mrr
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_mrr
        ELSE delta_mrr_calc
      END                                                               AS delta_mrr,
      zuora_rate_plan_charge.delta_mrc,
      zuora_rate_plan_charge.mrr * 12                                   AS arr,
      previous_mrr * 12                                                 AS previous_arr,
      zuora_rate_plan_charge.delta_mrc * 12                             AS delta_arc,
      delta_mrr * 12                                                    AS delta_arr,
      zuora_rate_plan_charge.quantity,
      LAG(zuora_rate_plan_charge.quantity,1) OVER (PARTITION BY zuora_subscription.subscription_name, zuora_rate_plan_charge.rate_plan_charge_number
                                                   ORDER BY zuora_rate_plan_charge.segment, zuora_subscription.version)
                                                                        AS previous_quantity_calc,
      CASE
        WHEN previous_quantity_calc IS NULL
          THEN 0 ELSE previous_quantity_calc
      END                                                               AS previous_quantity,
      zuora_rate_plan_charge.quantity - previous_quantity               AS delta_quantity_calc,
      CASE
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE AND is_last_segment = TRUE
          THEN -previous_quantity
        WHEN LOWER(subscription_status) = 'cancelled' AND is_last_segment = TRUE
          THEN -previous_quantity
        ELSE delta_quantity_calc
      END                                                               AS delta_quantity,
      zuora_rate_plan_charge.tcv,
      zuora_rate_plan_charge.delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * zuora_rate_plan_charge.mrr
        ELSE 0
      END                                                               AS estimated_total_future_billings,
      0                                                                 AS is_manual_charge

    FROM zuora_rate_plan
    INNER JOIN zuora_rate_plan_charge
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id
    LEFT JOIN charge_to_order
      ON zuora_rate_plan_charge.rate_plan_charge_id = charge_to_order.rate_plan_charge_id

 ), manual_charges_prep AS (
  
    SELECT 
      dim_billing_account_id,
      dim_crm_account_id,
      dim_charge_id,
      dim_subscription_id,
      subscription_name,
      subscription_status,
      dim_product_detail_id,
      revenue_contract_line_created_date,
      revenue_contract_line_updated_date,
      adjustment/ROUND(MONTHS_BETWEEN(revenue_end_date::date, revenue_start_date::date),0)  AS mrr,
      NULL                                                                                  AS delta_tcv,
      'Seats'                                                                               AS unit_of_measure,
      0                                                                                     AS quantity,
      revenue_start_date::DATE                                                              AS effective_start_date,
      DATEADD('day',1,revenue_end_date::DATE)                                               AS effective_end_date
    FROM true_up_lines_subcription_grain

), manual_charges AS ( 

    SELECT
      active_zuora_subscription.subscription_name                                           AS subscription_name,
      active_zuora_subscription.subscription_name_slugify                                   AS subscription_name_slugify,
      active_zuora_subscription.version                                                     AS subscription_version,
      active_zuora_subscription.created_by_id                                               AS subscription_created_by_id,
      NULL                                                                                  AS rate_plan_charge_number,
      NULL                                                                                  AS rate_plan_charge_version,
      NULL                                                                                  AS rate_plan_charge_segment,
      manual_charges_prep.dim_charge_id                                                     AS dim_charge_id,
      manual_charges_prep.dim_product_detail_id                                             AS dim_product_detail_id,
      NULL                                                                                  AS dim_amendment_id_charge,
      active_zuora_subscription.subscription_id                                             AS dim_subscription_id,
      manual_charges_prep.dim_billing_account_id                                            AS dim_billing_account_id,
      zuora_account.crm_id                                                                  AS dim_crm_account_id,
      sfdc_account.ultimate_parent_account_id                                               AS dim_parent_crm_account_id,
      MD5(-1)                                                                               AS dim_order_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_start_date::DATE,'YYYYMMDD'),'99999999')

                         AS effective_start_date_id,
      

  TO_NUMBER(TO_CHAR(manual_charges_prep.effective_end_date::DATE,'YYYYMMDD'),'99999999')

                           AS effective_end_date_id,
      active_zuora_subscription.subscription_status                                         AS subscription_status,
      'manual true up allocation'                                                           AS rate_plan_name,
      'manual true up allocation'                                                           AS rate_plan_charge_name,
      'manual true up allocation'                                                           AS rate_plan_charge_description,
      'TRUE'                                                                                AS is_last_segment,
      NULL                                                                                  AS discount_level,
      'Recurring'                                                                           AS charge_type,
      NULL                                                                                  AS rate_plan_charge_amendement_type,
      manual_charges_prep.unit_of_measure                                                   AS unit_of_measure,
      'TRUE'                                                                                AS is_paid_in_full,
      active_zuora_subscription.current_term                                                AS months_of_future_billings,
      CASE
        WHEN DATE_TRUNC('month', effective_end_date) > DATE_TRUNC('month', effective_start_date) OR DATE_TRUNC('month', effective_end_date) IS NULL
          THEN TRUE
        ELSE FALSE
      END                                                                                   AS is_included_in_arr_calc,
      active_zuora_subscription.subscription_end_date                                       AS subscription_end_date,
      effective_start_date                                                                  AS effective_start_date,
      effective_end_date                                                                    AS effective_end_date,
      DATE_TRUNC('month', effective_start_date)                                             AS effective_start_month,
      DATE_TRUNC('month', effective_end_date)                                               AS effective_end_month,
      DATEADD('day',1,effective_end_date)                                                   AS charged_through_date,
      revenue_contract_line_created_date                                                    AS charge_created_date,
      revenue_contract_line_updated_date                                                    AS charge_updated_date,
      DATEDIFF('month', effective_start_month::DATE, effective_end_month::DATE)             AS charge_term,
      manual_charges_prep.mrr                                                               AS mrr,
      NULL                                                                                  AS previous_mrr_calc,
      NULL                                                                                  AS previous_mrr,
      NULL                                                                                  AS delta_mrr_calc,
      NULL                                                                                  AS delta_mrr,
      NULL                                                                                  AS delta_mrc,
      manual_charges_prep.mrr * 12                                                          AS arr,
      NULL                                                                                  AS previous_arr,
      NULL                                                                                  AS delta_arc,
      NULL                                                                                  AS delta_arr,
      0                                                                                     AS quantity,
      NULL                                                                                  AS previous_quantity_calc,
      NULL                                                                                  AS previous_quantity,
      NULL                                                                                  AS delta_quantity_calc,
      NULL                                                                                  AS delta_quantity,
      NULL                                                                                  AS tcv,
      NULL                                                                                  AS delta_tcv,
      CASE
        WHEN is_paid_in_full = FALSE THEN months_of_future_billings * manual_charges_prep.mrr
        ELSE 0
      END                                                                                   AS estimated_total_future_billings,
      1                                                                                     AS is_manual_charge

    FROM manual_charges_prep
    INNER JOIN active_zuora_subscription
      ON manual_charges_prep.subscription_name = active_zuora_subscription.subscription_name
    INNER JOIN zuora_account
      ON active_zuora_subscription.account_id = zuora_account.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN sfdc_account
      ON map_merged_crm_account.dim_crm_account_id = sfdc_account.account_id


), combined_charges AS (

    SELECT *
    FROM non_manual_charges

    UNION

    SELECT *
    FROM manual_charges

), arr_analysis_framework AS (

    SELECT
      combined_charges.*,
      CASE
        WHEN subscription_version = 1
          THEN 'New'
        WHEN LOWER(subscription_status) = 'active' AND subscription_end_date <= CURRENT_DATE
          THEN 'Churn'
        WHEN LOWER(subscription_status) = 'cancelled'
          THEN 'Churn'
        WHEN arr < previous_arr AND arr > 0
          THEN 'Contraction'
        WHEN arr > previous_arr AND subscription_version > 1
          THEN 'Expansion'
        WHEN arr = previous_arr
          THEN 'No Impact'
        ELSE NULL
      END                 AS type_of_arr_change
    FROM combined_charges

)

SELECT
      *,
      '@iweeks'::VARCHAR       AS created_by,
      '@chrissharp'::VARCHAR       AS updated_by,
      '2021-04-28'::DATE        AS model_created_date,
      '2023-06-13'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM arr_analysis_framework2c:T18aa,/* grain: one record per subscription per month */
{{ simple_cte([
    ('zuora_rate_plan', 'zuora_rate_plan_source'),
    ('map_merged_crm_account', 'map_merged_crm_account'),
    ('product_details', 'dim_product_detail'),
    ('dim_date', 'dim_date'),
]) }}

, zuora_account AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan_charge AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}
    WHERE charge_type = 'Recurring'

), zuora_subscription AS (

    SELECT *
    FROM {{ ref('zuora_subscription_source') }}
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), rate_plan_charge_filtered AS (

    SELECT
      zuora_account.account_id                                      AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                     AS dim_crm_account_id,
      zuora_subscription.subscription_id                            AS dim_subscription_id,
      zuora_subscription.original_id                                AS dim_subscription_id_original,
      zuora_subscription.subscription_status,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.unit_of_measure,
      zuora_rate_plan_charge.quantity,
      zuora_rate_plan_charge.effective_start_month,
      zuora_rate_plan_charge.effective_end_month,
      product_details.product_delivery_type
    FROM zuora_rate_plan_charge
    INNER JOIN zuora_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_account.account_id = zuora_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN product_details
      ON zuora_rate_plan_charge.product_rate_plan_charge_id = product_details.dim_product_detail_id

), mrr_by_delivery_type AS (

  SELECT
      dim_date.date_id                                                  AS dim_date_id,
      dim_date.first_day_of_month                                       AS charge_month,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_subscription_id,
      dim_subscription_id_original,
      subscription_status,
      product_delivery_type,
      unit_of_measure,
      {{ dbt_utils.surrogate_key(['dim_date_id',
                                  'dim_subscription_id',
                                  'product_delivery_type',
                                  'unit_of_measure']) }}                AS mrr_id,
      SUM(mrr)                                                          AS mrr,
      SUM(mrr) * 12                                                     AS arr,
      SUM(quantity)                                                     AS quantity
    FROM rate_plan_charge_filtered
    INNER JOIN dim_date
      ON rate_plan_charge_filtered.effective_start_month <= dim_date.date_actual
      AND (rate_plan_charge_filtered.effective_end_month > dim_date.date_actual
           OR rate_plan_charge_filtered.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    {{ dbt_utils.group_by(n=10) }}

), mrr_by_subscription AS (

  SELECT
      subscription.dim_billing_account_id,
      subscription.dim_crm_account_id,
      subscription.dim_subscription_id,
      subscription.dim_subscription_id_original,
      subscription.subscription_status,
      subscription.dim_date_id,
      subscription.charge_month,
      SUM(sm.mrr)                                                       AS sm_mrr,
      SUM(sm.arr)                                                       AS sm_arr,
      SUM(sm.quantity)                                                  AS sm_quantity,
      SUM(saas.mrr)                                                     AS saas_mrr,
      SUM(saas.arr)                                                     AS saas_arr,
      SUM(saas.quantity)                                                AS saas_quantity,
      SUM(other.mrr)                                                    AS other_mrr,
      SUM(other.arr)                                                    AS other_arr,
      SUM(other.quantity)                                               AS other_quantity,
      SUM(subscription.mrr)                                             AS total_mrr,
      SUM(subscription.arr)                                             AS total_arr,
      SUM(subscription.quantity)                                        AS total_quantity,
      ARRAY_AGG(subscription.product_delivery_type
                || ': '
                || subscription.unit_of_measure)
        WITHIN GROUP (ORDER BY subscription.product_delivery_type DESC) AS unit_of_measure
    FROM mrr_by_delivery_type subscription
    LEFT JOIN mrr_by_delivery_type sm
      ON sm.product_delivery_type = 'Self-Managed'
      AND subscription.mrr_id = sm.mrr_id
    LEFT JOIN mrr_by_delivery_type saas
      ON saas.product_delivery_type = 'SaaS'
      AND subscription.mrr_id = saas.mrr_id
    LEFT JOIN mrr_by_delivery_type other
      ON other.product_delivery_type = 'Others'
      AND subscription.mrr_id = other.mrr_id
    {{ dbt_utils.group_by(n=7) }}

), final AS (

    SELECT
      dim_subscription_id,
      dim_subscription_id_original,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_date_id,
      charge_month,
      subscription_status,
      unit_of_measure,
      total_mrr,
      total_arr,
      total_quantity,
      sm_mrr,
      sm_arr,
      sm_quantity,
      saas_mrr,
      saas_arr,
      saas_quantity,
      other_mrr,
      other_arr,
      other_quantity,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY dim_subscription_id
            ORDER BY dim_date_id DESC) = 1,
          TRUE, FALSE)                                                      AS is_latest_record_per_subscription
    FROM mrr_by_subscription

)

{{ dbt_audit(
    cte_ref="final",
    created_by="@ischweickartDD",
    updated_by="@iweeks",
    created_date="2021-03-01",
    updated_date="2021-07-29"
) }}2d:T1a62,/* grain: one record per subscription per month */


WITH zuora_rate_plan AS (

    SELECT * 
    FROM "PREP".zuora.zuora_rate_plan_source

), map_merged_crm_account AS (

    SELECT * 
    FROM "PROD".restricted_safe_common_mapping.map_merged_crm_account

), product_details AS (

    SELECT * 
    FROM "PROD".common.dim_product_detail

), dim_date AS (

    SELECT * 
    FROM "PROD".common.dim_date

)

, zuora_account AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE
    --Exclude Batch20 which are the test accounts. This method replaces the manual dbt seed exclusion file.
      AND LOWER(batch) != 'batch20'

), zuora_rate_plan_charge AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source
    WHERE charge_type = 'Recurring'

), zuora_subscription AS (

    SELECT *
    FROM "PREP".zuora.zuora_subscription_source
    WHERE is_deleted = FALSE
      AND exclude_from_analysis IN ('False', '')

), rate_plan_charge_filtered AS (

    SELECT
      zuora_account.account_id                                      AS dim_billing_account_id,
      map_merged_crm_account.dim_crm_account_id                     AS dim_crm_account_id,
      zuora_subscription.subscription_id                            AS dim_subscription_id,
      zuora_subscription.original_id                                AS dim_subscription_id_original,
      zuora_subscription.subscription_status,
      zuora_rate_plan_charge.mrr,
      zuora_rate_plan_charge.unit_of_measure,
      zuora_rate_plan_charge.quantity,
      zuora_rate_plan_charge.effective_start_month,
      zuora_rate_plan_charge.effective_end_month,
      product_details.product_delivery_type
    FROM zuora_rate_plan_charge
    INNER JOIN zuora_rate_plan
      ON zuora_rate_plan.rate_plan_id = zuora_rate_plan_charge.rate_plan_id
    INNER JOIN zuora_subscription
      ON zuora_rate_plan.subscription_id = zuora_subscription.subscription_id
    INNER JOIN zuora_account
      ON zuora_account.account_id = zuora_subscription.account_id
    LEFT JOIN map_merged_crm_account
      ON zuora_account.crm_id = map_merged_crm_account.sfdc_account_id
    LEFT JOIN product_details
      ON zuora_rate_plan_charge.product_rate_plan_charge_id = product_details.dim_product_detail_id

), mrr_by_delivery_type AS (

  SELECT
      dim_date.date_id                                                  AS dim_date_id,
      dim_date.first_day_of_month                                       AS charge_month,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_subscription_id,
      dim_subscription_id_original,
      subscription_status,
      product_delivery_type,
      unit_of_measure,
      md5(cast(coalesce(cast(dim_date_id as 
    varchar
), '') || '-' || coalesce(cast(dim_subscription_id as 
    varchar
), '') || '-' || coalesce(cast(product_delivery_type as 
    varchar
), '') || '-' || coalesce(cast(unit_of_measure as 
    varchar
), '') as 
    varchar
))                AS mrr_id,
      SUM(mrr)                                                          AS mrr,
      SUM(mrr) * 12                                                     AS arr,
      SUM(quantity)                                                     AS quantity
    FROM rate_plan_charge_filtered
    INNER JOIN dim_date
      ON rate_plan_charge_filtered.effective_start_month <= dim_date.date_actual
      AND (rate_plan_charge_filtered.effective_end_month > dim_date.date_actual
           OR rate_plan_charge_filtered.effective_end_month IS NULL)
      AND dim_date.day_of_month = 1
    group by 1,2,3,4,5,6,7,8,9,10

), mrr_by_subscription AS (

  SELECT
      subscription.dim_billing_account_id,
      subscription.dim_crm_account_id,
      subscription.dim_subscription_id,
      subscription.dim_subscription_id_original,
      subscription.subscription_status,
      subscription.dim_date_id,
      subscription.charge_month,
      SUM(sm.mrr)                                                       AS sm_mrr,
      SUM(sm.arr)                                                       AS sm_arr,
      SUM(sm.quantity)                                                  AS sm_quantity,
      SUM(saas.mrr)                                                     AS saas_mrr,
      SUM(saas.arr)                                                     AS saas_arr,
      SUM(saas.quantity)                                                AS saas_quantity,
      SUM(other.mrr)                                                    AS other_mrr,
      SUM(other.arr)                                                    AS other_arr,
      SUM(other.quantity)                                               AS other_quantity,
      SUM(subscription.mrr)                                             AS total_mrr,
      SUM(subscription.arr)                                             AS total_arr,
      SUM(subscription.quantity)                                        AS total_quantity,
      ARRAY_AGG(subscription.product_delivery_type
                || ': '
                || subscription.unit_of_measure)
        WITHIN GROUP (ORDER BY subscription.product_delivery_type DESC) AS unit_of_measure
    FROM mrr_by_delivery_type subscription
    LEFT JOIN mrr_by_delivery_type sm
      ON sm.product_delivery_type = 'Self-Managed'
      AND subscription.mrr_id = sm.mrr_id
    LEFT JOIN mrr_by_delivery_type saas
      ON saas.product_delivery_type = 'SaaS'
      AND subscription.mrr_id = saas.mrr_id
    LEFT JOIN mrr_by_delivery_type other
      ON other.product_delivery_type = 'Others'
      AND subscription.mrr_id = other.mrr_id
    group by 1,2,3,4,5,6,7

), final AS (

    SELECT
      dim_subscription_id,
      dim_subscription_id_original,
      dim_billing_account_id,
      dim_crm_account_id,
      dim_date_id,
      charge_month,
      subscription_status,
      unit_of_measure,
      total_mrr,
      total_arr,
      total_quantity,
      sm_mrr,
      sm_arr,
      sm_quantity,
      saas_mrr,
      saas_arr,
      saas_quantity,
      other_mrr,
      other_arr,
      other_quantity,
      IFF(ROW_NUMBER() OVER (
            PARTITION BY dim_subscription_id
            ORDER BY dim_date_id DESC) = 1,
          TRUE, FALSE)                                                      AS is_latest_record_per_subscription
    FROM mrr_by_subscription

)

SELECT
      *,
      '@ischweickartDD'::VARCHAR       AS created_by,
      '@iweeks'::VARCHAR       AS updated_by,
      '2021-03-01'::DATE        AS model_created_date,
      '2021-07-29'::DATE        AS model_updated_date,
      CURRENT_TIMESTAMP()               AS dbt_updated_at,

    

        

            CURRENT_TIMESTAMP()               AS dbt_created_at

        
    
    

    FROM final2e:T199d,WITH date_table AS (

    SELECT *
    FROM {{ ref('date_details') }}
    WHERE day_of_month = 1

), sfdc_accounts AS (

    SELECT *
    FROM {{ ref('sfdc_accounts_xf') }}

), sfdc_deleted_accounts AS (

    SELECT *
    FROM {{ ref('sfdc_deleted_accounts') }}

), zuora_accounts AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}
    WHERE is_deleted = FALSE

), zuora_invoices AS (

    SELECT *
    FROM {{ ref('zuora_invoice_charges') }}

), zuora_product AS (

    SELECT *
    FROM {{ ref('zuora_product_source') }}
    WHERE is_deleted = FALSE

), zuora_product_rp AS (

    SELECT *
    FROM {{ ref('zuora_product_rate_plan_source') }}
    WHERE is_deleted = FALSE

), zuora_product_rpc AS (

    SELECT *
    FROM {{ ref('zuora_product_rate_plan_charge_source') }}

), zuora_product_rpct AS (

    SELECT *
    FROM {{ ref('zuora_product_rate_plan_charge_tier_source') }}

), initial_join_to_sfdc AS (

  SELECT
    invoice_number,
    invoice_item_id,
    zuora_accounts.crm_id                                AS invoice_crm_id,
    sfdc_accounts.account_id                             AS sfdc_account_id_int,
    zuora_accounts.account_name,
    invoice_date,
    DATE_TRUNC('month',invoice_date)                     AS invoice_month,
    product_name,
    product_rate_plan_charge_id,
    {{ product_category('rate_plan_name') }},
    rate_plan_name,
    charge_type,
    invoice_item_unit_price,
    quantity                                             AS quantity,
    invoice_item_charge_amount                           AS invoice_item_charge_amount
  FROM zuora_invoices
  LEFT JOIN zuora_accounts
    ON zuora_invoices.invoice_account_id = zuora_accounts.account_id
  LEFT JOIN sfdc_accounts
    ON zuora_accounts.crm_id = sfdc_accounts.account_id
  WHERE invoice_item_charge_amount != 0

), replace_sfdc_account_id_with_master_record_id AS (

    SELECT
      COALESCE(initial_join_to_sfdc.sfdc_account_id_int, sfdc_master_record_id) AS sfdc_account_id,
      initial_join_to_sfdc.*
    FROM initial_join_to_sfdc
    LEFT JOIN sfdc_deleted_accounts
      ON initial_join_to_sfdc.invoice_crm_id = sfdc_deleted_accounts.sfdc_account_id

), joined AS (

    SELECT
      invoice_number,
      invoice_item_id,
      sfdc_account_id,
      CASE
        WHEN ultimate_parent_account_segment = 'Unknown' THEN 'SMB'
        WHEN ultimate_parent_account_segment = '' THEN 'SMB'
        ELSE ultimate_parent_account_segment
      END                                     AS ultimate_parent_segment,
      replace_account_id.account_name,
      invoice_date,
      invoice_month,
      product_name,
      product_rate_plan_charge_id,
      product_category,
      account_type,
      rate_plan_name,
      charge_type,
      invoice_item_unit_price,
      quantity                                AS quantity,
      invoice_item_charge_amount              AS invoice_item_charge_amount
    FROM replace_sfdc_account_id_with_master_record_id replace_account_id
    LEFT JOIN sfdc_accounts
      ON replace_account_id.sfdc_account_id = sfdc_accounts.account_id

), list_price AS (

  SELECT
    zuora_product_rp.product_rate_plan_name,
    zuora_product_rpc.product_rate_plan_charge_name,
    zuora_product_rpc.product_rate_plan_charge_id,
    MIN(zuora_product_rpct.price)             AS billing_list_price
  FROM zuora_product
  INNER JOIN zuora_product_rp
    ON zuora_product.product_id = zuora_product_rp.product_id
  INNER JOIN zuora_product_rpc
    ON zuora_product_rp.product_rate_plan_id = zuora_product_rpc.product_rate_plan_id
  INNER JOIN zuora_product_rpct
    ON zuora_product_rpc.product_rate_plan_charge_id = zuora_product_rpct.product_rate_plan_charge_id
  WHERE zuora_product.effective_start_date <= CURRENT_DATE
    AND zuora_product_rpct.currency = 'USD'
  GROUP BY 1,2,3
  ORDER BY 1,2

)

SELECT
  joined.invoice_number,
  joined.invoice_item_id,
  sfdc_account_id,
  account_name,
  account_type,
  invoice_date,
  joined.product_name,
  joined.rate_plan_name,
  quantity,
  invoice_item_unit_price,
  invoice_item_charge_amount,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (invoice_item_unit_price * 12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (invoice_item_unit_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (invoice_item_unit_price/5)
    ELSE invoice_item_unit_price
  END                                           AS annual_price,
  quantity * annual_price                       AS quantity_times_annual,
  ultimate_parent_segment,
  product_category,
  invoice_month,
  fiscal_quarter_name_fy                        AS fiscal_period,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (billing_list_price*12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (billing_list_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (billing_list_price/5)
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE billing_list_price
  END                                           AS list_price,
  CASE
    WHEN annual_price = list_price THEN 0
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE ((annual_price - list_price)/NULLIF(list_price,0)) * -1
  END                                           AS discount,
  CASE
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE quantity * list_price
  END                                           AS list_price_times_quantity
FROM joined
LEFT JOIN list_price
  ON joined.product_rate_plan_charge_id = list_price.product_rate_plan_charge_id
LEFT JOIN date_table
  ON joined.invoice_month = date_table.date_actual
ORDER BY invoice_date, invoice_number2f:T2c26,WITH date_table AS (

    SELECT *
    FROM "PROD".legacy.date_details
    WHERE day_of_month = 1

), sfdc_accounts AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.sfdc_accounts_xf

), sfdc_deleted_accounts AS (

    SELECT *
    FROM "PROD".legacy.sfdc_deleted_accounts

), zuora_accounts AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source
    WHERE is_deleted = FALSE

), zuora_invoices AS (

    SELECT *
    FROM "PROD".restricted_safe_legacy.zuora_invoice_charges

), zuora_product AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_source
    WHERE is_deleted = FALSE

), zuora_product_rp AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_rate_plan_source
    WHERE is_deleted = FALSE

), zuora_product_rpc AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_rate_plan_charge_source

), zuora_product_rpct AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_rate_plan_charge_tier_source

), initial_join_to_sfdc AS (

  SELECT
    invoice_number,
    invoice_item_id,
    zuora_accounts.crm_id                                AS invoice_crm_id,
    sfdc_accounts.account_id                             AS sfdc_account_id_int,
    zuora_accounts.account_name,
    invoice_date,
    DATE_TRUNC('month',invoice_date)                     AS invoice_month,
    product_name,
    product_rate_plan_charge_id,
    CASE
  WHEN LOWER(rate_plan_name) LIKE '%gold%'
    THEN 'SaaS - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%silver%'
    THEN 'SaaS - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%dedicated - ultimate%'
    THEN 'Dedicated - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%ultimate%'
    THEN 'Self-Managed - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%premium%'
    THEN 'Self-Managed - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%bronze%'
    THEN 'SaaS - Bronze'
  WHEN LOWER(rate_plan_name) LIKE '%starter%'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab enterprise edition%'
    THEN 'Self-Managed - Starter'
  WHEN rate_plan_name = 'Pivotal Cloud Foundry Tile for GitLab EE'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'plus%'
    THEN 'Plus'
  WHEN LOWER(rate_plan_name) LIKE 'standard%'
    THEN 'Standard'
  WHEN LOWER(rate_plan_name) LIKE 'basic%'
    THEN 'Basic'
  WHEN rate_plan_name = 'Trueup'
    THEN 'Trueup'
  WHEN LTRIM(LOWER(rate_plan_name)) LIKE 'githost%'
    THEN 'GitHost'
  WHEN LOWER(rate_plan_name) LIKE ANY ('%quick start with ha%', '%proserv training per-seat add-on%')
    THEN 'Support'
  WHEN TRIM(rate_plan_name) IN (
                                      'GitLab Service Package'
                                    , 'Implementation Services Quick Start'
                                    , 'Implementation Support'
                                    , 'Support Package'
                                    , 'Admin Training'
                                    , 'CI/CD Training'
                                    , 'GitLab Project Management Training'
                                    , 'GitLab with Git Basics Training'
                                    , 'Travel Expenses'
                                    , 'Training Workshop'
                                    , 'GitLab for Project Managers Training - Remote'
                                    , 'GitLab with Git Basics Training - Remote'
                                    , 'GitLab for System Administrators Training - Remote'
                                    , 'GitLab CI/CD Training - Remote'
                                    , 'InnerSourcing Training - Remote for your team'
                                    , 'GitLab DevOps Fundamentals Training'
                                    , 'Self-Managed Rapid Results Consulting'
                                    , 'Gitlab.com Rapid Results Consulting'
                                    , 'GitLab Security Essentials Training - Remote Delivery'
                                    , 'InnerSourcing Training - At your site'
                                    , 'Migration+'
                                    , 'One Time Discount'
                                    , 'LDAP Integration'
                                    , 'Dedicated Implementation Services'
                                    , 'Quick Start without HA, less than 500 users'
                                    , 'Jenkins Integration'
                                    , 'Hourly Consulting'
                                    , 'JIRA Integration'
                                    , 'Custom PS Education Services'
                                    , 'Dedicated Engineer - 3 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 12 Month'
                                    , 'Dedicated Engineer - 3 Month'
                                    , 'Dedicated Engineer - 6 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 6 Month'
                                    , 'GitLab System Administration Training - Remote'
                                    , 'Expert Services (48 Hours)'
                                    )
    THEN 'Support'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab geo%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'ci runner%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'discount%'
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      '#movingtogitlab'
                                    , 'Payment Gateway Test'
                                    , 'EdCast Settlement Revenue'
                                    , 'GitLab Certification Exam'
                                    )
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      'File Locking'
                                    , 'Time Tracking'
                                    , '1,000 CI Minutes'
                                    )
    THEN 'SaaS - Other'
  WHEN TRIM(rate_plan_name) IN ('Gitlab Storage 10GB')
    THEN 'Storage'
  ELSE 'Not Applicable'
END AS product_category,
    rate_plan_name,
    charge_type,
    invoice_item_unit_price,
    quantity                                             AS quantity,
    invoice_item_charge_amount                           AS invoice_item_charge_amount
  FROM zuora_invoices
  LEFT JOIN zuora_accounts
    ON zuora_invoices.invoice_account_id = zuora_accounts.account_id
  LEFT JOIN sfdc_accounts
    ON zuora_accounts.crm_id = sfdc_accounts.account_id
  WHERE invoice_item_charge_amount != 0

), replace_sfdc_account_id_with_master_record_id AS (

    SELECT
      COALESCE(initial_join_to_sfdc.sfdc_account_id_int, sfdc_master_record_id) AS sfdc_account_id,
      initial_join_to_sfdc.*
    FROM initial_join_to_sfdc
    LEFT JOIN sfdc_deleted_accounts
      ON initial_join_to_sfdc.invoice_crm_id = sfdc_deleted_accounts.sfdc_account_id

), joined AS (

    SELECT
      invoice_number,
      invoice_item_id,
      sfdc_account_id,
      CASE
        WHEN ultimate_parent_account_segment = 'Unknown' THEN 'SMB'
        WHEN ultimate_parent_account_segment = '' THEN 'SMB'
        ELSE ultimate_parent_account_segment
      END                                     AS ultimate_parent_segment,
      replace_account_id.account_name,
      invoice_date,
      invoice_month,
      product_name,
      product_rate_plan_charge_id,
      product_category,
      account_type,
      rate_plan_name,
      charge_type,
      invoice_item_unit_price,
      quantity                                AS quantity,
      invoice_item_charge_amount              AS invoice_item_charge_amount
    FROM replace_sfdc_account_id_with_master_record_id replace_account_id
    LEFT JOIN sfdc_accounts
      ON replace_account_id.sfdc_account_id = sfdc_accounts.account_id

), list_price AS (

  SELECT
    zuora_product_rp.product_rate_plan_name,
    zuora_product_rpc.product_rate_plan_charge_name,
    zuora_product_rpc.product_rate_plan_charge_id,
    MIN(zuora_product_rpct.price)             AS billing_list_price
  FROM zuora_product
  INNER JOIN zuora_product_rp
    ON zuora_product.product_id = zuora_product_rp.product_id
  INNER JOIN zuora_product_rpc
    ON zuora_product_rp.product_rate_plan_id = zuora_product_rpc.product_rate_plan_id
  INNER JOIN zuora_product_rpct
    ON zuora_product_rpc.product_rate_plan_charge_id = zuora_product_rpct.product_rate_plan_charge_id
  WHERE zuora_product.effective_start_date <= CURRENT_DATE
    AND zuora_product_rpct.currency = 'USD'
  GROUP BY 1,2,3
  ORDER BY 1,2

)

SELECT
  joined.invoice_number,
  joined.invoice_item_id,
  sfdc_account_id,
  account_name,
  account_type,
  invoice_date,
  joined.product_name,
  joined.rate_plan_name,
  quantity,
  invoice_item_unit_price,
  invoice_item_charge_amount,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (invoice_item_unit_price * 12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (invoice_item_unit_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (invoice_item_unit_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (invoice_item_unit_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (invoice_item_unit_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (invoice_item_unit_price/5)
    ELSE invoice_item_unit_price
  END                                           AS annual_price,
  quantity * annual_price                       AS quantity_times_annual,
  ultimate_parent_segment,
  product_category,
  invoice_month,
  fiscal_quarter_name_fy                        AS fiscal_period,
  CASE
    WHEN LOWER(rate_plan_name) LIKE '%month%'   THEN (billing_list_price*12)
    WHEN LOWER(rate_plan_name) LIKE '%2 years%' THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%2 year%'  THEN (billing_list_price/2)
    WHEN LOWER(rate_plan_name) LIKE '%3 years%' THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%3 year%'  THEN (billing_list_price/3)
    WHEN LOWER(rate_plan_name) LIKE '%4 years%' THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%4 year%'  THEN (billing_list_price/4)
    WHEN LOWER(rate_plan_name) LIKE '%5 years%' THEN (billing_list_price/5)
    WHEN LOWER(rate_plan_name) LIKE '%5 year%'  THEN (billing_list_price/5)
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE billing_list_price
  END                                           AS list_price,
  CASE
    WHEN annual_price = list_price THEN 0
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE ((annual_price - list_price)/NULLIF(list_price,0)) * -1
  END                                           AS discount,
  CASE
    WHEN LOWER(charge_type) != 'recurring' THEN 0
    ELSE quantity * list_price
  END                                           AS list_price_times_quantity
FROM joined
LEFT JOIN list_price
  ON joined.product_rate_plan_charge_id = list_price.product_rate_plan_charge_id
LEFT JOIN date_table
  ON joined.invoice_month = date_table.date_actual
ORDER BY invoice_date, invoice_number30:T79c,WITH date_table AS (

    SELECT *
    FROM {{ ref('date_details') }}

), zuora_accts AS (

    SELECT *
    FROM {{ ref('zuora_account_source') }}

), zuora_acct_period AS (

    SELECT *
    FROM {{ ref('zuora_accounting_period_source') }}

), zuora_contact AS (

    SELECT *
    FROM {{ ref('zuora_contact_source') }}

), zuora_product AS (

    SELECT *
    FROM {{ ref('zuora_product_source') }}

), zuora_rev_sch AS (

    SELECT *
    FROM {{ ref('zuora_revenue_schedule_item_source') }}

), zuora_rp AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_source') }}

), zuora_rpc AS (

    SELECT *
    FROM {{ ref('zuora_rate_plan_charge_source') }}

), non_gaap_revenue AS (

    SELECT
      zuora_acct_period.accounting_period_start_date::DATE    AS accounting_period,

      -- account info
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --rate_plan info
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      {{ product_category('rate_plan_name') }},
      {{ delivery('product_category')}},
      zuora_product.product_name,
      SUM(zuora_rev_sch.revenue_schedule_item_amount)         AS revenue_amt
    FROM zuora_rev_sch
    INNER JOIN zuora_accts
      ON zuora_rev_sch.account_id = zuora_accts.account_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    INNER JOIN zuora_rpc
      ON zuora_rev_sch.rate_plan_charge_id = zuora_rpc.rate_plan_charge_id
    INNER JOIN zuora_rp
      ON zuora_rp.rate_plan_id = zuora_rpc.rate_plan_id
    INNER JOIN zuora_acct_period
      ON zuora_acct_period.accounting_period_id = zuora_rev_sch.accounting_period_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rev_sch.product_id
    {{ dbt_utils.group_by(n=11) }}

)

SELECT *
FROM non_gaap_revenue31:T1bcb,WITH date_table AS (

    SELECT *
    FROM "PROD".legacy.date_details

), zuora_accts AS (

    SELECT *
    FROM "PREP".zuora.zuora_account_source

), zuora_acct_period AS (

    SELECT *
    FROM "PREP".zuora.zuora_accounting_period_source

), zuora_contact AS (

    SELECT *
    FROM "PREP".zuora.zuora_contact_source

), zuora_product AS (

    SELECT *
    FROM "PREP".zuora.zuora_product_source

), zuora_rev_sch AS (

    SELECT *
    FROM "PREP".zuora.zuora_revenue_schedule_item_source

), zuora_rp AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_source

), zuora_rpc AS (

    SELECT *
    FROM "PREP".zuora.zuora_rate_plan_charge_source

), non_gaap_revenue AS (

    SELECT
      zuora_acct_period.accounting_period_start_date::DATE    AS accounting_period,

      -- account info
      zuora_accts.account_name,
      zuora_accts.account_number,
      zuora_accts.crm_id,
      zuora_contact.country,
      zuora_accts.currency,

      --rate_plan info
      zuora_rp.rate_plan_name,
      zuora_rpc.rate_plan_charge_name,
      CASE
  WHEN LOWER(rate_plan_name) LIKE '%gold%'
    THEN 'SaaS - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%silver%'
    THEN 'SaaS - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%dedicated - ultimate%'
    THEN 'Dedicated - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%ultimate%'
    THEN 'Self-Managed - Ultimate'
  WHEN LOWER(rate_plan_name) LIKE '%premium%'
    THEN 'Self-Managed - Premium'
  WHEN LOWER(rate_plan_name) LIKE '%bronze%'
    THEN 'SaaS - Bronze'
  WHEN LOWER(rate_plan_name) LIKE '%starter%'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab enterprise edition%'
    THEN 'Self-Managed - Starter'
  WHEN rate_plan_name = 'Pivotal Cloud Foundry Tile for GitLab EE'
    THEN 'Self-Managed - Starter'
  WHEN LOWER(rate_plan_name) LIKE 'plus%'
    THEN 'Plus'
  WHEN LOWER(rate_plan_name) LIKE 'standard%'
    THEN 'Standard'
  WHEN LOWER(rate_plan_name) LIKE 'basic%'
    THEN 'Basic'
  WHEN rate_plan_name = 'Trueup'
    THEN 'Trueup'
  WHEN LTRIM(LOWER(rate_plan_name)) LIKE 'githost%'
    THEN 'GitHost'
  WHEN LOWER(rate_plan_name) LIKE ANY ('%quick start with ha%', '%proserv training per-seat add-on%')
    THEN 'Support'
  WHEN TRIM(rate_plan_name) IN (
                                      'GitLab Service Package'
                                    , 'Implementation Services Quick Start'
                                    , 'Implementation Support'
                                    , 'Support Package'
                                    , 'Admin Training'
                                    , 'CI/CD Training'
                                    , 'GitLab Project Management Training'
                                    , 'GitLab with Git Basics Training'
                                    , 'Travel Expenses'
                                    , 'Training Workshop'
                                    , 'GitLab for Project Managers Training - Remote'
                                    , 'GitLab with Git Basics Training - Remote'
                                    , 'GitLab for System Administrators Training - Remote'
                                    , 'GitLab CI/CD Training - Remote'
                                    , 'InnerSourcing Training - Remote for your team'
                                    , 'GitLab DevOps Fundamentals Training'
                                    , 'Self-Managed Rapid Results Consulting'
                                    , 'Gitlab.com Rapid Results Consulting'
                                    , 'GitLab Security Essentials Training - Remote Delivery'
                                    , 'InnerSourcing Training - At your site'
                                    , 'Migration+'
                                    , 'One Time Discount'
                                    , 'LDAP Integration'
                                    , 'Dedicated Implementation Services'
                                    , 'Quick Start without HA, less than 500 users'
                                    , 'Jenkins Integration'
                                    , 'Hourly Consulting'
                                    , 'JIRA Integration'
                                    , 'Custom PS Education Services'
                                    , 'Dedicated Engineer - 3 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 12 Month'
                                    , 'Dedicated Engineer - 3 Month'
                                    , 'Dedicated Engineer - 6 Month (w/ Security Clearance)'
                                    , 'Dedicated Engineer - 6 Month'
                                    , 'GitLab System Administration Training - Remote'
                                    , 'Expert Services (48 Hours)'
                                    )
    THEN 'Support'
  WHEN LOWER(rate_plan_name) LIKE 'gitlab geo%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'ci runner%'
    THEN 'SaaS - Other'
  WHEN LOWER(rate_plan_name) LIKE 'discount%'
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      '#movingtogitlab'
                                    , 'Payment Gateway Test'
                                    , 'EdCast Settlement Revenue'
                                    , 'GitLab Certification Exam'
                                    )
    THEN 'Other'
  WHEN TRIM(rate_plan_name) IN (
                                      'File Locking'
                                    , 'Time Tracking'
                                    , '1,000 CI Minutes'
                                    )
    THEN 'SaaS - Other'
  WHEN TRIM(rate_plan_name) IN ('Gitlab Storage 10GB')
    THEN 'Storage'
  ELSE 'Not Applicable'
END AS product_category,
      CASE 
  WHEN LOWER(product_category) LIKE ANY ('%saas%', 'storage', 'standard', 'basic', 'plus', 'githost', '%dedicated - ultimate%')
    THEN 'SaaS'
  WHEN LOWER(product_category) LIKE '%self-managed%'
    THEN 'Self-Managed'
  WHEN product_category IN (
                                        'Other'
                                      , 'Support'
                                      , 'Trueup'
                                      )
    THEN 'Others'
  ELSE NULL
END AS delivery,
      zuora_product.product_name,
      SUM(zuora_rev_sch.revenue_schedule_item_amount)         AS revenue_amt
    FROM zuora_rev_sch
    INNER JOIN zuora_accts
      ON zuora_rev_sch.account_id = zuora_accts.account_id
    LEFT JOIN zuora_contact
      ON COALESCE(zuora_accts.sold_to_contact_id ,zuora_accts.bill_to_contact_id) = zuora_contact.contact_id
    INNER JOIN zuora_rpc
      ON zuora_rev_sch.rate_plan_charge_id = zuora_rpc.rate_plan_charge_id
    INNER JOIN zuora_rp
      ON zuora_rp.rate_plan_id = zuora_rpc.rate_plan_id
    INNER JOIN zuora_acct_period
      ON zuora_acct_period.accounting_period_id = zuora_rev_sch.accounting_period_id
    LEFT JOIN zuora_product
      ON zuora_product.product_id = zuora_rev_sch.product_id
    group by 1,2,3,4,5,6,7,8,9,10,11

)

SELECT *
FROM non_gaap_revenue33:Te2f,{{ config({
    "alias": "zuora_account_source"
}) }}

-- depends_on: {{ ref('zuora_excluded_accounts') }}
WITH source AS (

    SELECT *
    FROM {{ source('zuora', 'account') }}

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("{{this.database}}".{{target.schema}}.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamed34:Tde2,

-- depends_on: "PROD".legacy.zuora_excluded_accounts
WITH source AS (

    SELECT *
    FROM "RAW".zuora_stitch.account

), renamed AS(

    SELECT
      id                                                     AS account_id,
      -- keys
      communicationprofileid                                 AS communication_profile_id,
      nullif("PREP".preparation.id15to18(crmid), '')          AS crm_id,
      defaultpaymentmethodid                                 AS default_payment_method_id,
      invoicetemplateid                                      AS invoice_template_id,
      parentid                                               AS parent_id,
      soldtocontactid                                        AS sold_to_contact_id,
      billtocontactid                                        AS bill_to_contact_id,
      taxexemptcertificateid                                 AS tax_exempt_certificate_id,
      taxexemptcertificatetype                               AS tax_exempt_certificate_type,

      -- account info
      accountnumber                                          AS account_number,
      name                                                   AS account_name,
      notes                                                  AS account_notes,
      purchaseordernumber                                    AS purchase_order_number,
      accountcode__c                                         AS sfdc_account_code,
      status,
      entity__c                                              AS sfdc_entity,

      autopay                                                AS auto_pay,
      balance                                                AS balance,
      creditbalance                                          AS credit_balance,
      billcycleday                                           AS bill_cycle_day,
      currency                                               AS currency,
      conversionrate__c                                      AS sfdc_conversion_rate,
      paymentterm                                            AS payment_term,

      allowinvoiceedit                                       AS allow_invoice_edit,
      batch,
      invoicedeliveryprefsemail                              AS invoice_delivery_prefs_email,
      invoicedeliveryprefsprint                              AS invoice_delivery_prefs_print,
      paymentgateway                                         AS payment_gateway,

      customerservicerepname                                 AS customer_service_rep_name,
      salesrepname                                           AS sales_rep_name,
      additionalemailaddresses                               AS additional_email_addresses,
      --billtocontact                   as bill_to_contact,
      parent__c                                              AS sfdc_parent,

      sspchannel__c                                          AS ssp_channel,
      porequired__c                                          AS po_required,

      -- financial info
      lastinvoicedate                                        AS last_invoice_date,

      -- metadata
      createdbyid                                            AS created_by_id,
      createddate                                            AS created_date,
      updatedbyid                                            AS updated_by_id,
      updateddate                                            AS updated_date,
      deleted                                                AS is_deleted

    FROM source

)

SELECT *
FROM renamedc:["$","div",null,{"className":"app-scroll","children":[["$","$Le",null,{"uniqueId":"model.gitlab_snowflake.zuora_account_source"}],["$","div",null,{"className":"app-links app-sticky","children":[["$","div",null,{"className":"app-title","children":["$","div",null,{"className":"app-frame app-pad app-flush-bottom","children":[null,["$","h1",null,{"children":[["$","span",null,{"className":"break","children":"zuora_account_source"}],["$","small",null,{"children":"view"}]]}]]}]}],["$","div",null,{"className":"app-frame app-pad-h","children":["$","ul",null,{"className":"nav nav-tabs","children":[["$","li",null,{"children":["$","a",null,{"href":"#details","children":"Details"}]}],["$","li",null,{"children":["$","a",null,{"href":"#description","children":"Description"}]}],["$","li",null,{"children":["$","a",null,{"href":"#columns","children":"Columns"}]}],["$","li",null,{"children":["$","a",null,{"href":"#referenced_by","children":"Referenced By"}]}],["$","li",null,{"children":["$","a",null,{"href":"#depends_on","children":"Depends On"}]}],["$","li",null,{"children":["$","a",null,{"href":"#code","children":"Code"}]}]]}]}]]}],["$","div",null,{"className":"app-details","children":["$","div",null,{"className":"app-frame app-pad","children":[["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"details"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Details"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"details","children":["$","div",null,{"className":"details-content","children":[null,["$","div",null,{"className":"detail-group","children":["$","div",null,{"className":"detail-body","children":[["$","dl",null,{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Tags"}],["$","dd",null,{"className":"detail-value","children":[["$","span","sources",{"children":[["$","code",null,{"children":["$","a",null,{"children":"sources"}]}],"Â "]}],["$","span","zuora",{"children":[["$","code",null,{"children":["$","a",null,{"children":"zuora"}]}],"Â "]}]]}],null]}],[["$","dl","Owner",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Owner"}],["$","dd",null,{"className":"detail-value","children":"TRANSFORMER"}]]}],["$","dl","Type",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Type"}],["$","dd",null,{"className":"detail-value","children":"view"}]]}],["$","dl","Package",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Package"}],["$","dd",null,{"className":"detail-value","children":"gitlab_snowflake"}]]}],["$","dl","Relation",{"className":"detail","children":[["$","dt",null,{"className":"detail-label","children":"Relation"}],["$","dd",null,{"className":"detail-value","children":"PREP.zuora.zuora_account_source"}]]}]]]}]}],null]}]}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"description"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Description"}],["$","div",null,{"className":"panel","children":["$","div",null,{"className":"panel-body","children":["$","div",null,{"className":"model-markdown","children":"Source layer for Zuora Accounts for cleaning and renaming"}]}]}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"columns"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Columns"}],["$","$Lf",null,{"model":{"metadata":{"type":"VIEW","schema":"ZUORA","name":"ZUORA_ACCOUNT_SOURCE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"COMMUNICATION_PROFILE_ID":{"type":"TEXT","index":2,"name":"COMMUNICATION_PROFILE_ID","comment":null,"display_name":"communication_profile_id"},"CRM_ID":{"type":"TEXT","index":3,"name":"CRM_ID","comment":null,"display_name":"crm_id"},"DEFAULT_PAYMENT_METHOD_ID":{"type":"TEXT","index":4,"name":"DEFAULT_PAYMENT_METHOD_ID","comment":null,"display_name":"default_payment_method_id"},"INVOICE_TEMPLATE_ID":{"type":"TEXT","index":5,"name":"INVOICE_TEMPLATE_ID","comment":null,"display_name":"invoice_template_id"},"PARENT_ID":{"type":"TEXT","index":6,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SOLD_TO_CONTACT_ID":{"type":"TEXT","index":7,"name":"SOLD_TO_CONTACT_ID","comment":null,"display_name":"sold_to_contact_id"},"BILL_TO_CONTACT_ID":{"type":"TEXT","index":8,"name":"BILL_TO_CONTACT_ID","comment":null,"display_name":"bill_to_contact_id"},"TAX_EXEMPT_CERTIFICATE_ID":{"type":"TEXT","index":9,"name":"TAX_EXEMPT_CERTIFICATE_ID","comment":null,"display_name":"tax_exempt_certificate_id"},"TAX_EXEMPT_CERTIFICATE_TYPE":{"type":"TEXT","index":10,"name":"TAX_EXEMPT_CERTIFICATE_TYPE","comment":null,"display_name":"tax_exempt_certificate_type"},"ACCOUNT_NUMBER":{"type":"TEXT","index":11,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"ACCOUNT_NAME":{"type":"TEXT","index":12,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_NOTES":{"type":"TEXT","index":13,"name":"ACCOUNT_NOTES","comment":null,"display_name":"account_notes"},"PURCHASE_ORDER_NUMBER":{"type":"TEXT","index":14,"name":"PURCHASE_ORDER_NUMBER","comment":null,"display_name":"purchase_order_number"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":15,"name":"SFDC_ACCOUNT_CODE","comment":null,"display_name":"sfdc_account_code"},"STATUS":{"type":"TEXT","index":16,"name":"STATUS","comment":null,"display_name":"status"},"SFDC_ENTITY":{"type":"TEXT","index":17,"name":"SFDC_ENTITY","comment":null,"display_name":"sfdc_entity"},"AUTO_PAY":{"type":"BOOLEAN","index":18,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"BALANCE":{"type":"FLOAT","index":19,"name":"BALANCE","comment":null,"display_name":"balance"},"CREDIT_BALANCE":{"type":"FLOAT","index":20,"name":"CREDIT_BALANCE","comment":null,"display_name":"credit_balance"},"BILL_CYCLE_DAY":{"type":"NUMBER","index":21,"name":"BILL_CYCLE_DAY","comment":null,"display_name":"bill_cycle_day"},"CURRENCY":{"type":"TEXT","index":22,"name":"CURRENCY","comment":null,"display_name":"currency"},"SFDC_CONVERSION_RATE":{"type":"TEXT","index":23,"name":"SFDC_CONVERSION_RATE","comment":null,"display_name":"sfdc_conversion_rate"},"PAYMENT_TERM":{"type":"TEXT","index":24,"name":"PAYMENT_TERM","comment":null,"display_name":"payment_term"},"ALLOW_INVOICE_EDIT":{"type":"BOOLEAN","index":25,"name":"ALLOW_INVOICE_EDIT","comment":null,"display_name":"allow_invoice_edit"},"BATCH":{"type":"TEXT","index":26,"name":"BATCH","comment":null,"display_name":"batch"},"INVOICE_DELIVERY_PREFS_EMAIL":{"type":"BOOLEAN","index":27,"name":"INVOICE_DELIVERY_PREFS_EMAIL","comment":null,"display_name":"invoice_delivery_prefs_email"},"INVOICE_DELIVERY_PREFS_PRINT":{"type":"BOOLEAN","index":28,"name":"INVOICE_DELIVERY_PREFS_PRINT","comment":null,"display_name":"invoice_delivery_prefs_print"},"PAYMENT_GATEWAY":{"type":"TEXT","index":29,"name":"PAYMENT_GATEWAY","comment":null,"display_name":"payment_gateway"},"CUSTOMER_SERVICE_REP_NAME":{"type":"TEXT","index":30,"name":"CUSTOMER_SERVICE_REP_NAME","comment":null,"display_name":"customer_service_rep_name"},"SALES_REP_NAME":{"type":"TEXT","index":31,"name":"SALES_REP_NAME","comment":null,"display_name":"sales_rep_name"},"ADDITIONAL_EMAIL_ADDRESSES":{"type":"TEXT","index":32,"name":"ADDITIONAL_EMAIL_ADDRESSES","comment":null,"display_name":"additional_email_addresses"},"SFDC_PARENT":{"type":"TEXT","index":33,"name":"SFDC_PARENT","comment":null,"display_name":"sfdc_parent"},"SSP_CHANNEL":{"type":"TEXT","index":34,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":35,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"LAST_INVOICE_DATE":{"type":"TIMESTAMP_TZ","index":36,"name":"LAST_INVOICE_DATE","comment":null,"display_name":"last_invoice_date"},"CREATED_BY_ID":{"type":"TEXT","index":37,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":38,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"UPDATED_BY_ID":{"type":"TEXT","index":39,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE":{"type":"TIMESTAMP_TZ","index":40,"name":"UPDATED_DATE","comment":null,"display_name":"updated_date"},"IS_DELETED":{"type":"BOOLEAN","index":41,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_account_source","raw_sql":"$10","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.mask_model"],"nodes":["source.gitlab_snowflake.zuora.account","seed.gitlab_snowflake.zuora_excluded_accounts","seed.gitlab_snowflake.zuora_excluded_accounts"]},"config":{"enabled":true,"alias":"zuora_account_source","schema":"zuora","database":"PREP","tags":["sources","zuora"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"zuora","fqn":["gitlab_snowflake","sources","zuora","zuora_account_source"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"sources/zuora/zuora_account_source.sql","original_file_path":"models/sources/zuora/zuora_account_source.sql","name":"zuora_account_source","alias":"zuora_account_source","checksum":{"name":"sha256","checksum":"8c48348187a27d94d7c66edb5171c988a9aa6ce01a461c613d295da91f9a4fd5"},"tags":["sources","zuora"],"refs":[["zuora_excluded_accounts"],["zuora_excluded_accounts"]],"sources":[["zuora","account"]],"metrics":[],"description":"Source layer for Zuora Accounts for cleaning and renaming","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/sources/zuora/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/sources/zuora/zuora_account_source.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"zuora","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["zuora"],"alias":"zuora_account_source"},"created_at":1689033748.6565464,"compiled_sql":"$11","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".zuora.zuora_account_source","label":"zuora_account_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"referenced_by"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Referenced By"}],["$","$L12",null,{"references":{"model":[{"metadata":{"type":"BASE TABLE","schema":"TDF","name":"ZUORA_ACCOUNTS_NEW","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_DAY":{"type":"DATE","index":1,"name":"date_day","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"date_day"},"ROWCOUNT":{"type":"NUMBER","index":2,"name":"ROWCOUNT","comment":null,"display_name":"rowcount"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:57UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":86016,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_accounts_new","raw_sql":"{{ model_count_and_group_by_date('zuora_account_source', 'created_date') }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.model_count_and_group_by_date","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source"]},"config":{"enabled":true,"alias":null,"schema":"tdf","database":"PREP","tags":["tdf"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"tdf","fqn":["gitlab_snowflake","trusted_data_framework","zuora","source_counts","zuora_accounts_new"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"trusted_data_framework/zuora/source_counts/zuora_accounts_new.sql","original_file_path":"models/trusted_data_framework/zuora/source_counts/zuora_accounts_new.sql","name":"zuora_accounts_new","alias":"zuora_accounts_new","checksum":{"name":"sha256","checksum":"d4a3028452d06858cb9f2f1fd79f2fd61f22ee32aed4eb48b2dca332c85e8f3e"},"tags":["tdf"],"refs":[["zuora_account_source"],["zuora_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/trusted_data_framework/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/trusted_data_framework/zuora/source_counts/zuora_accounts_new.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"tdf","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true,"tags":["tdf"]},"created_at":1689033737.5619576,"compiled_sql":"\n\nwith model_data AS (\n\n  SELECT\n    CAST(created_date AS DATE) AS grouped_date,\n    COUNT(*)                            AS num_rows\n  FROM \"PREP\".zuora.zuora_account_source\n  GROUP BY CAST(created_date AS DATE)\n\n)\n\nSELECT\n    DISTINCT\n      db.grouped_date                   AS date_day,\n      IFNULL(db.num_rows, 0)            AS rowcount\nFROM model_data db\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".tdf.zuora_accounts_new","label":"zuora_accounts_new"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"BDG_MARKETING_CONTACT_ROLE","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"ID for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"email_address"},"USER_ID":{"type":"NUMBER","index":3,"name":"user_id","comment":null,"description":"GitLab.com user id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"user_id"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":4,"name":"customer_db_customer_id","comment":null,"description":"Customer DB customer id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"NAMESPACE_ID":{"type":"NUMBER","index":5,"name":"namespace_id","comment":null,"description":"Gitlab.com namespace id associated to the user_id.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"ZUORA_BILLING_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"zuora_billing_account_id","comment":null,"description":"Zuora billing account id (if applicable) of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_billing_account_id"},"MARKETING_CONTACT_ROLE":{"type":"TEXT","index":7,"name":"marketing_contact_role","comment":null,"description":"Role of the marketing contact. A marketing contact can have many roles. Could be 'Personal Namespace Owner', Group Namespace Owner', 'Group Namespace Member', 'Group Namespace Maintainer', 'Customer DB Owner', 'Zuora Billing Contact'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketing_contact_role"},"CREATED_BY":{"type":"TEXT","index":8,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":9,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":10,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":11,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":12,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":13,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:33UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":814894080,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.bdg_marketing_contact_role","raw_sql":"$13","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_namespaces_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_members_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.dim_marketing_contact","model.gitlab_snowflake.prep_namespace","model.gitlab_snowflake.prep_namespace"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","bdg_marketing_contact_role"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/bdg_marketing_contact_role.sql","original_file_path":"models/common/sensitive/bdg_marketing_contact_role.sql","name":"bdg_marketing_contact_role","alias":"bdg_marketing_contact_role","checksum":{"name":"sha256","checksum":"e555905c1956abb5024b7a48afbad97f4bc0ee59f3e012af876674204fed8088"},"tags":[],"refs":[["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_namespaces_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_members_source"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_account_source"],["zuora_account_source"],["zuora_contact_source"],["zuora_contact_source"],["dim_marketing_contact"],["dim_marketing_contact"],["prep_namespace"],["prep_namespace"]],"sources":[],"metrics":[],"description":"A bridge table that lists all roles for the marketing contacts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/bdg_marketing_contact_role.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.216212,"compiled_sql":"$14","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.bdg_marketing_contact_role","label":"bdg_marketing_contact_role"},{"metadata":{"type":"BASE TABLE","schema":"SENSITIVE","name":"DIM_MARKETING_CONTACT","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_MARKETING_CONTACT_ID":{"type":"TEXT","index":1,"name":"dim_marketing_contact_id","comment":null,"description":"A primary key for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_marketing_contact_id"},"EMAIL_ADDRESS":{"type":"TEXT","index":2,"name":"email_address","comment":null,"description":"Email address for the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"email_address"},"FIRST_NAME":{"type":"TEXT","index":3,"name":"first_name","comment":null,"description":"First name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"first_name"},"LAST_NAME":{"type":"TEXT","index":4,"name":"last_name","comment":null,"description":"Last name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"last_name"},"GITLAB_USER_NAME":{"type":"TEXT","index":5,"name":"gitlab_user_name","comment":null,"description":"Gitlab.com user name of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_user_name"},"COMPANY_NAME":{"type":"TEXT","index":6,"name":"company_name","comment":null,"description":"Company of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"company_name"},"JOB_TITLE":{"type":"TEXT","index":7,"name":"job_title","comment":null,"description":"Job title of the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"job_title"},"IT_JOB_TITLE_HIERARCHY":{"type":"TEXT","index":8,"name":"IT_JOB_TITLE_HIERARCHY","comment":null,"display_name":"it_job_title_hierarchy"},"COUNTRY":{"type":"TEXT","index":9,"name":"country","comment":null,"description":"Country where marketing contacted is located","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"country"},"SFDC_PARENT_SALES_SEGMENT":{"type":"TEXT","index":10,"name":"sfdc_parent_sales_segment","comment":null,"description":"Sales segment of the CRM account related to the marketing contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_parent_sales_segment"},"SFDC_PARENT_CRM_ACCOUNT_REGION":{"type":"TEXT","index":11,"name":"SFDC_PARENT_CRM_ACCOUNT_REGION","comment":null,"display_name":"sfdc_parent_crm_account_region"},"MARKETO_LEAD_ID":{"type":"FLOAT","index":12,"name":"MARKETO_LEAD_ID","comment":null,"display_name":"marketo_lead_id"},"IS_MARKETO_LEAD":{"type":"BOOLEAN","index":13,"name":"IS_MARKETO_LEAD","comment":null,"display_name":"is_marketo_lead"},"IS_MARKETO_EMAIL_HARD_BOUNCED":{"type":"BOOLEAN","index":14,"name":"IS_MARKETO_EMAIL_HARD_BOUNCED","comment":null,"display_name":"is_marketo_email_hard_bounced"},"MARKETO_EMAIL_HARD_BOUNCED_DATE":{"type":"DATE","index":15,"name":"MARKETO_EMAIL_HARD_BOUNCED_DATE","comment":null,"display_name":"marketo_email_hard_bounced_date"},"IS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":16,"name":"IS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"is_marketo_unsubscribed"},"IS_MARKETO_OPTED_IN":{"type":"BOOLEAN","index":17,"name":"IS_MARKETO_OPTED_IN","comment":null,"display_name":"is_marketo_opted_in"},"HAS_MARKETO_UNSUBSCRIBED":{"type":"BOOLEAN","index":18,"name":"HAS_MARKETO_UNSUBSCRIBED","comment":null,"display_name":"has_marketo_unsubscribed"},"MARKETO_COMPLIANCE_SEGMENT_VALUE":{"type":"TEXT","index":19,"name":"marketo_compliance_segment_value","comment":null,"description":"Holds one of 4 values saying if they are compliant to be emailed or not","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"marketo_compliance_segment_value"},"IS_PQL_MARKETO":{"type":"BOOLEAN","index":20,"name":"IS_PQL_MARKETO","comment":null,"display_name":"is_pql_marketo"},"IS_PAID_TIER_MARKETO":{"type":"BOOLEAN","index":21,"name":"IS_PAID_TIER_MARKETO","comment":null,"display_name":"is_paid_tier_marketo"},"IS_PTPT_CONTACT_MARKETO":{"type":"BOOLEAN","index":22,"name":"IS_PTPT_CONTACT_MARKETO","comment":null,"display_name":"is_ptpt_contact_marketo"},"IS_PTP_CONTACT_MARKETO":{"type":"BOOLEAN","index":23,"name":"IS_PTP_CONTACT_MARKETO","comment":null,"display_name":"is_ptp_contact_marketo"},"IS_IMPACTED_BY_USER_LIMIT_MARKETO":{"type":"BOOLEAN","index":24,"name":"IS_IMPACTED_BY_USER_LIMIT_MARKETO","comment":null,"display_name":"is_impacted_by_user_limit_marketo"},"IS_CURRENTLY_IN_TRIAL_MARKETO":{"type":"BOOLEAN","index":25,"name":"IS_CURRENTLY_IN_TRIAL_MARKETO","comment":null,"display_name":"is_currently_in_trial_marketo"},"TRIAL_START_DATE_MARKETO":{"type":"DATE","index":26,"name":"TRIAL_START_DATE_MARKETO","comment":null,"display_name":"trial_start_date_marketo"},"TRIAL_END_DATE_MARKETO":{"type":"DATE","index":27,"name":"TRIAL_END_DATE_MARKETO","comment":null,"display_name":"trial_end_date_marketo"},"IS_SFDC_LEAD_CONTACT":{"type":"BOOLEAN","index":28,"name":"is_sfdc_lead_contact","comment":null,"description":"Flags whether or not marketing contact is a Salesforce contact/lead","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_lead_contact"},"SFDC_RECORD_ID":{"type":"TEXT","index":29,"name":"SFDC_RECORD_ID","comment":null,"display_name":"sfdc_record_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":30,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SFDC_LEAD_CONTACT":{"type":"TEXT","index":31,"name":"sfdc_lead_contact","comment":null,"description":"Lists whether marketing contact is a Lead or a Contact in Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_lead_contact"},"MOBILE_PHONE":{"type":"TEXT","index":32,"name":"MOBILE_PHONE","comment":null,"display_name":"mobile_phone"},"SFDC_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":33,"name":"sfdc_created_date","comment":null,"description":"Date that the Salesforce record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_created_date"},"IS_SFDC_OPTED_OUT":{"type":"BOOLEAN","index":34,"name":"is_sfdc_opted_out","comment":null,"description":"Flags whether or not contact is opted out of Salesforce.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_sfdc_opted_out"},"IS_GITLAB_DOTCOM_USER":{"type":"BOOLEAN","index":35,"name":"IS_GITLAB_DOTCOM_USER","comment":null,"display_name":"is_gitlab_dotcom_user"},"GITLAB_DOTCOM_USER_ID":{"type":"NUMBER","index":36,"name":"GITLAB_DOTCOM_USER_ID","comment":null,"display_name":"gitlab_dotcom_user_id"},"GITLAB_DOTCOM_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":37,"name":"GITLAB_DOTCOM_CREATED_DATE","comment":null,"display_name":"gitlab_dotcom_created_date"},"GITLAB_DOTCOM_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":38,"name":"GITLAB_DOTCOM_CONFIRMED_DATE","comment":null,"display_name":"gitlab_dotcom_confirmed_date"},"GITLAB_DOTCOM_ACTIVE_STATE":{"type":"TEXT","index":39,"name":"GITLAB_DOTCOM_ACTIVE_STATE","comment":null,"display_name":"gitlab_dotcom_active_state"},"GITLAB_DOTCOM_LAST_LOGIN_DATE":{"type":"TIMESTAMP_NTZ","index":40,"name":"GITLAB_DOTCOM_LAST_LOGIN_DATE","comment":null,"display_name":"gitlab_dotcom_last_login_date"},"GITLAB_DOTCOM_EMAIL_OPTED_IN":{"type":"BOOLEAN","index":41,"name":"GITLAB_DOTCOM_EMAIL_OPTED_IN","comment":null,"display_name":"gitlab_dotcom_email_opted_in"},"DAYS_SINCE_SAAS_SIGNUP":{"type":"NUMBER","index":42,"name":"days_since_saas_signup","comment":null,"description":"Number of days since gitlab_com_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_saas_signup"},"DAYS_SINCE_SAAS_SIGNUP_BUCKET":{"type":"TEXT","index":43,"name":"DAYS_SINCE_SAAS_SIGNUP_BUCKET","comment":null,"display_name":"days_since_saas_signup_bucket"},"IS_CUSTOMER_DB_USER":{"type":"BOOLEAN","index":44,"name":"is_customer_db_user","comment":null,"description":"Flags whether or not marketing contact is in Customer_DB","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_customer_db_user"},"CUSTOMER_DB_CUSTOMER_ID":{"type":"NUMBER","index":45,"name":"customer_db_customer_id","comment":null,"description":"Customer_DB user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_customer_id"},"CUSTOMER_DB_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":46,"name":"customer_db_created_date","comment":null,"description":"Date that Customer_db record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_created_date"},"CUSTOMER_DB_CONFIRMED_DATE":{"type":"TIMESTAMP_NTZ","index":47,"name":"customer_db_confirmed_date","comment":null,"description":"Date that Customer_db record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"customer_db_confirmed_date"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP":{"type":"NUMBER","index":48,"name":"days_since_self_managed_owner_signup","comment":null,"description":"Number of days since customer_db_confirmed_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"days_since_self_managed_owner_signup"},"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET":{"type":"TEXT","index":49,"name":"DAYS_SINCE_SELF_MANAGED_OWNER_SIGNUP_BUCKET","comment":null,"display_name":"days_since_self_managed_owner_signup_bucket"},"IS_ZUORA_BILLING_CONTACT":{"type":"BOOLEAN","index":50,"name":"is_zuora_billing_contact","comment":null,"description":"Flags whether or not marketing contact is in Zuora","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_zuora_billing_contact"},"ZUORA_CONTACT_ID":{"type":"TEXT","index":51,"name":"zuora_contact_id","comment":null,"description":"Zuora contact id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_contact_id"},"ZUORA_CREATED_DATE":{"type":"TIMESTAMP_TZ","index":52,"name":"zuora_created_date","comment":null,"description":"Date that Zuora record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_created_date"},"ZUORA_ACTIVE_STATE":{"type":"TEXT","index":53,"name":"zuora_active_state","comment":null,"description":"Lists if marketing contact is active in Zuora.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_active_state"},"DNC_LIST_RESULT":{"type":"TEXT","index":54,"name":"DNC_LIST_RESULT","comment":null,"display_name":"dnc_list_result"},"WIP_IS_VALID_EMAIL_ADDRESS":{"type":"BOOLEAN","index":55,"name":"WIP_IS_VALID_EMAIL_ADDRESS","comment":null,"display_name":"wip_is_valid_email_address"},"WIP_INVALID_EMAIL_ADDRESS_REASON":{"type":"TEXT","index":56,"name":"wip_invalid_email_address_reason","comment":null,"description":"Reason why the email address is invalid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_invalid_email_address_reason"},"CREATED_BY":{"type":"TEXT","index":57,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":58,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":59,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":60,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":61,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"is_gitlab_com_user":{"name":"is_gitlab_com_user","description":"Flags whether or not marketing contact is in Gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_gitlab_com_user"},"gitlab_com_user_id":{"name":"gitlab_com_user_id","description":"Gitlab.com user id of the marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_user_id"},"gitlab_com_created_date":{"name":"gitlab_com_created_date","description":"Date that the GitLab.com record was created for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_created_date"},"gitlab_com_confirmed_date":{"name":"gitlab_com_confirmed_date","description":"Date that the GitLab.com record was confirmed for marketing contact.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_confirmed_date"},"gitlab_com_active_state":{"name":"gitlab_com_active_state","description":"Lists whether marketing contact is active or not in GitLab.com. Can be 'active', 'blocked', 'deactivated'","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_active_state"},"gitlab_com_last_login_date":{"name":"gitlab_com_last_login_date","description":"Most recent date that marketing contact logged into gitlab.com","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_last_login_date"},"gitlab_com_email_opted_in":{"name":"gitlab_com_email_opted_in","description":"Flags whether or not contact is opted out of Gitlab.com.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"gitlab_com_email_opted_in"},"wip_is_email_address_valid":{"name":"wip_is_email_address_valid","description":"Flags if the email address is valid. Work in progress - full list of invalid emails is not loaded","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"wip_is_email_address_valid"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":1261721088,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.dim_marketing_contact","raw_sql":"$15","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.days_buckets","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_lead_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_contact_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.marketo_lead_source","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.dim_crm_account","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_sales_segment","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.prep_crm_person","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.gitlab_dotcom_users_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.customers_db_customers_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source","model.gitlab_snowflake.driveload_marketing_dnc_list_source"]},"config":{"enabled":true,"alias":null,"schema":"sensitive","database":"PREP","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"sensitive","fqn":["gitlab_snowflake","common","sensitive","dim_marketing_contact"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/sensitive/dim_marketing_contact.sql","original_file_path":"models/common/sensitive/dim_marketing_contact.sql","name":"dim_marketing_contact","alias":"dim_marketing_contact","checksum":{"name":"sha256","checksum":"2cf8e313c4a64673b3780dac0bcffd6f46d21244d42c4263aba32674d460b42c"},"tags":[],"refs":[["sfdc_lead_source"],["sfdc_lead_source"],["sfdc_contact_source"],["sfdc_contact_source"],["sfdc_account_source"],["sfdc_account_source"],["marketo_lead_source"],["marketo_lead_source"],["dim_crm_account"],["dim_crm_account"],["prep_sales_segment"],["prep_sales_segment"],["prep_crm_person"],["prep_crm_person"],["gitlab_dotcom_users_source"],["gitlab_dotcom_users_source"],["customers_db_customers_source"],["customers_db_customers_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_account_source"],["zuora_account_source"],["driveload_marketing_dnc_list_source"],["driveload_marketing_dnc_list_source"]],"sources":[],"metrics":[],"description":"A dimension table for marketing contacts, combining contacts from GitLab.com, Salesforce, CustomerDB, and Zuora Sources.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/sensitive/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/sensitive/dim_marketing_contact.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"sensitive","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true},"created_at":1689033756.211765,"compiled_sql":"$16","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".sensitive.dim_marketing_contact","label":"dim_marketing_contact"},{"metadata":{"type":"BASE TABLE","schema":"TDF","name":"ZUORA_ACCOUNTS_UPDATED","database":"PREP","comment":null,"owner":"TRANSFORMER"},"columns":{"DATE_DAY":{"type":"DATE","index":1,"name":"date_day","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"date_day"},"ROWCOUNT":{"type":"NUMBER","index":2,"name":"ROWCOUNT","comment":null,"display_name":"rowcount"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:57UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":65536,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_accounts_updated","raw_sql":"{{ model_count_and_group_by_date('zuora_account_source', 'updated_date') }}","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.model_count_and_group_by_date","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source"]},"config":{"enabled":true,"alias":null,"schema":"tdf","database":"PREP","tags":["tdf"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PREP","schema":"tdf","fqn":["gitlab_snowflake","trusted_data_framework","zuora","source_counts","zuora_accounts_updated"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"trusted_data_framework/zuora/source_counts/zuora_accounts_updated.sql","original_file_path":"models/trusted_data_framework/zuora/source_counts/zuora_accounts_updated.sql","name":"zuora_accounts_updated","alias":"zuora_accounts_updated","checksum":{"name":"sha256","checksum":"0ea35aadf1098f060bbf9aeab244d6db55ac72d831f344f092517ff2454f7e2a"},"tags":["tdf"],"refs":[["zuora_account_source"],["zuora_account_source"]],"sources":[],"metrics":[],"description":"","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/trusted_data_framework/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/trusted_data_framework/zuora/source_counts/zuora_accounts_updated.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PREP_DATABASE') }}","schema":"tdf","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","secure":true,"tags":["tdf"]},"created_at":1689033737.563303,"compiled_sql":"\n\nwith model_data AS (\n\n  SELECT\n    CAST(updated_date AS DATE) AS grouped_date,\n    COUNT(*)                            AS num_rows\n  FROM \"PREP\".zuora.zuora_account_source\n  GROUP BY CAST(updated_date AS DATE)\n\n)\n\nSELECT\n    DISTINCT\n      db.grouped_date                   AS date_day,\n      IFNULL(db.num_rows, 0)            AS rowcount\nFROM model_data db\n\n","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PREP\".tdf.zuora_accounts_updated","label":"zuora_accounts_updated"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_MONTHLY_RECURRING_REVENUE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"MRR_MONTH":{"type":"DATE","index":1,"name":"MRR_MONTH","comment":null,"display_name":"mrr_month"},"ACCOUNT_ID":{"type":"TEXT","index":2,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_number"},"ACCOUNT_NAME":{"type":"TEXT","index":4,"name":"account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_name"},"CRM_ID":{"type":"TEXT","index":5,"name":"CRM_ID","comment":null,"display_name":"crm_id"},"SUBSCRIPTION_ID":{"type":"TEXT","index":6,"name":"SUBSCRIPTION_ID","comment":null,"display_name":"subscription_id"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":7,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUB_START_MONTH":{"type":"DATE","index":8,"name":"SUB_START_MONTH","comment":null,"display_name":"sub_start_month"},"SUB_END_MONTH":{"type":"DATE","index":9,"name":"SUB_END_MONTH","comment":null,"display_name":"sub_end_month"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":10,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":11,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"COUNTRY":{"type":"TEXT","index":12,"name":"COUNTRY","comment":null,"display_name":"country"},"PRODUCT_CATEGORY":{"type":"TEXT","index":13,"name":"product_category","comment":null,"description":"Product category is based on the rate plan name.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"accepted_values","short":"A","label":"Accepted Values: GitHost, Other, SaaS - Ultimate, Basic, SaaS - Bronze, Self-Managed - Premium, Self-Managed - Starter, Self-Managed - Ultimate, Support, Plus, SaaS - Premium, Standard, Trueup, Storage, SaaS - Other, Dedicated - Ultimate"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_category"},"DELIVERY":{"type":"TEXT","index":14,"name":"DELIVERY","comment":null,"display_name":"delivery"},"SERVICE_TYPE":{"type":"TEXT","index":15,"name":"SERVICE_TYPE","comment":null,"display_name":"service_type"},"PRODUCT_RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":16,"name":"PRODUCT_RATE_PLAN_CHARGE_ID","comment":null,"display_name":"product_rate_plan_charge_id"},"RATE_PLAN_NAME":{"type":"TEXT","index":17,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":18,"name":"rate_plan_charge_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"rate_plan_charge_name"},"CHARGE_TYPE":{"type":"TEXT","index":19,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":20,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"MRR":{"type":"FLOAT","index":21,"name":"MRR","comment":null,"display_name":"mrr"},"ARR":{"type":"FLOAT","index":22,"name":"ARR","comment":null,"display_name":"arr"},"QUANTITY":{"type":"FLOAT","index":23,"name":"QUANTITY","comment":null,"display_name":"quantity"},"TOTAL_CURRENT_MRR":{"type":"FLOAT","index":24,"name":"TOTAL_CURRENT_MRR","comment":null,"display_name":"total_current_mrr"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:07UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":139689984,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_monthly_recurring_revenue","raw_sql":"$17","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.product_category","macro.gitlab_snowflake.delivery","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_monthly_recurring_revenue"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_monthly_recurring_revenue.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_monthly_recurring_revenue.sql","name":"zuora_monthly_recurring_revenue","alias":"zuora_monthly_recurring_revenue","checksum":{"name":"sha256","checksum":"511a34832eab66d75551a0579a24ac595524f87d0b2a5c3bef64abc56e997077"},"tags":["safe"],"refs":[["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["zuora_accounting_period_source"],["zuora_accounting_period_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_product_source"],["zuora_product_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"This model is built using the same logic as the Zuora UI out of the box MRR Trend Report. The report looks at the charges associated with subscriptions, along with their effective dates and subscription statuses, and calculates MRR. \n\nThe below query will pull MRR by month. You can add additional dimensions to the query to build out your analysis.\n\nSELECT\n  mrr_month,\n  SUM(mrr)  AS mrr\nFROM \"PROD\".\"LEGACY\".\"ZUORA_MONTHLY_RECURRING_REVENUE\"\nWHERE mrr_month < DATE_TRUNC('month',CURRENT_DATE)\nGROUP BY 1\nORDER BY 1 DESC","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_monthly_recurring_revenue.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.2408473,"compiled_sql":"$18","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_monthly_recurring_revenue","label":"zuora_monthly_recurring_revenue"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"FCT_INVOICE_ITEM","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"INVOICE_ITEM_ID":{"type":"TEXT","index":1,"name":"invoice_item_id","comment":null,"description":"unique invoice item id that identifies a line item on the invoice","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"invoice_item_id"},"DIM_INVOICE_ID":{"type":"TEXT","index":2,"name":"dim_invoice_id","comment":null,"description":"The ID of the invoice that's associated with the invoice item","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_invoice_id"},"DIM_BILLING_ACCOUNT_ID_SUBSCRIPTION":{"type":"TEXT","index":3,"name":"DIM_BILLING_ACCOUNT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_billing_account_id_subscription"},"DIM_CRM_ACCOUNT_ID_SUBSCRIPTION":{"type":"TEXT","index":4,"name":"DIM_CRM_ACCOUNT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_crm_account_id_subscription"},"DIM_BILLING_ACCOUNT_ID_INVOICE":{"type":"TEXT","index":5,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE","comment":null,"display_name":"dim_billing_account_id_invoice"},"DIM_CRM_ACCOUNT_ID_INVOICE":{"type":"TEXT","index":6,"name":"dim_crm_account_id_invoice","comment":null,"description":"The ID of the customer account associated with the invoice","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id_invoice"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":7,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_REVENUE_CONTRACT_LINE_ID":{"type":"TEXT","index":8,"name":"DIM_REVENUE_CONTRACT_LINE_ID","comment":null,"display_name":"dim_revenue_contract_line_id"},"CHARGE_ID":{"type":"TEXT","index":9,"name":"charge_id","comment":null,"description":"The unique identifier of a verion of a rate plan charge associated with the invoice item","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":10,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"INVOICE_NUMBER":{"type":"TEXT","index":11,"name":"invoice_number","comment":null,"description":"The unique identification number of the invoice","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"invoice_number"},"INVOICE_DATE":{"type":"DATE","index":12,"name":"invoice_date","comment":null,"description":"The date the invoice was generated","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_date"},"SERVICE_START_DATE":{"type":"DATE","index":13,"name":"service_start_date","comment":null,"description":"The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_start_date"},"SERVICE_END_DATE":{"type":"DATE","index":14,"name":"service_end_date","comment":null,"description":"The end date of the service period associated with this invoice item. Service ends one second before the date in this value.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"service_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":15,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":16,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"QUANTITY":{"type":"FLOAT","index":17,"name":"QUANTITY","comment":null,"display_name":"quantity"},"MRR":{"type":"FLOAT","index":18,"name":"MRR","comment":null,"display_name":"mrr"},"ARR":{"type":"FLOAT","index":19,"name":"ARR","comment":null,"display_name":"arr"},"INVOICE_ITEM_CHARGE_AMOUNT":{"type":"FLOAT","index":20,"name":"invoice_item_charge_amount","comment":null,"description":"The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_item_charge_amount"},"INVOICE_ITEM_UNIT_PRICE":{"type":"FLOAT","index":21,"name":"invoice_item_unit_price","comment":null,"description":"The per-unit price of the invoice item. Calculated from multiple fields in Product Rate Plan Charge and Product Rate Plan Charge Tier objects.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_item_unit_price"},"INVOICE_AMOUNT_WITHOUT_TAX":{"type":"FLOAT","index":22,"name":"invoice_amount_without_tax","comment":null,"description":"The invoice amount excluding tax","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_amount_without_tax"},"TAX_AMOUNT_SUM":{"type":"FLOAT","index":23,"name":"TAX_AMOUNT_SUM","comment":null,"display_name":"tax_amount_sum"},"IS_LAST_SEGMENT_VERSION":{"type":"BOOLEAN","index":24,"name":"IS_LAST_SEGMENT_VERSION","comment":null,"display_name":"is_last_segment_version"},"CREATED_BY":{"type":"TEXT","index":25,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":26,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":27,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":28,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":29,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":30,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":53168640,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_invoice_item","raw_sql":"$19","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_bill_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_bill_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","facts_financial","restricted_safe","fct_invoice_item"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_financial/restricted_safe/fct_invoice_item.sql","original_file_path":"models/common/facts_financial/restricted_safe/fct_invoice_item.sql","name":"fct_invoice_item","alias":"fct_invoice_item","checksum":{"name":"sha256","checksum":"f8d7f077c9546d6df0ef38a0d859d684666ede882d7bdc46d83cd49887a40de3"},"tags":["safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_account_source"],["zuora_account_source"],["zuora_invoice_source"],["zuora_invoice_source"],["zuora_invoice_item_source"],["zuora_invoice_item_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"],["zuora_revenue_revenue_contract_bill_source"],["zuora_revenue_revenue_contract_bill_source"]],"sources":[],"metrics":[],"description":"Fact table providing invoice line item details.\n\nThe invoicing to customers business process can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#6-invoicing-to-customers).\n\nData comes from [Zuora Documentation](https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics/D_Data_Sources_and_Exports/C_Data_Source_Reference/Invoice_Item_Data_Source).\n\nInformation on the Enterprise Dimensional Model can be found in the [handbook](https://about.gitlab.com/handbook/business-ops/data-team/platform/edw/)","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_financial/restricted_safe/fct_invoice_item.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033752.2693381,"compiled_sql":"$1a","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.fct_invoice_item","label":"fct_invoice_item"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_BILLING_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BILLING_ACCOUNT_SK":{"type":"TEXT","index":1,"name":"dim_billing_account_sk","comment":null,"description":"A surrogate key that uniquely identifes each row of the billing account table.  It is currently formed by hashing the billing account IDs from Zuora that uniquely identify a Zuora account associated with a given Subscription ID. This is built as a conceptual [dimension](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/dimension-table-structure/) and can be used to build a dimension table to limit the number of columns on a fact table.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_billing_account_sk"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_crm_account_id","comment":null,"description":"The customer account ID for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":4,"name":"billing_account_number","comment":null,"description":"A unique Zuora account number","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_number"},"BILLING_ACCOUNT_NAME":{"type":"TEXT","index":5,"name":"billing_account_name","comment":null,"description":"The name of the Zuora account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"billing_account_name"},"ACCOUNT_STATUS":{"type":"TEXT","index":6,"name":"account_status","comment":null,"description":"The status of the account in the system. Can be draft, active, cancelled.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_status"},"PARENT_ID":{"type":"TEXT","index":7,"name":"parent_id","comment":null,"description":"The identifier of the parent customer account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"parent_id"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":8,"name":"sfdc_account_code","comment":null,"description":"The code for the account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_account_code"},"SFDC_ENTITY":{"type":"TEXT","index":9,"name":"sfdc_entity","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sfdc_entity"},"ACCOUNT_CURRENCY":{"type":"TEXT","index":10,"name":"account_currency","comment":null,"description":"A currency as defined in Billing Settings in the Zuora UI","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"account_currency"},"SOLD_TO_COUNTRY":{"type":"TEXT","index":11,"name":"sold_to_country","comment":null,"description":"The country of the sold to contact","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sold_to_country"},"SSP_CHANNEL":{"type":"TEXT","index":12,"name":"ssp_channel","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":13,"name":"po_required","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"po_required"},"AUTO_PAY":{"type":"BOOLEAN","index":14,"name":"auto_pay","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"auto_pay"},"DEFAULT_PAYMENT_METHOD_TYPE":{"type":"TEXT","index":15,"name":"DEFAULT_PAYMENT_METHOD_TYPE","comment":null,"display_name":"default_payment_method_type"},"IS_DELETED":{"type":"BOOLEAN","index":16,"name":"is_deleted","comment":null,"description":"The flag indicating if account has been deleted","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_deleted"},"BATCH":{"type":"TEXT","index":17,"name":"batch","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"batch"},"RECORD_DATA_SOURCE":{"type":"TEXT","index":18,"name":"record_data_source","comment":null,"description":"An indicator flag to identify if the record exists in Zuora or CDot or in both the sources. This column can be used to identify any missing records or data sync issues in both the sources.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"record_data_source"},"CREATED_BY":{"type":"TEXT","index":19,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":20,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":21,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":22,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":23,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":24,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:59UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6629888,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_billing_account","raw_sql":"$1b","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_payment_method_source","model.gitlab_snowflake.zuora_payment_method_source","model.gitlab_snowflake.customers_db_billing_accounts_source","model.gitlab_snowflake.customers_db_billing_accounts_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_billing_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_billing_account.sql","original_file_path":"models/common_prep/prep_billing_account.sql","name":"prep_billing_account","alias":"prep_billing_account","checksum":{"name":"sha256","checksum":"bcfdabd1f09c24aa8ccfb2a1e01707966f7348693eabb457562d4da5c663afd1"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_contact_source"],["zuora_contact_source"],["zuora_payment_method_source"],["zuora_payment_method_source"],["customers_db_billing_accounts_source"],["customers_db_billing_accounts_source"],["zuora_account_source"],["zuora_account_source"],["zuora_account_source"],["zuora_account_source"]],"sources":[],"metrics":[],"description":"Prep model for merging the billing accounts data from both Zuora and CDot sources. This model will be used as a source model for creating `dim_billing_account` core business data object downstream.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_billing_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.8841963,"compiled_sql":"$1c","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_billing_account","label":"prep_billing_account"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"FCT_REVENUE_CONTRACT_LINE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_REVENUE_CONTRACT_LINE_ID":{"type":"TEXT","index":1,"name":"dim_revenue_contract_line_id","comment":null,"description":"Unique identifier for a revenue contract line.","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","zuora_revenue"],"tests":[{"test_name":"unique","short":"U","label":"Unique"},{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_revenue_contract_line_id"},"DIM_REVENUE_CONTRACT_ID":{"type":"TEXT","index":2,"name":"DIM_REVENUE_CONTRACT_ID","comment":null,"display_name":"dim_revenue_contract_id"},"REVENUE_CONTRACT_BATCH_ID":{"type":"TEXT","index":3,"name":"REVENUE_CONTRACT_BATCH_ID","comment":null,"display_name":"revenue_contract_batch_id"},"DIM_REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_ID":{"type":"TEXT","index":4,"name":"DIM_REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_ID","comment":null,"display_name":"dim_revenue_contract_performance_obligation_id"},"DIM_ACCOUNTING_EVENT_ID_PERFORMANCE_OBLIGATION":{"type":"TEXT","index":5,"name":"DIM_ACCOUNTING_EVENT_ID_PERFORMANCE_OBLIGATION","comment":null,"display_name":"dim_accounting_event_id_performance_obligation"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":7,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"SALES_ORDER_NUMBER":{"type":"TEXT","index":8,"name":"SALES_ORDER_NUMBER","comment":null,"display_name":"sales_order_number"},"SALES_ORDER_LINE_ID":{"type":"TEXT","index":9,"name":"SALES_ORDER_LINE_ID","comment":null,"display_name":"sales_order_line_id"},"SALES_ORDER_LINE_NUMBER":{"type":"TEXT","index":10,"name":"SALES_ORDER_LINE_NUMBER","comment":null,"display_name":"sales_order_line_number"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":11,"name":"DIM_SUBSCRIPTION_ID","comment":null,"display_name":"dim_subscription_id"},"DIM_AMENDMENT_ID":{"type":"TEXT","index":12,"name":"DIM_AMENDMENT_ID","comment":null,"display_name":"dim_amendment_id"},"PURCHASE_ORDER_NUMBER":{"type":"TEXT","index":13,"name":"PURCHASE_ORDER_NUMBER","comment":null,"display_name":"purchase_order_number"},"DIM_QUOTE_ID":{"type":"TEXT","index":14,"name":"DIM_QUOTE_ID","comment":null,"display_name":"dim_quote_id"},"CONTRACT_NUMBER":{"type":"TEXT","index":15,"name":"CONTRACT_NUMBER","comment":null,"display_name":"contract_number"},"CONTRACT_LINE_NUMBER":{"type":"TEXT","index":16,"name":"CONTRACT_LINE_NUMBER","comment":null,"display_name":"contract_line_number"},"CONTRACT_LINE_ID":{"type":"TEXT","index":17,"name":"CONTRACT_LINE_ID","comment":null,"display_name":"contract_line_id"},"ORDER_ID":{"type":"TEXT","index":18,"name":"ORDER_ID","comment":null,"display_name":"order_id"},"ORDER_ITEM_ID":{"type":"TEXT","index":19,"name":"ORDER_ITEM_ID","comment":null,"display_name":"order_item_id"},"ORDER_ACTION_ID":{"type":"TEXT","index":20,"name":"ORDER_ACTION_ID","comment":null,"display_name":"order_action_id"},"PRODUCT_ID":{"type":"TEXT","index":21,"name":"PRODUCT_ID","comment":null,"display_name":"product_id"},"RATE_PLAN_ID":{"type":"TEXT","index":22,"name":"RATE_PLAN_ID","comment":null,"display_name":"rate_plan_id"},"RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":23,"name":"RATE_PLAN_CHARGE_ID","comment":null,"display_name":"rate_plan_charge_id"},"ORIGINAL_RATE_PLAN_CHARGE_ID":{"type":"TEXT","index":24,"name":"ORIGINAL_RATE_PLAN_CHARGE_ID","comment":null,"display_name":"original_rate_plan_charge_id"},"PRODUCT_RATE_PLAN_ID":{"type":"TEXT","index":25,"name":"PRODUCT_RATE_PLAN_ID","comment":null,"display_name":"product_rate_plan_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":26,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"DIM_INVOICE_ITEM_ID":{"type":"TEXT","index":27,"name":"DIM_INVOICE_ITEM_ID","comment":null,"display_name":"dim_invoice_item_id"},"ZBILLING_BATCH_ID":{"type":"TEXT","index":28,"name":"ZBILLING_BATCH_ID","comment":null,"display_name":"zbilling_batch_id"},"RAMP_DEAL_ID":{"type":"TEXT","index":29,"name":"RAMP_DEAL_ID","comment":null,"display_name":"ramp_deal_id"},"K2_BATCH_ID":{"type":"TEXT","index":30,"name":"K2_BATCH_ID","comment":null,"display_name":"k2_batch_id"},"RAMP_ID":{"type":"TEXT","index":31,"name":"RAMP_ID","comment":null,"display_name":"ramp_id"},"SET_OF_BOOKS_ID":{"type":"TEXT","index":32,"name":"SET_OF_BOOKS_ID","comment":null,"display_name":"set_of_books_id"},"BUNDLE_CONFIGURATION_ID":{"type":"TEXT","index":33,"name":"BUNDLE_CONFIGURATION_ID","comment":null,"display_name":"bundle_configuration_id"},"VARIABLE_CONSIDERATION_TYPE_ID":{"type":"TEXT","index":34,"name":"VARIABLE_CONSIDERATION_TYPE_ID","comment":null,"display_name":"variable_consideration_type_id"},"BUNDLE_PARENT_ID":{"type":"TEXT","index":35,"name":"BUNDLE_PARENT_ID","comment":null,"display_name":"bundle_parent_id"},"FAIR_VALUE_GROUP_ID":{"type":"TEXT","index":36,"name":"FAIR_VALUE_GROUP_ID","comment":null,"display_name":"fair_value_group_id"},"FAIR_VALUE_TEMPLATE_ID":{"type":"TEXT","index":37,"name":"FAIR_VALUE_TEMPLATE_ID","comment":null,"display_name":"fair_value_template_id"},"MATERIAL_RIGHTS_LINE_ID":{"type":"TEXT","index":38,"name":"MATERIAL_RIGHTS_LINE_ID","comment":null,"display_name":"material_rights_line_id"},"REFERENCE_DOCUMENT_LINE_ID":{"type":"TEXT","index":39,"name":"REFERENCE_DOCUMENT_LINE_ID","comment":null,"display_name":"reference_document_line_id"},"SPLIT_REFERENCE_DOCUMENT_LINE_ID":{"type":"TEXT","index":40,"name":"SPLIT_REFERENCE_DOCUMENT_LINE_ID","comment":null,"display_name":"split_reference_document_line_id"},"SALES_ORDER_BOOK_DATE_ID":{"type":"NUMBER","index":41,"name":"SALES_ORDER_BOOK_DATE_ID","comment":null,"display_name":"sales_order_book_date_id"},"REVENUE_START_DATE_ID":{"type":"NUMBER","index":42,"name":"REVENUE_START_DATE_ID","comment":null,"display_name":"revenue_start_date_id"},"REVENUE_END_DATE_ID":{"type":"NUMBER","index":43,"name":"REVENUE_END_DATE_ID","comment":null,"display_name":"revenue_end_date_id"},"SCHEDULED_SHIP_DATE_ID":{"type":"NUMBER","index":44,"name":"SCHEDULED_SHIP_DATE_ID","comment":null,"display_name":"scheduled_ship_date_id"},"SHIP_DATE_ID":{"type":"NUMBER","index":45,"name":"SHIP_DATE_ID","comment":null,"display_name":"ship_date_id"},"CONTRACT_MODIFICATION_DATE_ID":{"type":"NUMBER","index":46,"name":"CONTRACT_MODIFICATION_DATE_ID","comment":null,"display_name":"contract_modification_date_id"},"CONTRACT_DATE_ID":{"type":"NUMBER","index":47,"name":"CONTRACT_DATE_ID","comment":null,"display_name":"contract_date_id"},"FAIR_VALUE_DATE_ID":{"type":"NUMBER","index":48,"name":"FAIR_VALUE_DATE_ID","comment":null,"display_name":"fair_value_date_id"},"ORIGINAL_FAIR_VALUE_DATE_ID":{"type":"NUMBER","index":49,"name":"ORIGINAL_FAIR_VALUE_DATE_ID","comment":null,"display_name":"original_fair_value_date_id"},"FAIR_VALUE_EXPIRATION_ID":{"type":"NUMBER","index":50,"name":"FAIR_VALUE_EXPIRATION_ID","comment":null,"display_name":"fair_value_expiration_id"},"FORECAST_DATE_ID":{"type":"NUMBER","index":51,"name":"FORECAST_DATE_ID","comment":null,"display_name":"forecast_date_id"},"UNBILLED_REVERSAL_PERIOD_DATE_ID":{"type":"NUMBER","index":52,"name":"UNBILLED_REVERSAL_PERIOD_DATE_ID","comment":null,"display_name":"unbilled_reversal_period_date_id"},"DEFERRED_PERIOD_DATE_ID":{"type":"NUMBER","index":53,"name":"DEFERRED_PERIOD_DATE_ID","comment":null,"display_name":"deferred_period_date_id"},"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_CREATED_DATE_ID":{"type":"NUMBER","index":54,"name":"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_CREATED_DATE_ID","comment":null,"display_name":"revenue_contract_performance_obligation_created_date_id"},"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_UPDATED_DATE_ID":{"type":"NUMBER","index":55,"name":"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_UPDATED_DATE_ID","comment":null,"display_name":"revenue_contract_performance_obligation_updated_date_id"},"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_NAME":{"type":"TEXT","index":56,"name":"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_NAME","comment":null,"display_name":"revenue_contract_performance_obligation_name"},"REVENUE_CONTRACT_LINE_TERM":{"type":"TEXT","index":57,"name":"REVENUE_CONTRACT_LINE_TERM","comment":null,"display_name":"revenue_contract_line_term"},"REVENUE_AMORTIZATION_DURATION":{"type":"TEXT","index":58,"name":"REVENUE_AMORTIZATION_DURATION","comment":null,"display_name":"revenue_amortization_duration"},"PRODUCT_LIFE_TERM":{"type":"TEXT","index":59,"name":"PRODUCT_LIFE_TERM","comment":null,"display_name":"product_life_term"},"LINK_IDENTIFIER":{"type":"TEXT","index":60,"name":"LINK_IDENTIFIER","comment":null,"display_name":"link_identifier"},"RAMP_IDENTIFIER":{"type":"TEXT","index":61,"name":"RAMP_IDENTIFIER","comment":null,"display_name":"ramp_identifier"},"UNIT_SELL_PRICE":{"type":"FLOAT","index":62,"name":"UNIT_SELL_PRICE","comment":null,"display_name":"unit_sell_price"},"SSP_SELL_PRICE":{"type":"FLOAT","index":63,"name":"SSP_SELL_PRICE","comment":null,"display_name":"ssp_sell_price"},"OLD_SELL_PRICE":{"type":"FLOAT","index":64,"name":"OLD_SELL_PRICE","comment":null,"display_name":"old_sell_price"},"NET_SELL_PRICE":{"type":"FLOAT","index":65,"name":"NET_SELL_PRICE","comment":null,"display_name":"net_sell_price"},"EXTENDED_SELLING_PRICE":{"type":"FLOAT","index":66,"name":"EXTENDED_SELLING_PRICE","comment":null,"display_name":"extended_selling_price"},"LIST_PRICE":{"type":"TEXT","index":67,"name":"LIST_PRICE","comment":null,"display_name":"list_price"},"UNIT_LIST_PRICE":{"type":"FLOAT","index":68,"name":"UNIT_LIST_PRICE","comment":null,"display_name":"unit_list_price"},"SSP_LIST_PRICE":{"type":"FLOAT","index":69,"name":"SSP_LIST_PRICE","comment":null,"display_name":"ssp_list_price"},"NET_LIST_PRICE":{"type":"FLOAT","index":70,"name":"NET_LIST_PRICE","comment":null,"display_name":"net_list_price"},"FAIR_VALUE_PRICE":{"type":"FLOAT","index":71,"name":"FAIR_VALUE_PRICE","comment":null,"display_name":"fair_value_price"},"PREVIOUS_FAIR_VALUE":{"type":"TEXT","index":72,"name":"PREVIOUS_FAIR_VALUE","comment":null,"display_name":"previous_fair_value"},"EXTENDED_FAIR_VALUE_PRICE":{"type":"FLOAT","index":73,"name":"EXTENDED_FAIR_VALUE_PRICE","comment":null,"display_name":"extended_fair_value_price"},"ALLOCATABLE_PRICE":{"type":"TEXT","index":74,"name":"ALLOCATABLE_PRICE","comment":null,"display_name":"allocatable_price"},"ALLOCATABLE_FUNCTIONAL_PRICE":{"type":"TEXT","index":75,"name":"ALLOCATABLE_FUNCTIONAL_PRICE","comment":null,"display_name":"allocatable_functional_price"},"ALLOCATED_PRICE":{"type":"TEXT","index":76,"name":"ALLOCATED_PRICE","comment":null,"display_name":"allocated_price"},"BELOW_FAIR_VALUE_PRICE":{"type":"FLOAT","index":77,"name":"BELOW_FAIR_VALUE_PRICE","comment":null,"display_name":"below_fair_value_price"},"ABOVE_FAIR_VALUE_PRICE":{"type":"FLOAT","index":78,"name":"ABOVE_FAIR_VALUE_PRICE","comment":null,"display_name":"above_fair_value_price"},"DEFERRED_AMOUNT":{"type":"FLOAT","index":79,"name":"DEFERRED_AMOUNT","comment":null,"display_name":"deferred_amount"},"RECOGNIZED_AMOUNT":{"type":"FLOAT","index":80,"name":"RECOGNIZED_AMOUNT","comment":null,"display_name":"recognized_amount"},"BILLED_DEFERRED_AMOUNT":{"type":"TEXT","index":81,"name":"BILLED_DEFERRED_AMOUNT","comment":null,"display_name":"billed_deferred_amount"},"BILLED_RECOGNIZED_AMOUNT":{"type":"TEXT","index":82,"name":"BILLED_RECOGNIZED_AMOUNT","comment":null,"display_name":"billed_recognized_amount"},"PORD_DEFERRED_AMOUNT":{"type":"FLOAT","index":83,"name":"PORD_DEFERRED_AMOUNT","comment":null,"display_name":"pord_deferred_amount"},"PORD_RECOGNIZED_AMOUNT":{"type":"FLOAT","index":84,"name":"PORD_RECOGNIZED_AMOUNT","comment":null,"display_name":"pord_recognized_amount"},"CARVE_AMOUNT":{"type":"FLOAT","index":85,"name":"CARVE_AMOUNT","comment":null,"display_name":"carve_amount"},"CARVE_AMOUNT_IMPRTMT":{"type":"TEXT","index":86,"name":"CARVE_AMOUNT_IMPRTMT","comment":null,"display_name":"carve_amount_imprtmt"},"CUMULATIVE_CARVE_AMOUNT":{"type":"TEXT","index":87,"name":"CUMULATIVE_CARVE_AMOUNT","comment":null,"display_name":"cumulative_carve_amount"},"DISCOUNT_AMOUNT":{"type":"FLOAT","index":88,"name":"DISCOUNT_AMOUNT","comment":null,"display_name":"discount_amount"},"CUMULATIVE_ALLOCATED_AMOUNT":{"type":"TEXT","index":89,"name":"CUMULATIVE_ALLOCATED_AMOUNT","comment":null,"display_name":"cumulative_allocated_amount"},"VARAIABLE_CONSIDERATION_AMOUNT":{"type":"FLOAT","index":90,"name":"VARAIABLE_CONSIDERATION_AMOUNT","comment":null,"display_name":"varaiable_consideration_amount"},"IMPAIRMENT_RETRIEVE_AMOUNT":{"type":"FLOAT","index":91,"name":"IMPAIRMENT_RETRIEVE_AMOUNT","comment":null,"display_name":"impairment_retrieve_amount"},"OVERSTATED_AMOUNT":{"type":"FLOAT","index":92,"name":"OVERSTATED_AMOUNT","comment":null,"display_name":"overstated_amount"},"OVERSTATED_LIST_PRICE_AMOUNT":{"type":"FLOAT","index":93,"name":"OVERSTATED_LIST_PRICE_AMOUNT","comment":null,"display_name":"overstated_list_price_amount"},"RAMP_CARVE_AMOUNT":{"type":"FLOAT","index":94,"name":"RAMP_CARVE_AMOUNT","comment":null,"display_name":"ramp_carve_amount"},"RAMP_CUMULATIVE_CARVE_AMOUNT":{"type":"FLOAT","index":95,"name":"RAMP_CUMULATIVE_CARVE_AMOUNT","comment":null,"display_name":"ramp_cumulative_carve_amount"},"RAMP_CUMULATIVE_ALLOCATED_AMOUNT":{"type":"FLOAT","index":96,"name":"RAMP_CUMULATIVE_ALLOCATED_AMOUNT","comment":null,"display_name":"ramp_cumulative_allocated_amount"},"UNSCHEDULED_ADJUSTMENT":{"type":"TEXT","index":97,"name":"UNSCHEDULED_ADJUSTMENT","comment":null,"display_name":"unscheduled_adjustment"},"ORDER_QUANTITY":{"type":"TEXT","index":98,"name":"ORDER_QUANTITY","comment":null,"display_name":"order_quantity"},"INVOICE_QUANTITY":{"type":"TEXT","index":99,"name":"INVOICE_QUANTITY","comment":null,"display_name":"invoice_quantity"},"RETURN_QUANTITY":{"type":"TEXT","index":100,"name":"RETURN_QUANTITY","comment":null,"display_name":"return_quantity"},"ORIGINAL_QUANTITY":{"type":"FLOAT","index":101,"name":"ORIGINAL_QUANTITY","comment":null,"display_name":"original_quantity"},"FUNCTIONAL_CURRENCY_EXCHAGE_RATE":{"type":"TEXT","index":102,"name":"FUNCTIONAL_CURRENCY_EXCHAGE_RATE","comment":null,"display_name":"functional_currency_exchage_rate"},"REPORTING_CURRENCY_EXCHANGE_RATE":{"type":"TEXT","index":103,"name":"REPORTING_CURRENCY_EXCHANGE_RATE","comment":null,"display_name":"reporting_currency_exchange_rate"},"DISCOUNT_PERCENT":{"type":"FLOAT","index":104,"name":"DISCOUNT_PERCENT","comment":null,"display_name":"discount_percent"},"FAIR_VALUE_PERCENT":{"type":"FLOAT","index":105,"name":"FAIR_VALUE_PERCENT","comment":null,"display_name":"fair_value_percent"},"POSTED_PERCENT":{"type":"FLOAT","index":106,"name":"POSTED_PERCENT","comment":null,"display_name":"posted_percent"},"RELEASED_PERCENT":{"type":"FLOAT","index":107,"name":"RELEASED_PERCENT","comment":null,"display_name":"released_percent"},"TRANSACTION_PRICE_SSP_PERCENT":{"type":"FLOAT","index":108,"name":"TRANSACTION_PRICE_SSP_PERCENT","comment":null,"display_name":"transaction_price_ssp_percent"},"MATERIAL_RIGHTS_ORG_PERCENT":{"type":"FLOAT","index":109,"name":"MATERIAL_RIGHTS_ORG_PERCENT","comment":null,"display_name":"material_rights_org_percent"},"RAMP_ALLOCATION_PERCENT":{"type":"FLOAT","index":110,"name":"RAMP_ALLOCATION_PERCENT","comment":null,"display_name":"ramp_allocation_percent"},"RAMP_ALLOCATABLE_PERCENT":{"type":"FLOAT","index":111,"name":"RAMP_ALLOCATABLE_PERCENT","comment":null,"display_name":"ramp_allocatable_percent"},"RAMP_ALLOCTED_PERCENT":{"type":"FLOAT","index":112,"name":"RAMP_ALLOCTED_PERCENT","comment":null,"display_name":"ramp_allocted_percent"},"TOTAL_BUDGET_HOURS":{"type":"FLOAT","index":113,"name":"TOTAL_BUDGET_HOURS","comment":null,"display_name":"total_budget_hours"},"TOTAL_BUDGET_COST":{"type":"FLOAT","index":114,"name":"TOTAL_BUDGET_COST","comment":null,"display_name":"total_budget_cost"},"IS_CARVE_ELIGIBLE":{"type":"TEXT","index":115,"name":"IS_CARVE_ELIGIBLE","comment":null,"display_name":"is_carve_eligible"},"IS_RETURN":{"type":"TEXT","index":116,"name":"IS_RETURN","comment":null,"display_name":"is_return"},"IS_WITHIN_FAIR_VALUE_RANGE":{"type":"TEXT","index":117,"name":"IS_WITHIN_FAIR_VALUE_RANGE","comment":null,"display_name":"is_within_fair_value_range"},"IS_STATED":{"type":"TEXT","index":118,"name":"IS_STATED","comment":null,"display_name":"is_stated"},"IS_STANDALONE":{"type":"TEXT","index":119,"name":"IS_STANDALONE","comment":null,"display_name":"is_standalone"},"IS_DISCOUNT_ADJUSTMENT":{"type":"TEXT","index":120,"name":"IS_DISCOUNT_ADJUSTMENT","comment":null,"display_name":"is_discount_adjustment"},"IS_FAIR_VALUE_ELIGIBLE":{"type":"TEXT","index":121,"name":"IS_FAIR_VALUE_ELIGIBLE","comment":null,"display_name":"is_fair_value_eligible"},"IS_MANUAL_FAIR_VALUE":{"type":"TEXT","index":122,"name":"IS_MANUAL_FAIR_VALUE","comment":null,"display_name":"is_manual_fair_value"},"IS_UNBILLED":{"type":"TEXT","index":123,"name":"IS_UNBILLED","comment":null,"display_name":"is_unbilled"},"IS_MANUAL_CREATED":{"type":"TEXT","index":124,"name":"IS_MANUAL_CREATED","comment":null,"display_name":"is_manual_created"},"IS_VARIABLE_CONSIDERATION_CLEARING":{"type":"TEXT","index":125,"name":"IS_VARIABLE_CONSIDERATION_CLEARING","comment":null,"display_name":"is_variable_consideration_clearing"},"IS_MANUAL_JOURNAL_ENTRY_LINE":{"type":"TEXT","index":126,"name":"IS_MANUAL_JOURNAL_ENTRY_LINE","comment":null,"display_name":"is_manual_journal_entry_line"},"IS_UPDATE_OR_INSERT":{"type":"TEXT","index":127,"name":"IS_UPDATE_OR_INSERT","comment":null,"display_name":"is_update_or_insert"},"IS_CANCELLED":{"type":"TEXT","index":128,"name":"IS_CANCELLED","comment":null,"display_name":"is_cancelled"},"IS_ALLOCATION_RECOGNITION_HOLD":{"type":"TEXT","index":129,"name":"IS_ALLOCATION_RECOGNITION_HOLD","comment":null,"display_name":"is_allocation_recognition_hold"},"IS_ALLOCATION_SCHEDULE_HOLD":{"type":"TEXT","index":130,"name":"IS_ALLOCATION_SCHEDULE_HOLD","comment":null,"display_name":"is_allocation_schedule_hold"},"IS_ALLOCATION_TREATMENT":{"type":"TEXT","index":131,"name":"IS_ALLOCATION_TREATMENT","comment":null,"display_name":"is_allocation_treatment"},"IS_CONTRA_ENTRY":{"type":"TEXT","index":132,"name":"IS_CONTRA_ENTRY","comment":null,"display_name":"is_contra_entry"},"IS_CONV_WATERFALL":{"type":"TEXT","index":133,"name":"IS_CONV_WATERFALL","comment":null,"display_name":"is_conv_waterfall"},"IS_RECLASS":{"type":"TEXT","index":134,"name":"IS_RECLASS","comment":null,"display_name":"is_reclass"},"IS_REVENUE_RECOGNITION_HOLD":{"type":"TEXT","index":135,"name":"IS_REVENUE_RECOGNITION_HOLD","comment":null,"display_name":"is_revenue_recognition_hold"},"IS_REVENUE_SCHEDULE_HOLD":{"type":"TEXT","index":136,"name":"IS_REVENUE_SCHEDULE_HOLD","comment":null,"display_name":"is_revenue_schedule_hold"},"IS_REVEVNUE_SCHEDULE":{"type":"TEXT","index":137,"name":"IS_REVEVNUE_SCHEDULE","comment":null,"display_name":"is_revevnue_schedule"},"IS_TRANSFER_HOLD":{"type":"TEXT","index":138,"name":"IS_TRANSFER_HOLD","comment":null,"display_name":"is_transfer_hold"},"IS_ALLOCATION_DELINK":{"type":"TEXT","index":139,"name":"IS_ALLOCATION_DELINK","comment":null,"display_name":"is_allocation_delink"},"IS_CANCELED_BY_REDUCTION_ORDER":{"type":"TEXT","index":140,"name":"IS_CANCELED_BY_REDUCTION_ORDER","comment":null,"display_name":"is_canceled_by_reduction_order"},"IS_LEVEL_2_CARVE_ELIGIBLE":{"type":"TEXT","index":141,"name":"IS_LEVEL_2_CARVE_ELIGIBLE","comment":null,"display_name":"is_level_2_carve_eligible"},"IS_RSSP_FAILED":{"type":"TEXT","index":142,"name":"IS_RSSP_FAILED","comment":null,"display_name":"is_rssp_failed"},"IS_VARIABLE_CONSIDERATION_ELIGIBLE":{"type":"TEXT","index":143,"name":"IS_VARIABLE_CONSIDERATION_ELIGIBLE","comment":null,"display_name":"is_variable_consideration_eligible"},"IS_GHOST_LINE":{"type":"TEXT","index":144,"name":"IS_GHOST_LINE","comment":null,"display_name":"is_ghost_line"},"IS_INITIAL_CONTRACT":{"type":"TEXT","index":145,"name":"IS_INITIAL_CONTRACT","comment":null,"display_name":"is_initial_contract"},"IS_MATERIAL_RIGHTS":{"type":"TEXT","index":146,"name":"IS_MATERIAL_RIGHTS","comment":null,"display_name":"is_material_rights"},"IS_RAMP_UP":{"type":"TEXT","index":147,"name":"IS_RAMP_UP","comment":null,"display_name":"is_ramp_up"},"IS_SPLIT":{"type":"TEXT","index":148,"name":"IS_SPLIT","comment":null,"display_name":"is_split"},"IS_ORD_ORCH":{"type":"TEXT","index":149,"name":"IS_ORD_ORCH","comment":null,"display_name":"is_ord_orch"},"IS_NEW_PERFORMANCE_OBLIGATION":{"type":"TEXT","index":150,"name":"IS_NEW_PERFORMANCE_OBLIGATION","comment":null,"display_name":"is_new_performance_obligation"},"FULL_CM_FLAG":{"type":"TEXT","index":151,"name":"FULL_CM_FLAG","comment":null,"display_name":"full_cm_flag"},"IS_SKIP_CONTRACT_MODIFICATION":{"type":"TEXT","index":152,"name":"IS_SKIP_CONTRACT_MODIFICATION","comment":null,"display_name":"is_skip_contract_modification"},"IS_IMPAIRMENT_EXCEPTION":{"type":"TEXT","index":153,"name":"IS_IMPAIRMENT_EXCEPTION","comment":null,"display_name":"is_impairment_exception"},"IS_PROS_DEFERRED":{"type":"TEXT","index":154,"name":"IS_PROS_DEFERRED","comment":null,"display_name":"is_pros_deferred"},"IS_MANUAL_SALES_ORDER":{"type":"TEXT","index":155,"name":"IS_MANUAL_SALES_ORDER","comment":null,"display_name":"is_manual_sales_order"},"IS_ZERO_DOLLAR_RECOGNITION":{"type":"TEXT","index":156,"name":"IS_ZERO_DOLLAR_RECOGNITION","comment":null,"display_name":"is_zero_dollar_recognition"},"IS_FULL_PORD_DISCOUNT":{"type":"TEXT","index":157,"name":"IS_FULL_PORD_DISCOUNT","comment":null,"display_name":"is_full_pord_discount"},"IS_ZERO_DOLLAR_REDUCTION_ORDER":{"type":"TEXT","index":158,"name":"IS_ZERO_DOLLAR_REDUCTION_ORDER","comment":null,"display_name":"is_zero_dollar_reduction_order"},"IS_RESTRICTED_SALES_ORDER_VALUE_UPDATE":{"type":"TEXT","index":159,"name":"IS_RESTRICTED_SALES_ORDER_VALUE_UPDATE","comment":null,"display_name":"is_restricted_sales_order_value_update"},"IS_ZBILLING_COMPLETE":{"type":"TEXT","index":160,"name":"IS_ZBILLING_COMPLETE","comment":null,"display_name":"is_zbilling_complete"},"IS_ZBILLING_UNSCHEDULED_ADJUSTMENT":{"type":"TEXT","index":161,"name":"IS_ZBILLING_UNSCHEDULED_ADJUSTMENT","comment":null,"display_name":"is_zbilling_unscheduled_adjustment"},"IS_ZBILLLING_CANCELLED_LINE":{"type":"TEXT","index":162,"name":"IS_ZBILLLING_CANCELLED_LINE","comment":null,"display_name":"is_zbillling_cancelled_line"},"IS_NON_DISTINCT_PERFORMANCE_OBLIGATION":{"type":"TEXT","index":163,"name":"IS_NON_DISTINCT_PERFORMANCE_OBLIGATION","comment":null,"display_name":"is_non_distinct_performance_obligation"},"IS_ZBILLING_CONTRACT_MODIFICATION_RULE":{"type":"TEXT","index":164,"name":"IS_ZBILLING_CONTRACT_MODIFICATION_RULE","comment":null,"display_name":"is_zbilling_contract_modification_rule"},"IS_SYSTEM_INV_EXIST":{"type":"TEXT","index":165,"name":"IS_SYSTEM_INV_EXIST","comment":null,"display_name":"is_system_inv_exist"},"IS_ZBILLLING_MANUAL_SALES_ORDER":{"type":"TEXT","index":166,"name":"IS_ZBILLLING_MANUAL_SALES_ORDER","comment":null,"display_name":"is_zbillling_manual_sales_order"},"IS_SALES_ORDER_TERM_CHANGE":{"type":"TEXT","index":167,"name":"IS_SALES_ORDER_TERM_CHANGE","comment":null,"display_name":"is_sales_order_term_change"},"IS_OVERAGE_EXISTS":{"type":"TEXT","index":168,"name":"IS_OVERAGE_EXISTS","comment":null,"display_name":"is_overage_exists"},"IS_ZBILLING_RAMP":{"type":"TEXT","index":169,"name":"IS_ZBILLING_RAMP","comment":null,"display_name":"is_zbilling_ramp"},"IS_UPDATED_BY_REDUCTION_ORDER":{"type":"TEXT","index":170,"name":"IS_UPDATED_BY_REDUCTION_ORDER","comment":null,"display_name":"is_updated_by_reduction_order"},"IS_UNBILLED_EVERGREEN":{"type":"TEXT","index":171,"name":"IS_UNBILLED_EVERGREEN","comment":null,"display_name":"is_unbilled_evergreen"},"IS_RAMP_CARVE":{"type":"TEXT","index":172,"name":"IS_RAMP_CARVE","comment":null,"display_name":"is_ramp_carve"},"IS_ZERO_F":{"type":"TEXT","index":173,"name":"IS_ZERO_F","comment":null,"display_name":"is_zero_f"},"IS_PROS_DECRSE_P":{"type":"TEXT","index":174,"name":"IS_PROS_DECRSE_P","comment":null,"display_name":"is_pros_decrse_p"},"SECURITY_ATTRIBUTE_VALUE":{"type":"TEXT","index":175,"name":"SECURITY_ATTRIBUTE_VALUE","comment":null,"display_name":"security_attribute_value"},"REVENUE_CONTRACT_LINE_CREATED_DATE_ID":{"type":"NUMBER","index":176,"name":"REVENUE_CONTRACT_LINE_CREATED_DATE_ID","comment":null,"display_name":"revenue_contract_line_created_date_id"},"REVENUE_CONTRACT_LINE_UPDATED_DATE_ID":{"type":"NUMBER","index":177,"name":"REVENUE_CONTRACT_LINE_UPDATED_DATE_ID","comment":null,"display_name":"revenue_contract_line_updated_date_id"},"INCREMENTAL_UPDATE_DATE_ID":{"type":"NUMBER","index":178,"name":"INCREMENTAL_UPDATE_DATE_ID","comment":null,"display_name":"incremental_update_date_id"},"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_CREATED_BY":{"type":"TEXT","index":179,"name":"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_CREATED_BY","comment":null,"display_name":"revenue_contract_performance_obligation_created_by"},"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_UPDATED_BY":{"type":"TEXT","index":180,"name":"REVENUE_CONTRACT_PERFORMANCE_OBLIGATION_UPDATED_BY","comment":null,"display_name":"revenue_contract_performance_obligation_updated_by"},"CREATED_BY":{"type":"TEXT","index":181,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":182,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":183,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":184,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":185,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":186,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":164235776,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_revenue_contract_line","raw_sql":"$1d","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_performance_obligation_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_performance_obligation_source","model.gitlab_snowflake.date_details_source","model.gitlab_snowflake.date_details_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.prep_quote","model.gitlab_snowflake.prep_quote"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","facts_financial","restricted_safe","fct_revenue_contract_line"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_financial/restricted_safe/fct_revenue_contract_line.sql","original_file_path":"models/common/facts_financial/restricted_safe/fct_revenue_contract_line.sql","name":"fct_revenue_contract_line","alias":"fct_revenue_contract_line","checksum":{"name":"sha256","checksum":"e1ae49e94d41f4d19ac3689c756c038a30419ecb444c22654a22476172fcfcb7"},"tags":["safe"],"refs":[["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_performance_obligation_source"],["zuora_revenue_revenue_contract_performance_obligation_source"],["date_details_source"],["date_details_source"],["zuora_account_source"],["zuora_account_source"],["prep_quote"],["prep_quote"]],"sources":[],"metrics":[],"description":"Revenue contract line details including the transaction amount, functional amount, and connections to subscription, performance obligation, crm account, and product details.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_financial/restricted_safe/fct_revenue_contract_line.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033752.315641,"compiled_sql":"$1e","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.fct_revenue_contract_line","label":"fct_revenue_contract_line"},{"metadata":{"type":"VIEW","schema":"RESTRICTED_SAFE_WORKSPACE_FINANCE","name":"RPT_MANUAL_TRUE_UP_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_NAME":{"type":"TEXT","index":1,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":4,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"TEXT","index":5,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"TEXT","index":6,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"DIM_CHARGE_ID":{"type":"TEXT","index":7,"name":"DIM_CHARGE_ID","comment":null,"display_name":"dim_charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":8,"name":"DIM_PRODUCT_DETAIL_ID","comment":null,"display_name":"dim_product_detail_id"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":9,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":10,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":11,"name":"dim_billing_account_id","comment":null,"description":"Unique identifier of a billing account","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"EFFECTIVE_START_DATE_ID":{"type":"NUMBER","index":14,"name":"EFFECTIVE_START_DATE_ID","comment":null,"display_name":"effective_start_date_id"},"EFFECTIVE_END_DATE_ID":{"type":"NUMBER","index":15,"name":"EFFECTIVE_END_DATE_ID","comment":null,"display_name":"effective_end_date_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"RATE_PLAN_NAME":{"type":"TEXT","index":17,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":18,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"IS_LAST_SEGMENT":{"type":"TEXT","index":19,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"DISCOUNT_LEVEL":{"type":"TEXT","index":20,"name":"DISCOUNT_LEVEL","comment":null,"display_name":"discount_level"},"CHARGE_TYPE":{"type":"TEXT","index":21,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"RATE_PLAN_CHARGE_AMENDEMENT_TYPE":{"type":"TEXT","index":22,"name":"RATE_PLAN_CHARGE_AMENDEMENT_TYPE","comment":null,"display_name":"rate_plan_charge_amendement_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":23,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"IS_PAID_IN_FULL":{"type":"TEXT","index":24,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"MONTHS_OF_FUTURE_BILLINGS":{"type":"NUMBER","index":25,"name":"MONTHS_OF_FUTURE_BILLINGS","comment":null,"display_name":"months_of_future_billings"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":26,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":27,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"EFFECTIVE_START_DATE":{"type":"DATE","index":28,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":29,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":30,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":31,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGED_THROUGH_DATE":{"type":"DATE","index":32,"name":"CHARGED_THROUGH_DATE","comment":null,"display_name":"charged_through_date"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":33,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":34,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"CHARGE_TERM":{"type":"NUMBER","index":35,"name":"CHARGE_TERM","comment":null,"display_name":"charge_term"},"ADJUSTMENT":{"type":"FLOAT","index":36,"name":"adjustment","comment":null,"description":"Amount of ARR which needs to be adjusted for the true-up","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"adjustment"},"MRR":{"type":"FLOAT","index":37,"name":"MRR","comment":null,"display_name":"mrr"},"PREVIOUS_MRR_CALC":{"type":"TEXT","index":38,"name":"PREVIOUS_MRR_CALC","comment":null,"display_name":"previous_mrr_calc"},"PREVIOUS_MRR":{"type":"TEXT","index":39,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR_CALC":{"type":"TEXT","index":40,"name":"DELTA_MRR_CALC","comment":null,"display_name":"delta_mrr_calc"},"DELTA_MRR":{"type":"TEXT","index":41,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"DELTA_MRC":{"type":"TEXT","index":42,"name":"DELTA_MRC","comment":null,"display_name":"delta_mrc"},"ARR":{"type":"FLOAT","index":43,"name":"ARR","comment":null,"display_name":"arr"},"PREVIOUS_ARR":{"type":"TEXT","index":44,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARC":{"type":"TEXT","index":45,"name":"DELTA_ARC","comment":null,"display_name":"delta_arc"},"DELTA_ARR":{"type":"TEXT","index":46,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"NUMBER","index":47,"name":"QUANTITY","comment":null,"display_name":"quantity"},"PREVIOUS_QUANTITY_CALC":{"type":"TEXT","index":48,"name":"PREVIOUS_QUANTITY_CALC","comment":null,"display_name":"previous_quantity_calc"},"PREVIOUS_QUANTITY":{"type":"TEXT","index":49,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY_CALC":{"type":"TEXT","index":50,"name":"DELTA_QUANTITY_CALC","comment":null,"display_name":"delta_quantity_calc"},"DELTA_QUANTITY":{"type":"TEXT","index":51,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"TCV":{"type":"TEXT","index":52,"name":"TCV","comment":null,"display_name":"tcv"},"DELTA_TCV":{"type":"TEXT","index":53,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":54,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"CREATED_BY":{"type":"TEXT","index":55,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":56,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":57,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":58,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":59,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":60,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"has_stats":{"id":"has_stats","label":"Has Stats?","value":false,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_manual_true_up_charge","raw_sql":"$1f","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_finance","database":"PROD","tags":["workspace","safe"],"meta":{},"materialized":"view","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_finance","fqn":["gitlab_snowflake","workspaces","workspace_finance","restricted_safe","rpt_manual_true_up_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_finance/restricted_safe/rpt_manual_true_up_charge.sql","original_file_path":"models/workspaces/workspace_finance/restricted_safe/rpt_manual_true_up_charge.sql","name":"rpt_manual_true_up_charge","alias":"rpt_manual_true_up_charge","checksum":{"name":"sha256","checksum":"7aae28b9dd2ac4dcc82abd2d3bb0461ab2fbbd2216a31b7c7e4fcbbdba990c17"},"tags":["workspace","safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["sfdc_account_source"],["sfdc_account_source"],["zuora_account_source"],["zuora_account_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_manual_journal_entry_source"],["zuora_revenue_manual_journal_entry_source"]],"sources":[],"metrics":[],"description":"Report table for tracking true up changes from Zuora Revenue which are added manually into ARR modeling.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_finance/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_finance/restricted_safe/rpt_manual_true_up_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_finance","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"view","tags":["safe"],"secure":true},"created_at":1689033734.2425058,"compiled_sql":"$20","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_finance.rpt_manual_true_up_charge","label":"rpt_manual_true_up_charge"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_WORKSPACE_SALES","name":"RPT_DELETED_CRM_ACCOUNT_ON_BILLING_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":1,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID_MERGED":{"type":"TEXT","index":2,"name":"DIM_CRM_ACCOUNT_ID_MERGED","comment":null,"display_name":"dim_crm_account_id_merged"},"DIM_CRM_ACCOUNT_ID_ZUORA":{"type":"TEXT","index":3,"name":"DIM_CRM_ACCOUNT_ID_ZUORA","comment":null,"display_name":"dim_crm_account_id_zuora"},"BILLING_ACCOUNT_NUMBER":{"type":"TEXT","index":4,"name":"BILLING_ACCOUNT_NUMBER","comment":null,"display_name":"billing_account_number"},"CREATED_BY":{"type":"TEXT","index":5,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":6,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":7,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":8,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":9,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":10,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 18:46UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":10752,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.rpt_deleted_crm_account_on_billing_account","raw_sql":"$21","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_query_api_users_source","model.gitlab_snowflake.zuora_query_api_users_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_workspace_sales","database":"PROD","tags":["workspace","safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_workspace_sales","fqn":["gitlab_snowflake","workspaces","workspace_sales","restricted_safe","rpt_deleted_crm_account_on_billing_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"workspaces/workspace_sales/restricted_safe/rpt_deleted_crm_account_on_billing_account.sql","original_file_path":"models/workspaces/workspace_sales/restricted_safe/rpt_deleted_crm_account_on_billing_account.sql","name":"rpt_deleted_crm_account_on_billing_account","alias":"rpt_deleted_crm_account_on_billing_account","checksum":{"name":"sha256","checksum":"2af2591508af0bc904cd66992da9a645822f1d159b74bf72cd99416e643b17bc"},"tags":["workspace","safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_account_source"],["zuora_account_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_query_api_users_source"],["zuora_query_api_users_source"]],"sources":[],"metrics":[],"description":"Zuora billing accounts with the original CRM account id, and the merged CRM account id computed in the data warehouse. This will be used to create a report for the billing team to track Zuora accounts associated with deleted CRM accounts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/workspaces/workspace_sales/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/workspaces/workspace_sales/restricted_safe/rpt_deleted_crm_account_on_billing_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_workspace_sales","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033731.9647126,"compiled_sql":"$22","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_workspace_sales.rpt_deleted_crm_account_on_billing_account","label":"rpt_deleted_crm_account_on_billing_account"},{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"ZUORA_ACCOUNT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"account_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"account_id"},"COMMUNICATION_PROFILE_ID":{"type":"TEXT","index":2,"name":"COMMUNICATION_PROFILE_ID","comment":null,"display_name":"communication_profile_id"},"CRM_ID":{"type":"TEXT","index":3,"name":"crm_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"crm_id"},"DEFAULT_PAYMENT_METHOD_ID":{"type":"TEXT","index":4,"name":"DEFAULT_PAYMENT_METHOD_ID","comment":null,"display_name":"default_payment_method_id"},"INVOICE_TEMPLATE_ID":{"type":"TEXT","index":5,"name":"INVOICE_TEMPLATE_ID","comment":null,"display_name":"invoice_template_id"},"PARENT_ID":{"type":"TEXT","index":6,"name":"PARENT_ID","comment":null,"display_name":"parent_id"},"SOLD_TO_CONTACT_ID":{"type":"TEXT","index":7,"name":"SOLD_TO_CONTACT_ID","comment":null,"display_name":"sold_to_contact_id"},"BILL_TO_CONTACT_ID":{"type":"TEXT","index":8,"name":"BILL_TO_CONTACT_ID","comment":null,"display_name":"bill_to_contact_id"},"TAX_EXEMPT_CERTIFICATE_ID":{"type":"TEXT","index":9,"name":"TAX_EXEMPT_CERTIFICATE_ID","comment":null,"display_name":"tax_exempt_certificate_id"},"TAX_EXEMPT_CERTIFICATE_TYPE":{"type":"TEXT","index":10,"name":"TAX_EXEMPT_CERTIFICATE_TYPE","comment":null,"display_name":"tax_exempt_certificate_type"},"ACCOUNT_NUMBER":{"type":"TEXT","index":11,"name":"ACCOUNT_NUMBER","comment":null,"display_name":"account_number"},"ACCOUNT_NAME":{"type":"TEXT","index":12,"name":"account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_name"},"ACCOUNT_NOTES":{"type":"TEXT","index":13,"name":"ACCOUNT_NOTES","comment":null,"display_name":"account_notes"},"PURCHASE_ORDER_NUMBER":{"type":"TEXT","index":14,"name":"PURCHASE_ORDER_NUMBER","comment":null,"display_name":"purchase_order_number"},"SFDC_ACCOUNT_CODE":{"type":"TEXT","index":15,"name":"SFDC_ACCOUNT_CODE","comment":null,"display_name":"sfdc_account_code"},"STATUS":{"type":"TEXT","index":16,"name":"STATUS","comment":null,"display_name":"status"},"SFDC_ENTITY":{"type":"TEXT","index":17,"name":"SFDC_ENTITY","comment":null,"display_name":"sfdc_entity"},"AUTO_PAY":{"type":"BOOLEAN","index":18,"name":"AUTO_PAY","comment":null,"display_name":"auto_pay"},"BALANCE":{"type":"FLOAT","index":19,"name":"BALANCE","comment":null,"display_name":"balance"},"CREDIT_BALANCE":{"type":"FLOAT","index":20,"name":"CREDIT_BALANCE","comment":null,"display_name":"credit_balance"},"BILL_CYCLE_DAY":{"type":"NUMBER","index":21,"name":"BILL_CYCLE_DAY","comment":null,"display_name":"bill_cycle_day"},"CURRENCY":{"type":"TEXT","index":22,"name":"CURRENCY","comment":null,"display_name":"currency"},"SFDC_CONVERSION_RATE":{"type":"TEXT","index":23,"name":"SFDC_CONVERSION_RATE","comment":null,"display_name":"sfdc_conversion_rate"},"PAYMENT_TERM":{"type":"TEXT","index":24,"name":"PAYMENT_TERM","comment":null,"display_name":"payment_term"},"ALLOW_INVOICE_EDIT":{"type":"BOOLEAN","index":25,"name":"ALLOW_INVOICE_EDIT","comment":null,"display_name":"allow_invoice_edit"},"BATCH":{"type":"TEXT","index":26,"name":"BATCH","comment":null,"display_name":"batch"},"INVOICE_DELIVERY_PREFS_EMAIL":{"type":"BOOLEAN","index":27,"name":"INVOICE_DELIVERY_PREFS_EMAIL","comment":null,"display_name":"invoice_delivery_prefs_email"},"INVOICE_DELIVERY_PREFS_PRINT":{"type":"BOOLEAN","index":28,"name":"INVOICE_DELIVERY_PREFS_PRINT","comment":null,"display_name":"invoice_delivery_prefs_print"},"PAYMENT_GATEWAY":{"type":"TEXT","index":29,"name":"PAYMENT_GATEWAY","comment":null,"display_name":"payment_gateway"},"CUSTOMER_SERVICE_REP_NAME":{"type":"TEXT","index":30,"name":"CUSTOMER_SERVICE_REP_NAME","comment":null,"display_name":"customer_service_rep_name"},"SALES_REP_NAME":{"type":"TEXT","index":31,"name":"SALES_REP_NAME","comment":null,"display_name":"sales_rep_name"},"ADDITIONAL_EMAIL_ADDRESSES":{"type":"TEXT","index":32,"name":"ADDITIONAL_EMAIL_ADDRESSES","comment":null,"display_name":"additional_email_addresses"},"SFDC_PARENT":{"type":"TEXT","index":33,"name":"SFDC_PARENT","comment":null,"display_name":"sfdc_parent"},"SSP_CHANNEL":{"type":"TEXT","index":34,"name":"SSP_CHANNEL","comment":null,"display_name":"ssp_channel"},"PO_REQUIRED":{"type":"TEXT","index":35,"name":"PO_REQUIRED","comment":null,"display_name":"po_required"},"LAST_INVOICE_DATE":{"type":"TIMESTAMP_TZ","index":36,"name":"LAST_INVOICE_DATE","comment":null,"display_name":"last_invoice_date"},"CREATED_BY_ID":{"type":"TEXT","index":37,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"CREATED_DATE":{"type":"TIMESTAMP_TZ","index":38,"name":"CREATED_DATE","comment":null,"display_name":"created_date"},"UPDATED_BY_ID":{"type":"TEXT","index":39,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE":{"type":"TIMESTAMP_TZ","index":40,"name":"UPDATED_DATE","comment":null,"display_name":"updated_date"},"IS_DELETED":{"type":"BOOLEAN","index":41,"name":"IS_DELETED","comment":null,"display_name":"is_deleted"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 08:57UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":6356992,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_account","raw_sql":"-- depends_on: {{ ref('zuora_excluded_accounts') }}\n\nWITH source AS (\n\n    SELECT *\n    FROM {{ ref('zuora_account_source') }}\n\n)\n\nSELECT *\nFROM source\nWHERE is_deleted = FALSE\n  AND account_id NOT IN ({{ zuora_excluded_accounts() }})","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.zuora_excluded_accounts","macro.gitlab_snowflake.mask_model"],"nodes":["seed.gitlab_snowflake.zuora_excluded_accounts","seed.gitlab_snowflake.zuora_excluded_accounts","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","seed.gitlab_snowflake.zuora_excluded_accounts","seed.gitlab_snowflake.zuora_excluded_accounts"]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","legacy","zuora","intermediate","zuora_account"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/intermediate/zuora_account.sql","original_file_path":"models/legacy/zuora/intermediate/zuora_account.sql","name":"zuora_account","alias":"zuora_account","checksum":{"name":"sha256","checksum":"9ddb20d7556dfc369b50de37f1d088f8817792e112d796fedafae45051f1e4fd"},"tags":[],"refs":[["zuora_excluded_accounts"],["zuora_excluded_accounts"],["zuora_account_source"],["zuora_account_source"],["zuora_excluded_accounts"],["zuora_excluded_accounts"]],"sources":[],"metrics":[],"description":"Base model for Zuora Accounts","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/intermediate/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/intermediate/zuora_account.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table"},"created_at":1689033763.043933,"compiled_sql":"-- depends_on: \"PROD\".legacy.zuora_excluded_accounts\n\nWITH source AS (\n\n    SELECT *\n    FROM \"PREP\".zuora.zuora_account_source\n\n)\n\nSELECT *\nFROM source\nWHERE is_deleted = FALSE\n  AND account_id NOT IN (\n\n    SELECT DISTINCT account_id\n    FROM \"PROD\".legacy.zuora_excluded_accounts\n    WHERE account_id IS NOT NULL\n\n )","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.zuora_account","label":"zuora_account"},{"metadata":{"type":"BASE TABLE","schema":"COMMON_PREP","name":"PREP_SUBSCRIPTION","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_subscription_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_crm_account_id","comment":null,"description":"account id from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"The id of the Zuora account the subscription is associated with","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":4,"name":"DIM_BILLING_ACCOUNT_ID_INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_invoice_owner_account"},"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT":{"type":"TEXT","index":5,"name":"DIM_BILLING_ACCOUNT_ID_CREATOR_ACCOUNT","comment":null,"display_name":"dim_billing_account_id_creator_account"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":6,"name":"dim_crm_opportunity_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id"},"DIM_CRM_OPPORTUNITY_ID_CURRENT_OPEN_RENEWAL":{"type":"TEXT","index":7,"name":"dim_crm_opportunity_id_current_open_renewal","comment":null,"description":"The current open renewal opportunity mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_current_open_renewal"},"DIM_CRM_OPPORTUNITY_ID_CLOSED_LOST_RENEWAL":{"type":"TEXT","index":8,"name":"dim_crm_opportunity_id_closed_lost_renewal","comment":null,"description":"The closed lost renewal opportunity, where applicable, mapped mapped to a subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_opportunity_id_closed_lost_renewal"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":9,"name":"dim_subscription_id_original","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_original"},"DIM_SUBSCRIPTION_ID_PREVIOUS":{"type":"TEXT","index":10,"name":"dim_subscription_id_previous","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_subscription_id_previous"},"DIM_AMENDMENT_ID_SUBSCRIPTION":{"type":"TEXT","index":11,"name":"DIM_AMENDMENT_ID_SUBSCRIPTION","comment":null,"display_name":"dim_amendment_id_subscription"},"CREATED_BY_ID":{"type":"TEXT","index":12,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":13,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":14,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":15,"name":"subscription_name_slugify","comment":null,"description":"The unique identifier of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name_slugify"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":16,"name":"subscription_status","comment":null,"description":"The status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":17,"name":"subscription_version","comment":null,"description":"The version number of the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME":{"type":"TEXT","index":18,"name":"zuora_renewal_subscription_name","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name"},"ZUORA_RENEWAL_SUBSCRIPTION_NAME_SLUGIFY":{"type":"ARRAY","index":19,"name":"zuora_renewal_subscription_name_slugify","comment":null,"description":"name of the linked subscription that renews the prior subscription in a lineage","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"zuora_renewal_subscription_name_slugify"},"CURRENT_TERM":{"type":"NUMBER","index":20,"name":"CURRENT_TERM","comment":null,"display_name":"current_term"},"RENEWAL_TERM":{"type":"NUMBER","index":21,"name":"renewal_term","comment":null,"description":"The length of the period for the subscription renewal term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term"},"RENEWAL_TERM_PERIOD_TYPE":{"type":"TEXT","index":22,"name":"renewal_term_period_type","comment":null,"description":"The period type for the subscription renewal term. This field is used with the renewal term field to specify the subscription renewal term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"renewal_term_period_type"},"EOA_STARTER_BRONZE_OFFER_ACCEPTED":{"type":"TEXT","index":23,"name":"EOA_STARTER_BRONZE_OFFER_ACCEPTED","comment":null,"display_name":"eoa_starter_bronze_offer_accepted"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":24,"name":"subscription_sales_type","comment":null,"description":"Identifies whether a subscription is Sales-Assisted or Self-Service / Web Direct.","meta":{},"data_type":null,"quote":null,"tags":["tdf"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Sales-Assisted, Self-Service"}],"display_name":"subscription_sales_type"},"NAMESPACE_NAME":{"type":"TEXT","index":25,"name":"namespace_name","comment":null,"description":"The namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_name"},"NAMESPACE_ID":{"type":"TEXT","index":26,"name":"namespace_id","comment":null,"description":"The id of the namespace related to the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"namespace_id"},"INVOICE_OWNER_ACCOUNT":{"type":"TEXT","index":27,"name":"INVOICE_OWNER_ACCOUNT","comment":null,"display_name":"invoice_owner_account"},"CREATOR_ACCOUNT":{"type":"TEXT","index":28,"name":"CREATOR_ACCOUNT","comment":null,"display_name":"creator_account"},"WAS_PURCHASED_THROUGH_RESELLER":{"type":"BOOLEAN","index":29,"name":"WAS_PURCHASED_THROUGH_RESELLER","comment":null,"display_name":"was_purchased_through_reseller"},"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE":{"type":"TEXT","index":30,"name":"MULTI_YEAR_DEAL_SUBSCRIPTION_LINKAGE","comment":null,"display_name":"multi_year_deal_subscription_linkage"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":31,"name":"subscription_start_date","comment":null,"description":"The date when the subscription term starts. This date is the same as the start date of the original term, which isn't necessarily the start date of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":32,"name":"subscription_end_date","comment":null,"description":"The date when the subscription term ends, where the subscription ends at midnight the day before. For example, if the SubscriptionEndDate is 12/31/2016, the subscriptions ends at midnight (00:00:00 hours) on 12/30/2016. This date is the same as the term end date or the cancelation date, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_START_MONTH":{"type":"DATE","index":33,"name":"subscription_start_month","comment":null,"description":"The month when the subscription term starts. This month is the same as the start month of the original term, which isn't necessarily the start month of the current or new term.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_month"},"SUBSCRIPTION_END_MONTH":{"type":"DATE","index":34,"name":"subscription_end_month","comment":null,"description":"The month when the subscription term ends. This month is the same as the term end month or the cancelation month, as appropriate.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_month"},"SUBSCRIPTION_END_FISCAL_YEAR":{"type":"NUMBER","index":35,"name":"SUBSCRIPTION_END_FISCAL_YEAR","comment":null,"display_name":"subscription_end_fiscal_year"},"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY":{"type":"TEXT","index":36,"name":"SUBSCRIPTION_END_FISCAL_QUARTER_NAME_FY","comment":null,"display_name":"subscription_end_fiscal_quarter_name_fy"},"TERM_START_DATE":{"type":"DATE","index":37,"name":"TERM_START_DATE","comment":null,"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":38,"name":"TERM_END_DATE","comment":null,"display_name":"term_end_date"},"TERM_START_MONTH":{"type":"DATE","index":39,"name":"TERM_START_MONTH","comment":null,"display_name":"term_start_month"},"TERM_END_MONTH":{"type":"DATE","index":40,"name":"TERM_END_MONTH","comment":null,"display_name":"term_end_month"},"TERM_START_FISCAL_YEAR":{"type":"NUMBER","index":41,"name":"TERM_START_FISCAL_YEAR","comment":null,"display_name":"term_start_fiscal_year"},"TERM_END_FISCAL_YEAR":{"type":"NUMBER","index":42,"name":"TERM_END_FISCAL_YEAR","comment":null,"display_name":"term_end_fiscal_year"},"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION":{"type":"BOOLEAN","index":43,"name":"IS_SINGLE_FISCAL_YEAR_TERM_SUBSCRIPTION","comment":null,"display_name":"is_single_fiscal_year_term_subscription"},"SECOND_ACTIVE_RENEWAL_MONTH":{"type":"DATE","index":44,"name":"SECOND_ACTIVE_RENEWAL_MONTH","comment":null,"display_name":"second_active_renewal_month"},"CANCELLED_DATE":{"type":"TIMESTAMP_TZ","index":45,"name":"CANCELLED_DATE","comment":null,"display_name":"cancelled_date"},"AUTO_RENEW_NATIVE_HIST":{"type":"BOOLEAN","index":46,"name":"AUTO_RENEW_NATIVE_HIST","comment":null,"display_name":"auto_renew_native_hist"},"AUTO_RENEW_CUSTOMERDOT_HIST":{"type":"TEXT","index":47,"name":"AUTO_RENEW_CUSTOMERDOT_HIST","comment":null,"display_name":"auto_renew_customerdot_hist"},"TURN_ON_CLOUD_LICENSING":{"type":"TEXT","index":48,"name":"TURN_ON_CLOUD_LICENSING","comment":null,"display_name":"turn_on_cloud_licensing"},"TURN_ON_OPERATIONAL_METRICS":{"type":"TEXT","index":49,"name":"TURN_ON_OPERATIONAL_METRICS","comment":null,"display_name":"turn_on_operational_metrics"},"CONTRACT_OPERATIONAL_METRICS":{"type":"TEXT","index":50,"name":"CONTRACT_OPERATIONAL_METRICS","comment":null,"display_name":"contract_operational_metrics"},"TURN_ON_USAGE_PING_REQUIRED_METRICS":{"type":"TEXT","index":51,"name":"TURN_ON_USAGE_PING_REQUIRED_METRICS","comment":null,"display_name":"turn_on_usage_ping_required_metrics"},"CONTRACT_AUTO_RENEWAL":{"type":"TEXT","index":52,"name":"CONTRACT_AUTO_RENEWAL","comment":null,"display_name":"contract_auto_renewal"},"TURN_ON_AUTO_RENEWAL":{"type":"TEXT","index":53,"name":"TURN_ON_AUTO_RENEWAL","comment":null,"display_name":"turn_on_auto_renewal"},"CONTRACT_SEAT_RECONCILIATION":{"type":"TEXT","index":54,"name":"CONTRACT_SEAT_RECONCILIATION","comment":null,"display_name":"contract_seat_reconciliation"},"TURN_ON_SEAT_RECONCILIATION":{"type":"TEXT","index":55,"name":"TURN_ON_SEAT_RECONCILIATION","comment":null,"display_name":"turn_on_seat_reconciliation"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":56,"name":"SUBSCRIPTION_CREATED_DATE","comment":null,"display_name":"subscription_created_date"},"SUBSCRIPTION_UPDATED_DATE":{"type":"DATE","index":57,"name":"SUBSCRIPTION_UPDATED_DATE","comment":null,"display_name":"subscription_updated_date"},"CREATED_BY":{"type":"TEXT","index":58,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":59,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":60,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":61,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":62,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_billing_account_id_invoice_owner":{"name":"dim_billing_account_id_invoice_owner","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id_invoice_owner"},"amendment_id":{"name":"amendment_id","description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"amendment_id"},"is_auto_renew":{"name":"is_auto_renew","description":"Boolean field, if true, this subscription automatically renews at the end of the subscription term","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_auto_renew"},"is_myb":{"name":"is_myb","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year. This can either be by having a term greater than 12 months or having a linked subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb"},"is_myb_with_multi_subs":{"name":"is_myb_with_multi_subs","description":"MYB = Multi-Year Booking. This boolean flag identifies if a subscription is booked for more than one year by using multiple linked subscriptions only. A subscription with a term greater than 12 but does not have linked subscriptions has a value of FALSE.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_myb_with_multi_subs"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:06UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":34212352,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription","raw_sql":"$23","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.prep_billing_account_user","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.sfdc_customer_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"common_prep","database":"PROD","tags":["mnpi_exception"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"common_prep","fqn":["gitlab_snowflake","common_prep","prep_subscription"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/prep_subscription.sql","original_file_path":"models/common_prep/prep_subscription.sql","name":"prep_subscription","alias":"prep_subscription","checksum":{"name":"sha256","checksum":"1769b1b9c9fad9c8514abcf0c021261c8f88d9797bd412568b7e9982fec2041a"},"tags":["mnpi_exception"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["prep_billing_account_user"],["prep_billing_account_user"],["sfdc_customer_subscription_source"],["sfdc_customer_subscription_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"Creates a base view with generated keys for the subscription shared dimension and references in facts.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/prep_subscription.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["mnpi_exception"]},"created_at":1689033756.5360272,"compiled_sql":"$24","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".common_prep.prep_subscription","label":"prep_subscription"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_SUBSCRIPTION_OPPORTUNITY_MAPPING","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"dim_billing_account_id","comment":null,"description":"Unique identifier of a Zuora Billing account","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"SUBSCRIPTION_NAME":{"type":"TEXT","index":3,"name":"subscription_name","comment":null,"description":"Unique name of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_name"},"SUBSCRIPTION_SALES_TYPE":{"type":"TEXT","index":4,"name":"subscription_sales_type","comment":null,"description":"Self-Service or Sales-Assisted, as defined by the Zuora user who created the subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_sales_type"},"SUBSCRIPTION_ACCOUNT_ID":{"type":"TEXT","index":5,"name":"subscription_account_id","comment":null,"description":"Unique identifier of a SFDC account, as associated with the dim_subscription_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_account_id"},"SUBSCRIPTION_PARENT_ACCOUNT_ID":{"type":"TEXT","index":6,"name":"subscription_parent_account_id","comment":null,"description":"Unique identifier of an ultimate parent SFDC account, as associated with the dim_subscription_id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_parent_account_id"},"INVOICE_OPP_ACCOUNT_ID_FORWARD":{"type":"TEXT","index":7,"name":"invoice_opp_account_id_forward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's invoice.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_account_id_forward"},"INVOICE_OPP_ACCOUNT_ID_BACKWARD":{"type":"TEXT","index":8,"name":"invoice_opp_account_id_backward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's invoice, as filled in backwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_account_id_backward"},"QUOTE_OPP_ACCOUNT_ID_FORWARD":{"type":"TEXT","index":9,"name":"quote_opp_account_id_forward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's invoice, as filled in forwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_account_id_forward"},"QUOTE_OPP_ACCOUNT_ID_BACKWARD":{"type":"TEXT","index":10,"name":"quote_opp_account_id_backward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's quote.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_account_id_backward"},"SUBSCRIPTION_OPP_NAME_OPP_ACCOUNT_ID_FORWARD":{"type":"TEXT","index":11,"name":"subscription_opp_name_opp_account_id_forward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's quote, as filled in forwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_opp_name_opp_account_id_forward"},"SUBSCRIPTION_OPP_NAME_OPP_ACCOUNT_ID_BACKWARD":{"type":"TEXT","index":12,"name":"subscription_opp_name_opp_account_id_backward","comment":null,"description":"Unique identifier of a SFDC account, as associated with the opportunity in the subscription's quote, as filled in backwards based on the various filling rules.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_opp_name_opp_account_id_backward"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":13,"name":"subscription_version","comment":null,"description":"Version of a subscription","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_version"},"TERM_START_DATE":{"type":"DATE","index":14,"name":"term_start_date","comment":null,"description":"Subscription's term start date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"term_start_date"},"TERM_END_DATE":{"type":"DATE","index":15,"name":"term_end_date","comment":null,"description":"Subscription's term end date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"term_end_date"},"SUBSCRIPTION_START_DATE":{"type":"DATE","index":16,"name":"subscription_start_date","comment":null,"description":"Date the subscription begins","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_start_date"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":17,"name":"subscription_end_date","comment":null,"description":"Date the subscription ends","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_end_date"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":18,"name":"subscription_status","comment":null,"description":"Subscription status (active, expired, etc.)","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_status"},"SUBSCRIPTION_CREATED_DATE":{"type":"DATE","index":19,"name":"subscription_created_date","comment":null,"description":"Date the subscription was created","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_created_date"},"SUBSCRIPTION_SOURCE_OPP_ID":{"type":"TEXT","index":20,"name":"subscription_source_opp_id","comment":null,"description":"Opportunity_id found on the subscription object","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_source_opp_id"},"SUBSCRIPTION_OPP_ID":{"type":"TEXT","index":21,"name":"subscription_opp_id","comment":null,"description":"Opportunity_id for self-service subscriptions only since this is considered to have high fidelity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_opp_id"},"INVOICE_OPP_ID_FORWARD":{"type":"TEXT","index":22,"name":"invoice_opp_id_forward","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in forwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_forward"},"INVOICE_OPP_ID_BACKWARD":{"type":"TEXT","index":23,"name":"invoice_opp_id_backward","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in backwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_backward"},"INVOICE_OPP_ID_FORWARD_TERM_BASED":{"type":"TEXT","index":24,"name":"invoice_opp_id_forward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in forwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_forward_term_based"},"INVOICE_OPP_ID_BACKWARD_TERM_BASED":{"type":"TEXT","index":25,"name":"invoice_opp_id_backward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in backwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_backward_term_based"},"INVOICE_OPP_ID_FORWARD_SUB_NAME":{"type":"TEXT","index":26,"name":"invoice_opp_id_forward_sub_name","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice, as filled in forwards based on the the subscription's name being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"invoice_opp_id_forward_sub_name"},"UNFILLED_INVOICE_OPP_ID":{"type":"TEXT","index":27,"name":"unfilled_invoice_opp_id","comment":null,"description":"Unique identifier of a opportunity from subscription's invoice.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unfilled_invoice_opp_id"},"QUOTE_OPP_ID_FORWARD":{"type":"TEXT","index":28,"name":"quote_opp_id_forward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in forwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_forward"},"QUOTE_OPP_ID_BACKWARD":{"type":"TEXT","index":29,"name":"quote_opp_id_backward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in backwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_backward"},"QUOTE_OPP_ID_FORWARD_TERM_BASED":{"type":"TEXT","index":30,"name":"quote_opp_id_forward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in forwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_forward_term_based"},"QUOTE_OPP_ID_BACKWARD_TERM_BASED":{"type":"TEXT","index":31,"name":"quote_opp_id_backward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in backwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_backward_term_based"},"QUOTE_OPP_ID_FORWARD_SUB_NAME":{"type":"TEXT","index":32,"name":"quote_opp_id_forward_sub_name","comment":null,"description":"Unique identifier of a opportunity from subscription's quote, as filled in forwards based on the the subscription's name being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quote_opp_id_forward_sub_name"},"UNFILLED_QUOTE_OPP_ID":{"type":"TEXT","index":33,"name":"unfilled_quote_opp_id","comment":null,"description":"Unique identifier of a opportunity from subscription's quote.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unfilled_quote_opp_id"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_FORWARD":{"type":"TEXT","index":34,"name":"subscription_quote_number_opp_id_forward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in forwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_forward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_BACKWARD":{"type":"TEXT","index":35,"name":"subscription_quote_number_opp_id_backward","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in backwards based on the the subscription's created_date being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_backward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_FORWARD_TERM_BASED":{"type":"TEXT","index":36,"name":"subscription_quote_number_opp_id_forward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in forwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_forward_term_based"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_BACKWARD_TERM_BASED":{"type":"TEXT","index":37,"name":"subscription_quote_number_opp_id_backward_term_based","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in backwards based on the the subscription's term dates being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_backward_term_based"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_ID_FORWARD_SUB_NAME":{"type":"TEXT","index":38,"name":"subscription_quote_number_opp_id_forward_sub_name","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object, as filled in forwards based on the the subscription's name being shared with another version of the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"subscription_quote_number_opp_id_forward_sub_name"},"UNFILLED_SUBSCRIPTION_QUOTE_NUMBER_OPP_ID":{"type":"TEXT","index":39,"name":"unfilled_subscription_quote_number_opp_id","comment":null,"description":"Unique identifier of a opportunity from subscription's quote_number on the subscription object.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unfilled_subscription_quote_number_opp_id"},"COMBINED_OPPORTUNITY_ID":{"type":"TEXT","index":40,"name":"combined_opportunity_id","comment":null,"description":"Taking all of the potential opportunity ids, choose the best fit based on rules approved by the Data Team and Enterprise Apps.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"combined_opportunity_id"},"INVOICE_OPP_CREATED_DATE_FORWARD":{"type":"TIMESTAMP_TZ","index":41,"name":"INVOICE_OPP_CREATED_DATE_FORWARD","comment":null,"display_name":"invoice_opp_created_date_forward"},"INVOICE_OPP_CREATED_DATE_BACKWARD":{"type":"TIMESTAMP_TZ","index":42,"name":"INVOICE_OPP_CREATED_DATE_BACKWARD","comment":null,"display_name":"invoice_opp_created_date_backward"},"QUOTE_OPP_CREATED_DATE_FORWARD":{"type":"TIMESTAMP_TZ","index":43,"name":"QUOTE_OPP_CREATED_DATE_FORWARD","comment":null,"display_name":"quote_opp_created_date_forward"},"QUOTE_OPP_CREATED_DATE_BACKWARD":{"type":"TIMESTAMP_TZ","index":44,"name":"QUOTE_OPP_CREATED_DATE_BACKWARD","comment":null,"display_name":"quote_opp_created_date_backward"},"INVOICE_OPP_TOTAL_CONTRACT_VALUE_FORWARD":{"type":"FLOAT","index":45,"name":"INVOICE_OPP_TOTAL_CONTRACT_VALUE_FORWARD","comment":null,"display_name":"invoice_opp_total_contract_value_forward"},"INVOICE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD":{"type":"FLOAT","index":46,"name":"INVOICE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD","comment":null,"display_name":"invoice_opp_total_contract_value_backward"},"QUOTE_OPP_TOTAL_CONTRACT_VALUE_FORWARD":{"type":"FLOAT","index":47,"name":"QUOTE_OPP_TOTAL_CONTRACT_VALUE_FORWARD","comment":null,"display_name":"quote_opp_total_contract_value_forward"},"QUOTE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD":{"type":"FLOAT","index":48,"name":"QUOTE_OPP_TOTAL_CONTRACT_VALUE_BACKWARD","comment":null,"display_name":"quote_opp_total_contract_value_backward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_FORWARD":{"type":"FLOAT","index":49,"name":"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_FORWARD","comment":null,"display_name":"subscription_quote_number_opp_total_contract_value_forward"},"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_BACKWARD":{"type":"FLOAT","index":50,"name":"SUBSCRIPTION_QUOTE_NUMBER_OPP_TOTAL_CONTRACT_VALUE_BACKWARD","comment":null,"display_name":"subscription_quote_number_opp_total_contract_value_backward"},"INVOICE_NUMBER":{"type":"TEXT","index":51,"name":"INVOICE_NUMBER","comment":null,"display_name":"invoice_number"},"INVOICE_ITEM_CHARGE_AMOUNT":{"type":"FLOAT","index":52,"name":"INVOICE_ITEM_CHARGE_AMOUNT","comment":null,"display_name":"invoice_item_charge_amount"},"INVOICE_ITEM_QUANTITY":{"type":"FLOAT","index":53,"name":"INVOICE_ITEM_QUANTITY","comment":null,"display_name":"invoice_item_quantity"},"SOURCE":{"type":"TEXT","index":54,"name":"SOURCE","comment":null,"display_name":"source"},"OPP_ID_REMOVE_SALESFORCE_URL":{"type":"TEXT","index":55,"name":"OPP_ID_REMOVE_SALESFORCE_URL","comment":null,"display_name":"opp_id_remove_salesforce_url"},"OPP_ID_SLUGIFY":{"type":"TEXT","index":56,"name":"OPP_ID_SLUGIFY","comment":null,"display_name":"opp_id_slugify"},"OPP_ID_NAME":{"type":"TEXT","index":57,"name":"OPP_ID_NAME","comment":null,"display_name":"opp_id_name"},"COMBINED_OPORTUNITY_ID_COALESCED":{"type":"TEXT","index":58,"name":"COMBINED_OPORTUNITY_ID_COALESCED","comment":null,"display_name":"combined_oportunity_id_coalesced"},"IS_QUESTIONABLE_OPPORTUNITY_MAPPING":{"type":"NUMBER","index":59,"name":"IS_QUESTIONABLE_OPPORTUNITY_MAPPING","comment":null,"display_name":"is_questionable_opportunity_mapping"},"DIM_CRM_OPPORTUNITY_ID":{"type":"TEXT","index":60,"name":"DIM_CRM_OPPORTUNITY_ID","comment":null,"display_name":"dim_crm_opportunity_id"},"CREATED_BY":{"type":"TEXT","index":61,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":62,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":63,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":64,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":65,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":66,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:25UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":81396736,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_subscription_opportunity_mapping","raw_sql":"$25","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.zuora_slugify","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.prep_subscription","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.prep_crm_account","model.gitlab_snowflake.prep_crm_account","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_invoice_item_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.sfdc_zqu_quote_source","model.gitlab_snowflake.sfdc_zqu_quote_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.fct_invoice_item","model.gitlab_snowflake.fct_invoice_item","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.dim_crm_opportunity","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.fct_crm_opportunity","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source","model.gitlab_snowflake.sfdc_opportunity_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_subscription_opportunity_mapping"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_subscription_opportunity_mapping.sql","original_file_path":"models/common_prep/restricted_safe/prep_subscription_opportunity_mapping.sql","name":"prep_subscription_opportunity_mapping","alias":"prep_subscription_opportunity_mapping","checksum":{"name":"sha256","checksum":"6a4b875d8eab5c22953b9186f32741c547f764c6c0b2871273b2933a20fc827a"},"tags":["safe"],"refs":[["zuora_account_source"],["zuora_account_source"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["prep_subscription"],["prep_subscription"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["prep_crm_account"],["prep_crm_account"],["zuora_invoice_item_source"],["zuora_invoice_item_source"],["zuora_invoice_source"],["zuora_invoice_source"],["sfdc_zqu_quote_source"],["sfdc_zqu_quote_source"],["zuora_subscription_source"],["zuora_subscription_source"],["fct_invoice_item"],["fct_invoice_item"],["dim_crm_opportunity"],["dim_crm_opportunity"],["fct_crm_opportunity"],["fct_crm_opportunity"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["sfdc_opportunity_source"],["sfdc_opportunity_source"]],"sources":[],"metrics":[],"description":"$26","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_subscription_opportunity_mapping.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033758.0619636,"compiled_sql":"$27","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_subscription_opportunity_mapping","label":"prep_subscription_opportunity_mapping"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON","name":"FCT_INVOICE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_INVOICE_ID":{"type":"TEXT","index":1,"name":"dim_invoice_id","comment":null,"description":"The unique identifier of an invoice","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","invoice"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_invoice_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":2,"name":"DIM_BILLING_ACCOUNT_ID","comment":null,"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"DIM_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_PARENT_SALES_SEGMENT_ID":{"type":"TEXT","index":5,"name":"DIM_PARENT_SALES_SEGMENT_ID","comment":null,"display_name":"dim_parent_sales_segment_id"},"DIM_PARENT_SALES_TERRITORY_ID":{"type":"TEXT","index":6,"name":"DIM_PARENT_SALES_TERRITORY_ID","comment":null,"display_name":"dim_parent_sales_territory_id"},"DIM_PARENT_INDUSTRY_ID":{"type":"TEXT","index":7,"name":"DIM_PARENT_INDUSTRY_ID","comment":null,"display_name":"dim_parent_industry_id"},"DIM_ACCOUNT_SALES_SEGMENT_ID":{"type":"TEXT","index":8,"name":"DIM_ACCOUNT_SALES_SEGMENT_ID","comment":null,"display_name":"dim_account_sales_segment_id"},"DIM_ACCOUNT_SALES_TERRITORY_ID":{"type":"TEXT","index":9,"name":"DIM_ACCOUNT_SALES_TERRITORY_ID","comment":null,"display_name":"dim_account_sales_territory_id"},"DIM_ACCOUNT_INDUSTRY_ID":{"type":"TEXT","index":10,"name":"DIM_ACCOUNT_INDUSTRY_ID","comment":null,"display_name":"dim_account_industry_id"},"DIM_ACCOUNT_LOCATION_COUNTRY_ID":{"type":"TEXT","index":11,"name":"DIM_ACCOUNT_LOCATION_COUNTRY_ID","comment":null,"display_name":"dim_account_location_country_id"},"DIM_ACCOUNT_LOCATION_REGION_ID":{"type":"TEXT","index":12,"name":"DIM_ACCOUNT_LOCATION_REGION_ID","comment":null,"display_name":"dim_account_location_region_id"},"INVOICE_DATE_ID":{"type":"NUMBER","index":13,"name":"INVOICE_DATE_ID","comment":null,"display_name":"invoice_date_id"},"CREATED_DATE_ID":{"type":"NUMBER","index":14,"name":"CREATED_DATE_ID","comment":null,"display_name":"created_date_id"},"DUE_DATE_ID":{"type":"NUMBER","index":15,"name":"DUE_DATE_ID","comment":null,"display_name":"due_date_id"},"POSTED_DATE_ID":{"type":"NUMBER","index":16,"name":"POSTED_DATE_ID","comment":null,"display_name":"posted_date_id"},"TARGET_DATE_ID":{"type":"NUMBER","index":17,"name":"TARGET_DATE_ID","comment":null,"display_name":"target_date_id"},"INCLUDES_ONE_TIME":{"type":"BOOLEAN","index":18,"name":"INCLUDES_ONE_TIME","comment":null,"display_name":"includes_one_time"},"INCLUDESRECURRING":{"type":"BOOLEAN","index":19,"name":"INCLUDESRECURRING","comment":null,"display_name":"includesrecurring"},"INCLUDES_USAGE":{"type":"BOOLEAN","index":20,"name":"INCLUDES_USAGE","comment":null,"display_name":"includes_usage"},"TRANSFERRED_TO_ACCOUNTING":{"type":"TEXT","index":21,"name":"TRANSFERRED_TO_ACCOUNTING","comment":null,"display_name":"transferred_to_accounting"},"ADJUSTMENT_AMOUNT":{"type":"FLOAT","index":22,"name":"ADJUSTMENT_AMOUNT","comment":null,"display_name":"adjustment_amount"},"AMOUNT":{"type":"FLOAT","index":23,"name":"AMOUNT","comment":null,"display_name":"amount"},"AMOUNT_WITHOUT_TAX":{"type":"FLOAT","index":24,"name":"AMOUNT_WITHOUT_TAX","comment":null,"display_name":"amount_without_tax"},"BALANCE":{"type":"FLOAT","index":25,"name":"BALANCE","comment":null,"display_name":"balance"},"CREDIT_BALANCE_ADJUSTMENT_AMOUNT":{"type":"FLOAT","index":26,"name":"CREDIT_BALANCE_ADJUSTMENT_AMOUNT","comment":null,"display_name":"credit_balance_adjustment_amount"},"PAYMENT_AMOUNT":{"type":"FLOAT","index":27,"name":"PAYMENT_AMOUNT","comment":null,"display_name":"payment_amount"},"REFUND_AMOUNT":{"type":"FLOAT","index":28,"name":"REFUND_AMOUNT","comment":null,"display_name":"refund_amount"},"TAX_AMOUNT":{"type":"FLOAT","index":29,"name":"TAX_AMOUNT","comment":null,"display_name":"tax_amount"},"TAX_EXEMPT_AMOUNT":{"type":"FLOAT","index":30,"name":"TAX_EXEMPT_AMOUNT","comment":null,"display_name":"tax_exempt_amount"},"CREATED_BY_ID":{"type":"TEXT","index":31,"name":"CREATED_BY_ID","comment":null,"display_name":"created_by_id"},"UPDATED_BY_ID":{"type":"TEXT","index":32,"name":"UPDATED_BY_ID","comment":null,"display_name":"updated_by_id"},"UPDATED_DATE_ID":{"type":"NUMBER","index":33,"name":"UPDATED_DATE_ID","comment":null,"display_name":"updated_date_id"},"CREATED_BY":{"type":"TEXT","index":34,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":35,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":36,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":37,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":38,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":39,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:05UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":15666176,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.fct_invoice","raw_sql":"$28","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_crm_account","model.gitlab_snowflake.map_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_invoice_source","model.gitlab_snowflake.zuora_invoice_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common","fqn":["gitlab_snowflake","common","facts_financial","restricted_safe","fct_invoice"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common/facts_financial/restricted_safe/fct_invoice.sql","original_file_path":"models/common/facts_financial/restricted_safe/fct_invoice.sql","name":"fct_invoice","alias":"fct_invoice","checksum":{"name":"sha256","checksum":"aecba7022e34ef4a67444f58320479593865e82ee491e5cf996234dc67af7a9f"},"tags":["safe"],"refs":[["map_crm_account"],["map_crm_account"],["map_merged_crm_account"],["map_merged_crm_account"],["zuora_account_source"],["zuora_account_source"],["zuora_invoice_source"],["zuora_invoice_source"]],"sources":[],"metrics":[],"description":"Fact table providing invoice details at the single invoice grain.\n\nThe invoicing to customers business process can be found in the [handbook](https://about.gitlab.com/handbook/finance/sox-internal-controls/quote-to-cash/#6-invoicing-to-customers).\n\nData comes from [Zuora Documentation](https://knowledgecenter.zuora.com/Billing/Reporting_and_Analytics/D_Data_Sources_and_Exports/C_Data_Source_Reference/Invoice_Item_Data_Source).","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common/facts_financial/restricted_safe/fct_invoice.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033752.2566378,"compiled_sql":"$29","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common.fct_invoice","label":"fct_invoice"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_CHARGE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"SUBSCRIPTION_NAME":{"type":"TEXT","index":1,"name":"SUBSCRIPTION_NAME","comment":null,"display_name":"subscription_name"},"SUBSCRIPTION_NAME_SLUGIFY":{"type":"TEXT","index":2,"name":"SUBSCRIPTION_NAME_SLUGIFY","comment":null,"display_name":"subscription_name_slugify"},"SUBSCRIPTION_VERSION":{"type":"NUMBER","index":3,"name":"SUBSCRIPTION_VERSION","comment":null,"display_name":"subscription_version"},"SUBSCRIPTION_CREATED_BY_ID":{"type":"TEXT","index":4,"name":"SUBSCRIPTION_CREATED_BY_ID","comment":null,"display_name":"subscription_created_by_id"},"RATE_PLAN_CHARGE_NUMBER":{"type":"TEXT","index":5,"name":"RATE_PLAN_CHARGE_NUMBER","comment":null,"display_name":"rate_plan_charge_number"},"RATE_PLAN_CHARGE_VERSION":{"type":"NUMBER","index":6,"name":"RATE_PLAN_CHARGE_VERSION","comment":null,"display_name":"rate_plan_charge_version"},"RATE_PLAN_CHARGE_SEGMENT":{"type":"NUMBER","index":7,"name":"RATE_PLAN_CHARGE_SEGMENT","comment":null,"display_name":"rate_plan_charge_segment"},"DIM_CHARGE_ID":{"type":"TEXT","index":8,"name":"dim_charge_id","comment":null,"description":"The unique identifier of the rate plan charge.","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"dim_charge_id"},"DIM_PRODUCT_DETAIL_ID":{"type":"TEXT","index":9,"name":"dim_product_detail_id","comment":null,"description":"The identifier of product details in dim_product_detail","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_product_detail_id"},"DIM_AMENDMENT_ID_CHARGE":{"type":"TEXT","index":10,"name":"DIM_AMENDMENT_ID_CHARGE","comment":null,"display_name":"dim_amendment_id_charge"},"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":11,"name":"dim_subscription_id","comment":null,"description":"The identifier of subscription in dim_subscriptions table","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":12,"name":"dim_billing_account_id","comment":null,"description":"Zuora account id","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":13,"name":"dim_crm_account_id","comment":null,"description":"account id frm crm","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_PARENT_CRM_ACCOUNT_ID":{"type":"TEXT","index":14,"name":"DIM_PARENT_CRM_ACCOUNT_ID","comment":null,"display_name":"dim_parent_crm_account_id"},"DIM_ORDER_ID":{"type":"TEXT","index":15,"name":"DIM_ORDER_ID","comment":null,"display_name":"dim_order_id"},"EFFECTIVE_START_DATE_ID":{"type":"NUMBER","index":16,"name":"EFFECTIVE_START_DATE_ID","comment":null,"display_name":"effective_start_date_id"},"EFFECTIVE_END_DATE_ID":{"type":"NUMBER","index":17,"name":"EFFECTIVE_END_DATE_ID","comment":null,"display_name":"effective_end_date_id"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":18,"name":"SUBSCRIPTION_STATUS","comment":null,"display_name":"subscription_status"},"RATE_PLAN_NAME":{"type":"TEXT","index":19,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":20,"name":"RATE_PLAN_CHARGE_NAME","comment":null,"display_name":"rate_plan_charge_name"},"RATE_PLAN_CHARGE_DESCRIPTION":{"type":"TEXT","index":21,"name":"RATE_PLAN_CHARGE_DESCRIPTION","comment":null,"display_name":"rate_plan_charge_description"},"IS_LAST_SEGMENT":{"type":"BOOLEAN","index":22,"name":"IS_LAST_SEGMENT","comment":null,"display_name":"is_last_segment"},"DISCOUNT_LEVEL":{"type":"TEXT","index":23,"name":"DISCOUNT_LEVEL","comment":null,"display_name":"discount_level"},"CHARGE_TYPE":{"type":"TEXT","index":24,"name":"CHARGE_TYPE","comment":null,"display_name":"charge_type"},"RATE_PLAN_CHARGE_AMENDEMENT_TYPE":{"type":"TEXT","index":25,"name":"RATE_PLAN_CHARGE_AMENDEMENT_TYPE","comment":null,"display_name":"rate_plan_charge_amendement_type"},"UNIT_OF_MEASURE":{"type":"TEXT","index":26,"name":"UNIT_OF_MEASURE","comment":null,"display_name":"unit_of_measure"},"IS_PAID_IN_FULL":{"type":"BOOLEAN","index":27,"name":"IS_PAID_IN_FULL","comment":null,"display_name":"is_paid_in_full"},"MONTHS_OF_FUTURE_BILLINGS":{"type":"NUMBER","index":28,"name":"MONTHS_OF_FUTURE_BILLINGS","comment":null,"display_name":"months_of_future_billings"},"IS_INCLUDED_IN_ARR_CALC":{"type":"BOOLEAN","index":29,"name":"IS_INCLUDED_IN_ARR_CALC","comment":null,"display_name":"is_included_in_arr_calc"},"SUBSCRIPTION_END_DATE":{"type":"DATE","index":30,"name":"SUBSCRIPTION_END_DATE","comment":null,"display_name":"subscription_end_date"},"EFFECTIVE_START_DATE":{"type":"DATE","index":31,"name":"EFFECTIVE_START_DATE","comment":null,"display_name":"effective_start_date"},"EFFECTIVE_END_DATE":{"type":"DATE","index":32,"name":"EFFECTIVE_END_DATE","comment":null,"display_name":"effective_end_date"},"EFFECTIVE_START_MONTH":{"type":"DATE","index":33,"name":"EFFECTIVE_START_MONTH","comment":null,"display_name":"effective_start_month"},"EFFECTIVE_END_MONTH":{"type":"DATE","index":34,"name":"EFFECTIVE_END_MONTH","comment":null,"display_name":"effective_end_month"},"CHARGED_THROUGH_DATE":{"type":"DATE","index":35,"name":"CHARGED_THROUGH_DATE","comment":null,"display_name":"charged_through_date"},"CHARGE_CREATED_DATE":{"type":"TIMESTAMP_NTZ","index":36,"name":"CHARGE_CREATED_DATE","comment":null,"display_name":"charge_created_date"},"CHARGE_UPDATED_DATE":{"type":"TIMESTAMP_NTZ","index":37,"name":"CHARGE_UPDATED_DATE","comment":null,"display_name":"charge_updated_date"},"CHARGE_TERM":{"type":"NUMBER","index":38,"name":"CHARGE_TERM","comment":null,"display_name":"charge_term"},"MRR":{"type":"FLOAT","index":39,"name":"mrr","comment":null,"description":"Monthly Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"mrr"},"PREVIOUS_MRR_CALC":{"type":"FLOAT","index":40,"name":"PREVIOUS_MRR_CALC","comment":null,"display_name":"previous_mrr_calc"},"PREVIOUS_MRR":{"type":"FLOAT","index":41,"name":"PREVIOUS_MRR","comment":null,"display_name":"previous_mrr"},"DELTA_MRR_CALC":{"type":"FLOAT","index":42,"name":"DELTA_MRR_CALC","comment":null,"display_name":"delta_mrr_calc"},"DELTA_MRR":{"type":"FLOAT","index":43,"name":"DELTA_MRR","comment":null,"display_name":"delta_mrr"},"DELTA_MRC":{"type":"FLOAT","index":44,"name":"DELTA_MRC","comment":null,"display_name":"delta_mrc"},"ARR":{"type":"FLOAT","index":45,"name":"arr","comment":null,"description":"Annual Recurring Revenue value for given month","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"arr"},"PREVIOUS_ARR":{"type":"FLOAT","index":46,"name":"PREVIOUS_ARR","comment":null,"display_name":"previous_arr"},"DELTA_ARC":{"type":"FLOAT","index":47,"name":"DELTA_ARC","comment":null,"display_name":"delta_arc"},"DELTA_ARR":{"type":"FLOAT","index":48,"name":"DELTA_ARR","comment":null,"display_name":"delta_arr"},"QUANTITY":{"type":"FLOAT","index":49,"name":"quantity","comment":null,"description":"Total quantity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"quantity"},"PREVIOUS_QUANTITY_CALC":{"type":"FLOAT","index":50,"name":"PREVIOUS_QUANTITY_CALC","comment":null,"display_name":"previous_quantity_calc"},"PREVIOUS_QUANTITY":{"type":"FLOAT","index":51,"name":"PREVIOUS_QUANTITY","comment":null,"display_name":"previous_quantity"},"DELTA_QUANTITY_CALC":{"type":"FLOAT","index":52,"name":"DELTA_QUANTITY_CALC","comment":null,"display_name":"delta_quantity_calc"},"DELTA_QUANTITY":{"type":"FLOAT","index":53,"name":"DELTA_QUANTITY","comment":null,"display_name":"delta_quantity"},"TCV":{"type":"FLOAT","index":54,"name":"TCV","comment":null,"display_name":"tcv"},"DELTA_TCV":{"type":"FLOAT","index":55,"name":"DELTA_TCV","comment":null,"display_name":"delta_tcv"},"ESTIMATED_TOTAL_FUTURE_BILLINGS":{"type":"FLOAT","index":56,"name":"ESTIMATED_TOTAL_FUTURE_BILLINGS","comment":null,"display_name":"estimated_total_future_billings"},"IS_MANUAL_CHARGE":{"type":"NUMBER","index":57,"name":"IS_MANUAL_CHARGE","comment":null,"display_name":"is_manual_charge"},"TYPE_OF_ARR_CHANGE":{"type":"TEXT","index":58,"name":"TYPE_OF_ARR_CHANGE","comment":null,"display_name":"type_of_arr_change"},"CREATED_BY":{"type":"TEXT","index":59,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":60,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":61,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":62,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":63,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":64,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"},"dim_date_id":{"name":"dim_date_id","description":"The identifier of date month in dim_date","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_date_id"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:02UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":227328000,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_charge","raw_sql":"$2a","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.group_by","macro.gitlab_snowflake.get_date_id","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_query_api_order_action_rate_plan_source","model.gitlab_snowflake.zuora_query_api_order_action_rate_plan_source","model.gitlab_snowflake.zuora_order_action_source","model.gitlab_snowflake.zuora_order_action_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_revenue_revenue_contract_line_source","model.gitlab_snowflake.zuora_order_source","model.gitlab_snowflake.zuora_order_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.sfdc_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source","model.gitlab_snowflake.zuora_revenue_manual_journal_entry_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_charge"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_charge.sql","original_file_path":"models/common_prep/restricted_safe/prep_charge.sql","name":"prep_charge","alias":"prep_charge","checksum":{"name":"sha256","checksum":"2e3b6055e99dff1af429c98acc314052a2235fec14976b94f4a94a0a858f4f94"},"tags":["safe"],"refs":[["map_merged_crm_account"],["map_merged_crm_account"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_query_api_order_action_rate_plan_source"],["zuora_query_api_order_action_rate_plan_source"],["zuora_order_action_source"],["zuora_order_action_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_revenue_revenue_contract_line_source"],["zuora_order_source"],["zuora_order_source"],["sfdc_account_source"],["sfdc_account_source"],["zuora_account_source"],["zuora_account_source"],["zuora_subscription_source"],["zuora_subscription_source"],["zuora_revenue_manual_journal_entry_source"],["zuora_revenue_manual_journal_entry_source"]],"sources":[],"metrics":[],"description":"Creates a base view of recurring charges that are not amortized over the months. This prep table is used for transaction line analyses that do not require amortization of charges.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_charge.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033757.951199,"compiled_sql":"$2b","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_charge","label":"prep_charge"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_COMMON_PREP","name":"PREP_RECURRING_CHARGE_SUBSCRIPTION_MONTHLY","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"DIM_SUBSCRIPTION_ID":{"type":"TEXT","index":1,"name":"dim_subscription_id","comment":null,"description":"Unique identifier of a version of a subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id"},"DIM_SUBSCRIPTION_ID_ORIGINAL":{"type":"TEXT","index":2,"name":"dim_subscription_id_original","comment":null,"description":"Identifier of the original subscription in lineage of a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_subscription_id_original"},"DIM_BILLING_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"dim_billing_account_id","comment":null,"description":"ID of the Zuora account associated with a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_billing_account_id"},"DIM_CRM_ACCOUNT_ID":{"type":"TEXT","index":4,"name":"dim_crm_account_id","comment":null,"description":"Account ID from SFDC identifing the customer","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"dim_crm_account_id"},"DIM_DATE_ID":{"type":"NUMBER","index":5,"name":"dim_date_id","comment":null,"description":"The identifier of date month in dim_date","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"dim_date_id"},"CHARGE_MONTH":{"type":"DATE","index":6,"name":"CHARGE_MONTH","comment":null,"display_name":"charge_month"},"SUBSCRIPTION_STATUS":{"type":"TEXT","index":7,"name":"subscription_status","comment":null,"description":"Status of the subscription","meta":{},"data_type":null,"quote":null,"tags":["tdf","common","gainsight"],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"accepted_values","short":"A","label":"Accepted Values: Active, Cancelled, Draft, Expired"}],"display_name":"subscription_status"},"UNIT_OF_MEASURE":{"type":"ARRAY","index":8,"name":"unit_of_measure","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"unit_of_measure"},"TOTAL_MRR":{"type":"FLOAT","index":9,"name":"total_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month for a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_mrr"},"TOTAL_ARR":{"type":"FLOAT","index":10,"name":"total_arr","comment":null,"description":"Annual Recurring Revenue value for given month for a given Subscription ID","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_arr"},"TOTAL_QUANTITY":{"type":"FLOAT","index":11,"name":"total_quantity","comment":null,"description":"Total quantity","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"total_quantity"},"SM_MRR":{"type":"FLOAT","index":12,"name":"sm_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month from Self-Managed products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sm_mrr"},"SM_ARR":{"type":"FLOAT","index":13,"name":"sm_arr","comment":null,"description":"Annual Recurring Revenue value for given month from Self-Managed products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sm_arr"},"SM_QUANTITY":{"type":"FLOAT","index":14,"name":"sm_quantity","comment":null,"description":"Total quantity of Self-Managed products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"sm_quantity"},"SAAS_MRR":{"type":"FLOAT","index":15,"name":"saas_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month from SaaS products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_mrr"},"SAAS_ARR":{"type":"FLOAT","index":16,"name":"saas_arr","comment":null,"description":"Annual Recurring Revenue value for given month from SaaS products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_arr"},"SAAS_QUANTITY":{"type":"FLOAT","index":17,"name":"saas_quantity","comment":null,"description":"Total quantity of SaaS products","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"saas_quantity"},"OTHER_MRR":{"type":"FLOAT","index":18,"name":"other_mrr","comment":null,"description":"Monthly Recurring Revenue value for given month from products that are neither Self-Managed nor SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"other_mrr"},"OTHER_ARR":{"type":"FLOAT","index":19,"name":"other_arr","comment":null,"description":"Annual Recurring Revenue value for given month from products that are neither Self-Managed nor SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"other_arr"},"OTHER_QUANTITY":{"type":"FLOAT","index":20,"name":"other_quantity","comment":null,"description":"Total quantity of products that are neither Self-Managed nor SaaS","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"other_quantity"},"IS_LATEST_RECORD_PER_SUBSCRIPTION":{"type":"BOOLEAN","index":21,"name":"is_latest_record_per_subscription","comment":null,"description":"Flags if the row contains the most recent record received for the subscription.","meta":{},"data_type":null,"quote":null,"tags":[],"display_name":"is_latest_record_per_subscription"},"CREATED_BY":{"type":"TEXT","index":22,"name":"CREATED_BY","comment":null,"display_name":"created_by"},"UPDATED_BY":{"type":"TEXT","index":23,"name":"UPDATED_BY","comment":null,"display_name":"updated_by"},"MODEL_CREATED_DATE":{"type":"DATE","index":24,"name":"MODEL_CREATED_DATE","comment":null,"display_name":"model_created_date"},"MODEL_UPDATED_DATE":{"type":"DATE","index":25,"name":"MODEL_UPDATED_DATE","comment":null,"display_name":"model_updated_date"},"DBT_UPDATED_AT":{"type":"TIMESTAMP_LTZ","index":26,"name":"DBT_UPDATED_AT","comment":null,"display_name":"dbt_updated_at"},"DBT_CREATED_AT":{"type":"TIMESTAMP_LTZ","index":27,"name":"DBT_CREATED_AT","comment":null,"display_name":"dbt_created_at"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:08UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":89666048,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.prep_recurring_charge_subscription_monthly","raw_sql":"$2c","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.simple_cte","macro.gitlab_snowflake.ref","macro.dbt_utils.surrogate_key","macro.dbt_utils.group_by","macro.gitlab_snowflake.dbt_audit","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.map_merged_crm_account","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_product_detail","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.dim_date","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_subscription_source","model.gitlab_snowflake.zuora_subscription_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_common_prep","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_common_prep","fqn":["gitlab_snowflake","common_prep","restricted_safe","prep_recurring_charge_subscription_monthly"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"common_prep/restricted_safe/prep_recurring_charge_subscription_monthly.sql","original_file_path":"models/common_prep/restricted_safe/prep_recurring_charge_subscription_monthly.sql","name":"prep_recurring_charge_subscription_monthly","alias":"prep_recurring_charge_subscription_monthly","checksum":{"name":"sha256","checksum":"8d9005aa26061baedafd5091c6bc22e131982dceefbc6fb18655b2a732f9b12e"},"tags":["safe"],"refs":[["zuora_rate_plan_source"],["zuora_rate_plan_source"],["map_merged_crm_account"],["map_merged_crm_account"],["dim_product_detail"],["dim_product_detail"],["dim_date"],["dim_date"],["zuora_account_source"],["zuora_account_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"],["zuora_subscription_source"],["zuora_subscription_source"]],"sources":[],"metrics":[],"description":"Sums MRR and ARR charges by subscription by month. MRR and ARR values are also broken out by delivery type (Self-Managed, SaaS, Others) at the same grain.\n\nTo align the subscriptions in this table with `prep_recurring_charge`, filter on `subscription_status IN ('Active', Cancelled')`.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/common_prep/restricted_safe/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/common_prep/restricted_safe/prep_recurring_charge_subscription_monthly.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_common_prep","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033758.01075,"compiled_sql":"$2d","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_common_prep.prep_recurring_charge_subscription_monthly","label":"prep_recurring_charge_subscription_monthly"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_INVOICE_ITEMS_DETAIL_REPORT","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"INVOICE_NUMBER":{"type":"TEXT","index":1,"name":"INVOICE_NUMBER","comment":null,"display_name":"invoice_number"},"INVOICE_ITEM_ID":{"type":"TEXT","index":2,"name":"invoice_item_id","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"},{"test_name":"unique","short":"U","label":"Unique"}],"display_name":"invoice_item_id"},"SFDC_ACCOUNT_ID":{"type":"TEXT","index":3,"name":"SFDC_ACCOUNT_ID","comment":null,"display_name":"sfdc_account_id"},"ACCOUNT_NAME":{"type":"TEXT","index":4,"name":"ACCOUNT_NAME","comment":null,"display_name":"account_name"},"ACCOUNT_TYPE":{"type":"TEXT","index":5,"name":"ACCOUNT_TYPE","comment":null,"display_name":"account_type"},"INVOICE_DATE":{"type":"DATE","index":6,"name":"INVOICE_DATE","comment":null,"display_name":"invoice_date"},"PRODUCT_NAME":{"type":"TEXT","index":7,"name":"PRODUCT_NAME","comment":null,"display_name":"product_name"},"RATE_PLAN_NAME":{"type":"TEXT","index":8,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"QUANTITY":{"type":"FLOAT","index":9,"name":"QUANTITY","comment":null,"display_name":"quantity"},"INVOICE_ITEM_UNIT_PRICE":{"type":"FLOAT","index":10,"name":"INVOICE_ITEM_UNIT_PRICE","comment":null,"display_name":"invoice_item_unit_price"},"INVOICE_ITEM_CHARGE_AMOUNT":{"type":"FLOAT","index":11,"name":"INVOICE_ITEM_CHARGE_AMOUNT","comment":null,"display_name":"invoice_item_charge_amount"},"ANNUAL_PRICE":{"type":"FLOAT","index":12,"name":"ANNUAL_PRICE","comment":null,"display_name":"annual_price"},"QUANTITY_TIMES_ANNUAL":{"type":"FLOAT","index":13,"name":"QUANTITY_TIMES_ANNUAL","comment":null,"display_name":"quantity_times_annual"},"ULTIMATE_PARENT_SEGMENT":{"type":"TEXT","index":14,"name":"ULTIMATE_PARENT_SEGMENT","comment":null,"display_name":"ultimate_parent_segment"},"PRODUCT_CATEGORY":{"type":"TEXT","index":15,"name":"PRODUCT_CATEGORY","comment":null,"display_name":"product_category"},"INVOICE_MONTH":{"type":"DATE","index":16,"name":"INVOICE_MONTH","comment":null,"display_name":"invoice_month"},"FISCAL_PERIOD":{"type":"TEXT","index":17,"name":"FISCAL_PERIOD","comment":null,"display_name":"fiscal_period"},"LIST_PRICE":{"type":"FLOAT","index":18,"name":"LIST_PRICE","comment":null,"display_name":"list_price"},"DISCOUNT":{"type":"FLOAT","index":19,"name":"DISCOUNT","comment":null,"display_name":"discount"},"LIST_PRICE_TIMES_QUANTITY":{"type":"FLOAT","index":20,"name":"LIST_PRICE_TIMES_QUANTITY","comment":null,"display_name":"list_price_times_quantity"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:10UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":16339968,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_invoice_items_detail_report","raw_sql":"$2e","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.product_category","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.sfdc_accounts_xf","model.gitlab_snowflake.sfdc_deleted_accounts","model.gitlab_snowflake.sfdc_deleted_accounts","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_invoice_charges","model.gitlab_snowflake.zuora_invoice_charges","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_rate_plan_source","model.gitlab_snowflake.zuora_product_rate_plan_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_tier_source","model.gitlab_snowflake.zuora_product_rate_plan_charge_tier_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_invoice_items_detail_report"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_invoice_items_detail_report.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_invoice_items_detail_report.sql","name":"zuora_invoice_items_detail_report","alias":"zuora_invoice_items_detail_report","checksum":{"name":"sha256","checksum":"52ded9393856b1f37b4e91f5caef3282816f3ca0a70bb006f60d2bfd35d1d3a5"},"tags":["safe"],"refs":[["date_details"],["date_details"],["sfdc_accounts_xf"],["sfdc_accounts_xf"],["sfdc_deleted_accounts"],["sfdc_deleted_accounts"],["zuora_account_source"],["zuora_account_source"],["zuora_invoice_charges"],["zuora_invoice_charges"],["zuora_product_source"],["zuora_product_source"],["zuora_product_rate_plan_source"],["zuora_product_rate_plan_source"],["zuora_product_rate_plan_charge_source"],["zuora_product_rate_plan_charge_source"],["zuora_product_rate_plan_charge_tier_source"],["zuora_product_rate_plan_charge_tier_source"]],"sources":[],"metrics":[],"description":"Report that provides discounting insights by comparing list prices to invoice prices. The report also enriches invoice item details with Salesforce customer information.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_invoice_items_detail_report.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.214691,"compiled_sql":"$2f","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_invoice_items_detail_report","label":"zuora_invoice_items_detail_report"},{"metadata":{"type":"BASE TABLE","schema":"RESTRICTED_SAFE_LEGACY","name":"ZUORA_NON_GAAP_REVENUE","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNTING_PERIOD":{"type":"DATE","index":1,"name":"ACCOUNTING_PERIOD","comment":null,"display_name":"accounting_period"},"ACCOUNT_NAME":{"type":"TEXT","index":2,"name":"account_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_name"},"ACCOUNT_NUMBER":{"type":"TEXT","index":3,"name":"account_number","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"account_number"},"CRM_ID":{"type":"TEXT","index":4,"name":"CRM_ID","comment":null,"display_name":"crm_id"},"COUNTRY":{"type":"TEXT","index":5,"name":"COUNTRY","comment":null,"display_name":"country"},"CURRENCY":{"type":"TEXT","index":6,"name":"CURRENCY","comment":null,"display_name":"currency"},"RATE_PLAN_NAME":{"type":"TEXT","index":7,"name":"RATE_PLAN_NAME","comment":null,"display_name":"rate_plan_name"},"RATE_PLAN_CHARGE_NAME":{"type":"TEXT","index":8,"name":"rate_plan_charge_name","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"rate_plan_charge_name"},"PRODUCT_CATEGORY":{"type":"TEXT","index":9,"name":"product_category","comment":null,"description":"","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"not_null","short":"N","label":"Not Null"}],"display_name":"product_category"},"DELIVERY":{"type":"TEXT","index":10,"name":"DELIVERY","comment":null,"display_name":"delivery"},"PRODUCT_NAME":{"type":"TEXT","index":11,"name":"PRODUCT_NAME","comment":null,"display_name":"product_name"},"REVENUE_AMT":{"type":"FLOAT","index":12,"name":"REVENUE_AMT","comment":null,"display_name":"revenue_amt"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 09:07UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":35159040,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"model.gitlab_snowflake.zuora_non_gaap_revenue","raw_sql":"$30","compiled":true,"resource_type":"model","depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.product_category","macro.gitlab_snowflake.delivery","macro.dbt_utils.group_by","macro.gitlab_snowflake.mask_model"],"nodes":["model.gitlab_snowflake.date_details","model.gitlab_snowflake.date_details","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_account_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_accounting_period_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_contact_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_product_source","model.gitlab_snowflake.zuora_revenue_schedule_item_source","model.gitlab_snowflake.zuora_revenue_schedule_item_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_source","model.gitlab_snowflake.zuora_rate_plan_charge_source","model.gitlab_snowflake.zuora_rate_plan_charge_source"]},"config":{"enabled":true,"alias":null,"schema":"restricted_safe_legacy","database":"PROD","tags":["safe"],"meta":{},"materialized":"table","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"copy_grants":true,"query_tag":"dbt","secure":true,"post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"restricted_safe_legacy","fqn":["gitlab_snowflake","legacy","zuora","restricted_safe","zuora_non_gaap_revenue"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"legacy/zuora/restricted_safe/zuora_non_gaap_revenue.sql","original_file_path":"models/legacy/zuora/restricted_safe/zuora_non_gaap_revenue.sql","name":"zuora_non_gaap_revenue","alias":"zuora_non_gaap_revenue","checksum":{"name":"sha256","checksum":"c17ea65af9db22012eda5f867b77ce78e6b2b252c1b74dcf86c43bdb718b0cc6"},"tags":["safe"],"refs":[["date_details"],["date_details"],["zuora_account_source"],["zuora_account_source"],["zuora_accounting_period_source"],["zuora_accounting_period_source"],["zuora_contact_source"],["zuora_contact_source"],["zuora_product_source"],["zuora_product_source"],["zuora_revenue_schedule_item_source"],["zuora_revenue_schedule_item_source"],["zuora_rate_plan_source"],["zuora_rate_plan_source"],["zuora_rate_plan_charge_source"],["zuora_rate_plan_charge_source"]],"sources":[],"metrics":[],"description":"Base model for Zuora Non-GAAP Revenue","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://models/legacy/zuora/xf/schema.yml","compiled_path":"target/compiled/gitlab_snowflake/models/legacy/zuora/restricted_safe/zuora_non_gaap_revenue.sql","build_path":null,"deferred":false,"unrendered_config":{"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"restricted_safe_legacy","copy_grants":true,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt","materialized":"table","tags":["safe"],"secure":true},"created_at":1689033763.2578363,"compiled_sql":"$31","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".restricted_safe_legacy.zuora_non_gaap_revenue","label":"zuora_non_gaap_revenue"}]},"node":{"resource_type":"model","name":"zuora_account_source","unique_id":"model.gitlab_snowflake.zuora_account_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"depends_on"}],["$","div",null,{"className":"section-content","children":[["$","h6",null,{"children":"Depends On"}],["$","$L12",null,{"references":{"seed":[{"metadata":{"type":"BASE TABLE","schema":"LEGACY","name":"ZUORA_EXCLUDED_ACCOUNTS","database":"PROD","comment":null,"owner":"TRANSFORMER"},"columns":{"ACCOUNT_ID":{"type":"TEXT","index":1,"name":"ACCOUNT_ID","comment":null,"display_name":"account_id"},"IS_PERMANENTLY_EXCLUDED":{"type":"BOOLEAN","index":2,"name":"IS_PERMANENTLY_EXCLUDED","comment":null,"display_name":"is_permanently_excluded"},"DESCRIPTION":{"type":"TEXT","index":3,"name":"DESCRIPTION","comment":null,"display_name":"description"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 17:11UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":2560,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"seed.gitlab_snowflake.zuora_excluded_accounts","raw_sql":"","compiled":true,"resource_type":"seed","depends_on":{"macros":["macro.gitlab_snowflake.mask_model"],"nodes":[]},"config":{"enabled":true,"alias":null,"schema":"legacy","database":"PROD","tags":[],"meta":{},"materialized":"seed","persist_docs":{},"quoting":{},"column_types":{},"full_refresh":null,"unique_key":null,"on_schema_change":"ignore","grants":{},"quote_columns":false,"query_tag":"dbt","post-hook":[{"sql":"{{ mask_model() }}","transaction":true,"index":null}],"pre-hook":[]},"database":"PROD","schema":"legacy","fqn":["gitlab_snowflake","zuora_excluded_accounts"],"package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"zuora_excluded_accounts.csv","original_file_path":"data/zuora_excluded_accounts.csv","name":"zuora_excluded_accounts","alias":"zuora_excluded_accounts","checksum":{"name":"sha256","checksum":"569c4b0ae48f90ebfff88a7009cb111b2af1871295bdeff0f6f04343b8d43edb"},"tags":[],"refs":[],"sources":[],"metrics":[],"description":"## [Zuora Excluded Accounts](https://gitlab.com/gitlab-data/analytics/blob/master/transform/snowflake-dbt/data/zuora_excluded_accounts.csv)\nZuora Accounts added here will be excluded from all relevant Zuora base models.\n* The `is_permanently_excluded` column is non-functional and designates whether the column should be permanently excluded or just temporarily.\n* The `description` column is a non-functional helper for us to track which accounts are excluded.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://data/seeds.yml","compiled_path":null,"build_path":null,"deferred":false,"unrendered_config":{"enabled":true,"database":"{{ env_var('SNOWFLAKE_PROD_DATABASE') }}","schema":"legacy","quote_columns":false,"post-hook":["{{ mask_model() }}"],"query_tag":"dbt"},"created_at":1689033765.8792512,"compiled_sql":"","extra_ctes_injected":true,"extra_ctes":[],"relation_name":"\"PROD\".legacy.zuora_excluded_accounts","label":"zuora_excluded_accounts"}],"source":[{"metadata":{"type":"BASE TABLE","schema":"ZUORA_STITCH","name":"ACCOUNT","database":"RAW","comment":null,"owner":"STITCH"},"columns":{"ACCOUNTCODE__C":{"type":"TEXT","index":1,"name":"ACCOUNTCODE__C","comment":null,"display_name":"accountcode__c"},"ACCOUNTNUMBER":{"type":"TEXT","index":2,"name":"ACCOUNTNUMBER","comment":null,"display_name":"accountnumber"},"ADDITIONALEMAILADDRESSES":{"type":"TEXT","index":3,"name":"ADDITIONALEMAILADDRESSES","comment":null,"display_name":"additionalemailaddresses"},"ALLOWINVOICEEDIT":{"type":"BOOLEAN","index":4,"name":"ALLOWINVOICEEDIT","comment":null,"display_name":"allowinvoiceedit"},"AUTOPAY":{"type":"BOOLEAN","index":5,"name":"AUTOPAY","comment":null,"display_name":"autopay"},"BALANCE":{"type":"FLOAT","index":6,"name":"BALANCE","comment":null,"display_name":"balance"},"BATCH":{"type":"TEXT","index":7,"name":"BATCH","comment":null,"display_name":"batch"},"BCDSETTINGOPTION":{"type":"TEXT","index":8,"name":"BCDSETTINGOPTION","comment":null,"display_name":"bcdsettingoption"},"BILLCYCLEDAY":{"type":"NUMBER","index":9,"name":"BILLCYCLEDAY","comment":null,"display_name":"billcycleday"},"BILLTOCONTACTID":{"type":"TEXT","index":10,"name":"BILLTOCONTACTID","comment":null,"display_name":"billtocontactid"},"COMMUNICATIONPROFILEID":{"type":"TEXT","index":11,"name":"COMMUNICATIONPROFILEID","comment":null,"display_name":"communicationprofileid"},"CONVERSIONRATE__C":{"type":"TEXT","index":12,"name":"CONVERSIONRATE__C","comment":null,"display_name":"conversionrate__c"},"CREATEDBYID":{"type":"TEXT","index":13,"name":"CREATEDBYID","comment":null,"display_name":"createdbyid"},"CREATEDDATE":{"type":"TIMESTAMP_TZ","index":14,"name":"CREATEDDATE","comment":null,"display_name":"createddate"},"CREDITBALANCE":{"type":"FLOAT","index":15,"name":"CREDITBALANCE","comment":null,"display_name":"creditbalance"},"CREDITHOLD__C":{"type":"TIMESTAMP_TZ","index":16,"name":"CREDITHOLD__C","comment":null,"display_name":"credithold__c"},"CRMID":{"type":"TEXT","index":17,"name":"CRMID","comment":null,"display_name":"crmid"},"CURRENCY":{"type":"TEXT","index":18,"name":"CURRENCY","comment":null,"display_name":"currency"},"CUSTOMERSERVICEREPNAME":{"type":"TEXT","index":19,"name":"CUSTOMERSERVICEREPNAME","comment":null,"display_name":"customerservicerepname"},"DEFAULTPAYMENTMETHODID":{"type":"TEXT","index":20,"name":"DEFAULTPAYMENTMETHODID","comment":null,"display_name":"defaultpaymentmethodid"},"DELETED":{"type":"BOOLEAN","index":21,"name":"DELETED","comment":null,"display_name":"deleted"},"ENTITY__C":{"type":"TEXT","index":22,"name":"ENTITY__C","comment":null,"display_name":"entity__c"},"EXCLUDEFROMEOASTARTERBRONZEOFFER__C":{"type":"TEXT","index":23,"name":"EXCLUDEFROMEOASTARTERBRONZEOFFER__C","comment":null,"display_name":"excludefromeoastarterbronzeoffer__c"},"ID":{"type":"TEXT","index":24,"name":"id","comment":null,"description":"Primary Key for Accounts","meta":{},"data_type":null,"quote":null,"tags":[],"tests":[{"test_name":"dbt_utils.expression_is_true","short":"+","label":"dbt_utils.expression_is_true({\"expression\":\"REGEXP '[0-9a-z]{32}'\",\"model\":\"{{ get_where_subquery(source('zuora', 'account')) }}\"})"}],"display_name":"id"},"INVOICEDELIVERYPREFSEMAIL":{"type":"BOOLEAN","index":25,"name":"INVOICEDELIVERYPREFSEMAIL","comment":null,"display_name":"invoicedeliveryprefsemail"},"INVOICEDELIVERYPREFSPRINT":{"type":"BOOLEAN","index":26,"name":"INVOICEDELIVERYPREFSPRINT","comment":null,"display_name":"invoicedeliveryprefsprint"},"INVOICETEMPLATEID":{"type":"TEXT","index":27,"name":"INVOICETEMPLATEID","comment":null,"display_name":"invoicetemplateid"},"LASTINVOICEDATE":{"type":"TIMESTAMP_TZ","index":28,"name":"LASTINVOICEDATE","comment":null,"display_name":"lastinvoicedate"},"MRR":{"type":"FLOAT","index":29,"name":"MRR","comment":null,"display_name":"mrr"},"NAME":{"type":"TEXT","index":30,"name":"NAME","comment":null,"display_name":"name"},"NOTES":{"type":"TEXT","index":31,"name":"NOTES","comment":null,"display_name":"notes"},"PARENTACCOUNTID":{"type":"TEXT","index":32,"name":"PARENTACCOUNTID","comment":null,"display_name":"parentaccountid"},"PARENTID":{"type":"TEXT","index":33,"name":"PARENTID","comment":null,"display_name":"parentid"},"PARENT__C":{"type":"TEXT","index":34,"name":"PARENT__C","comment":null,"display_name":"parent__c"},"PAYMENTGATEWAY":{"type":"TEXT","index":35,"name":"PAYMENTGATEWAY","comment":null,"display_name":"paymentgateway"},"PAYMENTTERM":{"type":"TEXT","index":36,"name":"PAYMENTTERM","comment":null,"display_name":"paymentterm"},"POREQUIRED__C":{"type":"TEXT","index":37,"name":"POREQUIRED__C","comment":null,"display_name":"porequired__c"},"PORTALNAMEURL__C":{"type":"TEXT","index":38,"name":"PORTALNAMEURL__C","comment":null,"display_name":"portalnameurl__c"},"PORTALREQUIRED__C":{"type":"TEXT","index":39,"name":"PORTALREQUIRED__C","comment":null,"display_name":"portalrequired__c"},"PURCHASEORDERNUMBER":{"type":"TEXT","index":40,"name":"PURCHASEORDERNUMBER","comment":null,"display_name":"purchaseordernumber"},"SALESREPNAME":{"type":"TEXT","index":41,"name":"SALESREPNAME","comment":null,"display_name":"salesrepname"},"SEQUENCESETID":{"type":"TEXT","index":42,"name":"SEQUENCESETID","comment":null,"display_name":"sequencesetid"},"SFDC_SYNC__C":{"type":"TEXT","index":43,"name":"SFDC_SYNC__C","comment":null,"display_name":"sfdc_sync__c"},"SOLDTOCONTACTID":{"type":"TEXT","index":44,"name":"SOLDTOCONTACTID","comment":null,"display_name":"soldtocontactid"},"SSPCHANNEL__C":{"type":"TEXT","index":45,"name":"SSPCHANNEL__C","comment":null,"display_name":"sspchannel__c"},"STATUS":{"type":"TEXT","index":46,"name":"STATUS","comment":null,"display_name":"status"},"SUPPORT_HOLD__C__C":{"type":"TEXT","index":47,"name":"SUPPORT_HOLD__C__C","comment":null,"display_name":"support_hold__c__c"},"TAXCOMPANYCODE":{"type":"TEXT","index":48,"name":"TAXCOMPANYCODE","comment":null,"display_name":"taxcompanycode"},"TAXEXEMPTCERTIFICATEID":{"type":"TEXT","index":49,"name":"TAXEXEMPTCERTIFICATEID","comment":null,"display_name":"taxexemptcertificateid"},"TAXEXEMPTCERTIFICATETYPE":{"type":"TEXT","index":50,"name":"TAXEXEMPTCERTIFICATETYPE","comment":null,"display_name":"taxexemptcertificatetype"},"TAXEXEMPTDESCRIPTION":{"type":"TEXT","index":51,"name":"TAXEXEMPTDESCRIPTION","comment":null,"display_name":"taxexemptdescription"},"TAXEXEMPTEFFECTIVEDATE":{"type":"TIMESTAMP_TZ","index":52,"name":"TAXEXEMPTEFFECTIVEDATE","comment":null,"display_name":"taxexempteffectivedate"},"TAXEXEMPTENTITYUSECODE":{"type":"TEXT","index":53,"name":"TAXEXEMPTENTITYUSECODE","comment":null,"display_name":"taxexemptentityusecode"},"TAXEXEMPTEXPIRATIONDATE":{"type":"TIMESTAMP_TZ","index":54,"name":"TAXEXEMPTEXPIRATIONDATE","comment":null,"display_name":"taxexemptexpirationdate"},"TAXEXEMPTISSUINGJURISDICTION":{"type":"TEXT","index":55,"name":"TAXEXEMPTISSUINGJURISDICTION","comment":null,"display_name":"taxexemptissuingjurisdiction"},"TAXEXEMPTSTATUS":{"type":"TEXT","index":56,"name":"TAXEXEMPTSTATUS","comment":null,"display_name":"taxexemptstatus"},"TOTALDEBITMEMOBALANCE":{"type":"FLOAT","index":57,"name":"TOTALDEBITMEMOBALANCE","comment":null,"display_name":"totaldebitmemobalance"},"TOTALINVOICEBALANCE":{"type":"FLOAT","index":58,"name":"TOTALINVOICEBALANCE","comment":null,"display_name":"totalinvoicebalance"},"UNAPPLIEDBALANCE":{"type":"FLOAT","index":59,"name":"UNAPPLIEDBALANCE","comment":null,"display_name":"unappliedbalance"},"UNAPPLIEDCREDITMEMOAMOUNT":{"type":"FLOAT","index":60,"name":"UNAPPLIEDCREDITMEMOAMOUNT","comment":null,"display_name":"unappliedcreditmemoamount"},"UPDATEDBYID":{"type":"TEXT","index":61,"name":"UPDATEDBYID","comment":null,"display_name":"updatedbyid"},"UPDATEDDATE":{"type":"TIMESTAMP_TZ","index":62,"name":"UPDATEDDATE","comment":null,"display_name":"updateddate"},"VATID":{"type":"TEXT","index":63,"name":"VATID","comment":null,"display_name":"vatid"},"_SDC_BATCHED_AT":{"type":"TIMESTAMP_TZ","index":64,"name":"_SDC_BATCHED_AT","comment":null,"display_name":"_sdc_batched_at"},"_SDC_EXTRACTED_AT":{"type":"TIMESTAMP_TZ","index":65,"name":"_SDC_EXTRACTED_AT","comment":null,"display_name":"_sdc_extracted_at"},"_SDC_RECEIVED_AT":{"type":"TIMESTAMP_TZ","index":66,"name":"_SDC_RECEIVED_AT","comment":null,"display_name":"_sdc_received_at"},"_SDC_SEQUENCE":{"type":"NUMBER","index":67,"name":"_SDC_SEQUENCE","comment":null,"display_name":"_sdc_sequence"},"_SDC_TABLE_VERSION":{"type":"NUMBER","index":68,"name":"_SDC_TABLE_VERSION","comment":null,"display_name":"_sdc_table_version"}},"stats":{"last_modified":{"id":"last_modified","label":"Last Modified","value":"2023-07-10 23:01UTC","include":true,"description":"The timestamp for last update/change"},"bytes":{"id":"bytes","label":"Approximate Size","value":7915520,"include":true,"description":"Approximate size of the table as reported by Snowflake"},"row_count":{"id":"row_count","label":"Row Count","value":-1,"include":true,"description":"An approximate count of rows in this table"},"has_stats":{"id":"has_stats","label":"Has Stats?","value":true,"include":false,"description":"Indicates whether there are statistics for this table"}},"unique_id":"source.gitlab_snowflake.zuora.account","fqn":["gitlab_snowflake","sources","zuora","zuora","account"],"database":"RAW","schema":"zuora_stitch","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"models/sources/zuora/sources.yml","original_file_path":"models/sources/zuora/sources.yml","name":"account","source_name":"zuora","source_description":"","loader":"Stitch","identifier":"account","resource_type":"source","quoting":{"database":true,"schema":false,"identifier":false,"column":null},"loaded_at_field":"_sdc_batched_at","freshness":{"warn_after":{"count":8,"period":"hour"},"error_after":{"count":24,"period":"hour"},"filter":null},"external":null,"description":"The account source table contains information about the customer accounts in your Zuora instance. [Link to Documentation](https://www.stitchdata.com/docs/integrations/saas/zuora#account)","meta":{},"source_meta":{},"tags":["tdf","zuora"],"config":{"enabled":true},"patch_path":null,"unrendered_config":{},"relation_name":"\"RAW\".zuora_stitch.account","created_at":1689033767.2218454,"label":"zuora.account"}],"macro":[{"unique_id":"macro.gitlab_snowflake.mask_model","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/dbt_snowflake_masking/mask_model.sql","original_file_path":"macros/dbt_snowflake_masking/mask_model.sql","name":"mask_model","macro_sql":"{%- macro mask_model() -%}\n{# called as a post-hook for an individual model #}\n\n{%- if execute -%}\n {%- set mask_columns = get_columns_to_mask('model', this.identifier) %} {#  #}\n\n {# {% do log(mask_columns, info=true) %} #}\n\n {% if mask_columns %}\n\n    {{ apply_masking_policy(this.database,this.schema,this.identifier,mask_columns) }}   \n\n {% endif %}\n\n{% endif %}\n\n\n{%- endmacro -%}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.get_columns_to_mask","macro.gitlab_snowflake.apply_masking_policy"]},"description":"This macro is designed do be applied as a post-hook on a table or view model.  It will pull the policy information from identified columns and create and apply the masking policy.  This needs to be done after the table or view has been created as it calls for information about the table or view to know the data types of the columns to be masked.","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/dbt_snowflake_masking/macros.yml","arguments":[],"created_at":1689033765.9986544},{"unique_id":"macro.gitlab_snowflake.ref","package_name":"gitlab_snowflake","root_path":"/builds/gitlab-data/analytics/transform/snowflake-dbt","path":"macros/utils/override/ref.sql","original_file_path":"macros/utils/override/ref.sql","name":"ref","macro_sql":"{% macro ref(model_name) %}\n\n  {% set relation = builtins.ref(model_name) %}\n\n  {% if is_table_sampled(model_name) %}\n    {% set new_relation = get_sample_relation(relation) %}\n  {% else %}\n    {% set new_relation = relation %}\n  {% endif %}\n  \n  {% do return(new_relation) %}\n\n{% endmacro %}","resource_type":"macro","tags":[],"depends_on":{"macros":["macro.gitlab_snowflake.ref","macro.gitlab_snowflake.is_table_sampled","macro.gitlab_snowflake.get_sample_relation"]},"description":"This macro will return a the normal relation unless one of the following conditions are met:\n- The table is configured to be sampled, will return relation with the sample_suffix variable appended to the table name","meta":{},"docs":{"show":true},"patch_path":"gitlab_snowflake://macros/utils/override/override.yml","arguments":[],"created_at":1689033766.060527}]},"node":{"resource_type":"model","name":"zuora_account_source","unique_id":"model.gitlab_snowflake.zuora_account_source"}}]]}]]}],["$","section",null,{"className":"section","children":[["$","div",null,{"className":"section-target","id":"code"}],["$","div",null,{"className":"section-content","children":["$","$L32",null,{"versions":{"Source":"$33","Compiled":"$34"},"defaultVersion":"Source","language":"sql"}]}]]}]]}]}]]}]
